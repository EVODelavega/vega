#!/usr/bin/python3

"""
This script generates GrqphQL helpers
"""

import argparse
import jinja2
import sys
import yaml

templ = """// Code generated by python script, DO NOT EDIT.

package gql

import (
\t"fmt"

\ttypes "code.vegaprotocol.io/vega/proto"
){%for enum in enums %}

// convert{{ enum.graphql }} converts a GraphQL enum to a Proto enum
func convert{{ enum.graphql }}(x {{ enum.graphql }}) (types.{{ enum.proto }}, \
error) {
\tswitch x {
{% for gql, pro in enum.mappings.items() %}\tcase {{ gql }}:
\t\treturn types.{{ pro }}, nil
{% endfor %}\tdefault:
\t\terr := fmt.Errorf("failed to convert {{ enum.graphql }} from GraphQL to Pr\
oto: %v", x)
\t\treturn types.{{ enum.defaults.proto }}, err
\t}
}

// unconvert{{ enum.graphql }} converts a Proto enum to a GraphQL enum
func unconvert{{ enum.graphql }}(x types.{{ enum.proto }}) ({{ enum.graphql }}\
, error) {
\tswitch x {
{% for gql, pro in enum.mappings.items() %}\tcase types.{{ pro }}:
\t\treturn {{ gql }}, nil
{% endfor %}\tdefault:
\t\terr := fmt.Errorf("failed to convert {{ enum.graphql }} from Proto to Grap\
hQL: %v", x)
\t\treturn {{ enum.defaults.graphql }}, err
\t}
}
{%- endfor -%}"""


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Autogenerate GraphQL helpers")

    parser.add_argument(
        "--config", type=str, required=True,
        help="Config file (yaml)")

    return parser.parse_args()


def main() -> int:
    args = parse_args()

    try:
        # Try the newer loader. See https://msg.pyyaml.org/load
        config = yaml.load(open(args.config), Loader=yaml.FullLoader)
    except AttributeError:
        # Fall back on the old (exploitable) loader
        config = yaml.load(open(args.config))

    print(jinja2.Template(templ).render(config))

    return 0


if __name__ == "__main__":
    sys.exit(main())
