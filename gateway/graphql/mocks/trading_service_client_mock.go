// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/data-node/gateway/graphql (interfaces: TradingProxyServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	api "code.vegaprotocol.io/protos/vega/api"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockTradingProxyServiceClient is a mock of TradingProxyServiceClient interface
type MockTradingProxyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTradingProxyServiceClientMockRecorder
}

// MockTradingProxyServiceClientMockRecorder is the mock recorder for MockTradingProxyServiceClient
type MockTradingProxyServiceClientMockRecorder struct {
	mock *MockTradingProxyServiceClient
}

// NewMockTradingProxyServiceClient creates a new mock instance
func NewMockTradingProxyServiceClient(ctrl *gomock.Controller) *MockTradingProxyServiceClient {
	mock := &MockTradingProxyServiceClient{ctrl: ctrl}
	mock.recorder = &MockTradingProxyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTradingProxyServiceClient) EXPECT() *MockTradingProxyServiceClientMockRecorder {
	return m.recorder
}

// GetVegaTime mocks base method
func (m *MockTradingProxyServiceClient) GetVegaTime(arg0 context.Context, arg1 *api.GetVegaTimeRequest, arg2 ...grpc.CallOption) (*api.GetVegaTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVegaTime", varargs...)
	ret0, _ := ret[0].(*api.GetVegaTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVegaTime indicates an expected call of GetVegaTime
func (mr *MockTradingProxyServiceClientMockRecorder) GetVegaTime(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVegaTime", reflect.TypeOf((*MockTradingProxyServiceClient)(nil).GetVegaTime), varargs...)
}

// LastBlockHeight mocks base method
func (m *MockTradingProxyServiceClient) LastBlockHeight(arg0 context.Context, arg1 *api.LastBlockHeightRequest, arg2 ...grpc.CallOption) (*api.LastBlockHeightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LastBlockHeight", varargs...)
	ret0, _ := ret[0].(*api.LastBlockHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastBlockHeight indicates an expected call of LastBlockHeight
func (mr *MockTradingProxyServiceClientMockRecorder) LastBlockHeight(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastBlockHeight", reflect.TypeOf((*MockTradingProxyServiceClient)(nil).LastBlockHeight), varargs...)
}

// ObserveEventBus mocks base method
func (m *MockTradingProxyServiceClient) ObserveEventBus(arg0 context.Context, arg1 ...grpc.CallOption) (api.TradingService_ObserveEventBusClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveEventBus", varargs...)
	ret0, _ := ret[0].(api.TradingService_ObserveEventBusClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveEventBus indicates an expected call of ObserveEventBus
func (mr *MockTradingProxyServiceClientMockRecorder) ObserveEventBus(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveEventBus", reflect.TypeOf((*MockTradingProxyServiceClient)(nil).ObserveEventBus), varargs...)
}

// PropagateChainEvent mocks base method
func (m *MockTradingProxyServiceClient) PropagateChainEvent(arg0 context.Context, arg1 *api.PropagateChainEventRequest, arg2 ...grpc.CallOption) (*api.PropagateChainEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PropagateChainEvent", varargs...)
	ret0, _ := ret[0].(*api.PropagateChainEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropagateChainEvent indicates an expected call of PropagateChainEvent
func (mr *MockTradingProxyServiceClientMockRecorder) PropagateChainEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropagateChainEvent", reflect.TypeOf((*MockTradingProxyServiceClient)(nil).PropagateChainEvent), varargs...)
}

// Statistics mocks base method
func (m *MockTradingProxyServiceClient) Statistics(arg0 context.Context, arg1 *api.StatisticsRequest, arg2 ...grpc.CallOption) (*api.StatisticsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Statistics", varargs...)
	ret0, _ := ret[0].(*api.StatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics
func (mr *MockTradingProxyServiceClientMockRecorder) Statistics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockTradingProxyServiceClient)(nil).Statistics), varargs...)
}

// SubmitTransaction mocks base method
func (m *MockTradingProxyServiceClient) SubmitTransaction(arg0 context.Context, arg1 *api.SubmitTransactionRequest, arg2 ...grpc.CallOption) (*api.SubmitTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitTransaction", varargs...)
	ret0, _ := ret[0].(*api.SubmitTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTransaction indicates an expected call of SubmitTransaction
func (mr *MockTradingProxyServiceClientMockRecorder) SubmitTransaction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTransaction", reflect.TypeOf((*MockTradingProxyServiceClient)(nil).SubmitTransaction), varargs...)
}
