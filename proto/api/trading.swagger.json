{
  "swagger": "2.0",
  "info": {
    "title": "proto/api/trading.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/governance/proposals/prepare": {
      "post": {
        "summary": "Prepare proposal that can be sent out to the chain (via SubmitTransaction)",
        "operationId": "PrepareProposal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareProposalResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPrepareProposalRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/markets": {
      "get": {
        "summary": "Get a list of Markets",
        "operationId": "Markets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketsResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets-data": {
      "get": {
        "summary": "Get a list of Market Data",
        "operationId": "MarketsData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketsDataResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets-data/{marketID}": {
      "get": {
        "summary": "Get Market Data by MarketID",
        "operationId": "MarketDataByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketDataByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}": {
      "get": {
        "summary": "Get a Market by ID",
        "operationId": "MarketByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/accounts": {
      "get": {
        "summary": "Get a list of Accounts by Market",
        "operationId": "MarketAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketAccountsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/candles": {
      "get": {
        "summary": "Get a list of Candles by Market",
        "operationId": "Candles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCandlesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sinceTimestamp",
            "description": "nanoseconds since the epoch. See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "interval",
            "description": " - INTERVAL_UNSPECIFIED: Default value, always invalid\n - INTERVAL_I1M: 1 minute\n - INTERVAL_I5M: 5 minutes\n - INTERVAL_I15M: 15 minutes\n - INTERVAL_I1H: 1 hour\n - INTERVAL_I6H: 6 hours\n - INTERVAL_I1D: 1 day",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INTERVAL_UNSPECIFIED",
              "INTERVAL_I1M",
              "INTERVAL_I5M",
              "INTERVAL_I15M",
              "INTERVAL_I1H",
              "INTERVAL_I6H",
              "INTERVAL_I1D"
            ],
            "default": "INTERVAL_UNSPECIFIED"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/depth": {
      "get": {
        "summary": "Get Market Depth",
        "operationId": "MarketDepth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketDepthResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxDepth",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/orders": {
      "get": {
        "summary": "Get a list of Orders by Market",
        "operationId": "OrdersByMarket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrdersByMarketResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/orders/{orderID}": {
      "get": {
        "summary": "Get an Order by Market and OrderID",
        "operationId": "OrderByMarketAndID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrderByMarketAndIdResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/trades": {
      "get": {
        "summary": "Get a list of Trades by Market",
        "operationId": "TradesByMarket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradesByMarketResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/trades/latest": {
      "get": {
        "summary": "Get latest Trade",
        "operationId": "LastTrade",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLastTradeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/orders/prepare/amend": {
      "post": {
        "summary": "Amend an Order",
        "operationId": "PrepareAmendOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareAmendOrderResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAmendOrderRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/orders/prepare/cancel": {
      "post": {
        "summary": "Cancel an Order",
        "operationId": "PrepareCancelOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareCancelOrderResponse"
            }
          }
        },
        "tags": [
          "trading"
        ]
      }
    },
    "/orders/prepare/submit": {
      "post": {
        "summary": "Prepare a submit order request",
        "operationId": "PrepareSubmitOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareSubmitOrderResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSubmitOrderRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/orders/{orderID}/trades": {
      "get": {
        "summary": "Get a list of Trades by Order",
        "operationId": "TradesByOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradesByOrderResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "orderID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/orders/{orderID}/versions": {
      "get": {
        "summary": "Get all versions of the order by its orderID",
        "operationId": "OrderVersionsByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrderVersionsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "orderID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/orders/{reference}": {
      "get": {
        "summary": "Get an Order by Pending Order reference (UUID)",
        "operationId": "OrderByReference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrderByReferenceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties": {
      "get": {
        "summary": "Get a list of Parties",
        "operationId": "Parties",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPartiesResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}": {
      "get": {
        "summary": "Get a Party by ID",
        "operationId": "PartyByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPartyByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/accounts": {
      "get": {
        "summary": "Get a list of Accounts by Party",
        "operationId": "PartyAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPartyAccountsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marketID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": " - ACCOUNT_TYPE_UNSPECIFIED: the default variant for this enum\n - ACCOUNT_TYPE_INSURANCE: This account is created to hold the insurance pool funds of a market.\n - ACCOUNT_TYPE_SETTLEMENT: This account is created to hold fund while settlement or mtm occur.\n - ACCOUNT_TYPE_MARGIN: A party will have multiple margin accounts, one for each market they have traded in. The balance will shift as margin requirements on positions change\n - ACCOUNT_TYPE_GENERAL: A party will have multiple general accounts, one for each assets they want\nto trade with. This is the account where the funds are initially deposited\nor withdrawn from. It's also the account where funds are taken to fullfill\nmargin requirement or fees\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: This account is created to hold fees earned for providing infrastructure\n - ACCOUNT_TYPE_FEES_LIQUIDITY: This account is created to hold fees earned for providing liquidity\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned for placing orders that sit on the book",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_INSURANCE",
              "ACCOUNT_TYPE_SETTLEMENT",
              "ACCOUNT_TYPE_MARGIN",
              "ACCOUNT_TYPE_GENERAL",
              "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
              "ACCOUNT_TYPE_FEES_LIQUIDITY",
              "ACCOUNT_TYPE_FEES_MAKER"
            ],
            "default": "ACCOUNT_TYPE_UNSPECIFIED"
          },
          {
            "name": "asset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/markets/{marketID}/margin": {
      "get": {
        "summary": "Get Margin Levels by PartyID",
        "operationId": "MarginLevels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarginLevelsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/orders": {
      "get": {
        "summary": "Get a list of Orders by Party",
        "operationId": "OrdersByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrdersByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/positions": {
      "get": {
        "summary": "Get a list of Positions by Party",
        "operationId": "PositionsByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPositionsByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marketID",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/trades": {
      "get": {
        "summary": "Get a list of Trades by Party",
        "operationId": "TradesByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradesByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marketID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/statistics": {
      "get": {
        "summary": "Get Statistics",
        "operationId": "Statistics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/vegaStatistics"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/time": {
      "get": {
        "summary": "Get Time",
        "operationId": "GetVegaTime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiVegaTimeResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/transaction": {
      "post": {
        "summary": "Submit a signed transaction",
        "operationId": "SubmitTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSubmitTransactionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSubmitTransactionRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    }
  },
  "definitions": {
    "OrderStatus": {
      "type": "string",
      "enum": [
        "STATUS_INVALID",
        "STATUS_ACTIVE",
        "STATUS_EXPIRED",
        "STATUS_CANCELLED",
        "STATUS_STOPPED",
        "STATUS_FILLED",
        "STATUS_REJECTED",
        "STATUS_PARTIALLY_FILLED"
      ],
      "default": "STATUS_INVALID",
      "description": "See [What order types are available to trade on Vega?](https://docs.vega.xyz/docs/50-trading-questions/#what-order-types-are-available-to-trade-on-vega) for details.\n\n - STATUS_INVALID: Default value, always invalid\n - STATUS_ACTIVE: used for active unfilled or partially filled orders\n - STATUS_EXPIRED: used for expired GTT orders\n - STATUS_CANCELLED: used for orders cancelled by the party that created the order\n - STATUS_STOPPED: used for unfilled FOK or IOC orders, and for orders that were stopped by the network\n - STATUS_FILLED: used for closed fully filled orders\n - STATUS_REJECTED: used for orders when not enough collateral was available to fill the margin requirements\n - STATUS_PARTIALLY_FILLED: used for closed partially filled IOC orders",
      "title": "Order Status"
    },
    "OrderTimeInForce": {
      "type": "string",
      "enum": [
        "TIF_UNSPECIFIED",
        "TIF_GTC",
        "TIF_GTT",
        "TIF_IOC",
        "TIF_FOK"
      ],
      "default": "TIF_UNSPECIFIED",
      "description": "See [What order types are available to trade on Vega?](https://docs.vega.xyz/docs/50-trading-questions/#what-order-types-are-available-to-trade-on-vega) for details.\n\n - TIF_UNSPECIFIED: Default value, can be valid for an amend\n - TIF_GTC: good til cancelled\n - TIF_GTT: good til time\n - TIF_IOC: immediate or cancel\n - TIF_FOK: fill or kill",
      "title": "Order Time in Force"
    },
    "ProposalState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_FAILED",
        "STATE_OPEN",
        "STATE_PASSED",
        "STATE_REJECTED",
        "STATE_DECLINED",
        "STATE_ENACTED",
        "STATE_WAITING_FOR_NODE_VOTE"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "Proposal state transition:\nOpen -\u003e\n  - Passed -\u003e Enacted.\n  - Passed -\u003e Failed.\n  - Declined\nRejected\nProposal can enter Failed state from any other state.\n\n - STATE_UNSPECIFIED: Default value, always invalid.\n - STATE_FAILED: Proposal enactment has failed - even though proposal has passed, its execusion could not be performed.\n - STATE_OPEN: Proposal is open for voting.\n - STATE_PASSED: Proposal has gained enough support to be executed.\n - STATE_REJECTED: Proposal wasn't accepted (proposal terms failed validation due to wrong configuration or failing to meet network requirements).\n - STATE_DECLINED: Proposal didn't get enough votes (either failing to gain required participation or majority level).\n - STATE_WAITING_FOR_NODE_VOTE: waiting for validators validation of the proposal"
    },
    "VoteValue": {
      "type": "string",
      "enum": [
        "VALUE_UNSPECIFIED",
        "VALUE_NO",
        "VALUE_YES"
      ],
      "default": "VALUE_UNSPECIFIED",
      "description": " - VALUE_UNSPECIFIED: Default value, always invalid.\n - VALUE_NO: A vote against the proposal.\n - VALUE_YES: A vote in favour of the proposal."
    },
    "apiAmendOrderRequest": {
      "type": "object",
      "properties": {
        "amendment": {
          "$ref": "#/definitions/vegaOrderAmendment"
        }
      }
    },
    "apiAssetByIDResponse": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/vegaAsset",
          "title": "The asset corresponding to the requested ID"
        }
      },
      "title": "The response message to get an AssetByID"
    },
    "apiAssetsResponse": {
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAsset"
          },
          "title": "The list of assets"
        }
      },
      "title": "The response containing the list of all assets enabled in vega"
    },
    "apiCandlesResponse": {
      "type": "object",
      "properties": {
        "candles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaCandle"
          }
        }
      }
    },
    "apiFeeInfrastructureAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAccount"
          },
          "title": "A list of infrastructure fee accounts for all\nor a specific asset"
        }
      },
      "title": "Response for the infrastructure fees accounts"
    },
    "apiGetNetworkParametersProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          }
        }
      }
    },
    "apiGetNewAssetProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          }
        }
      }
    },
    "apiGetNewMarketProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          }
        }
      }
    },
    "apiGetNodeSignaturesAggregateResponse": {
      "type": "object",
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaNodeSignature"
          },
          "title": "The list of signatures"
        }
      },
      "title": "The response of the GetNodeSIgnatureAggregate rpc"
    },
    "apiGetProposalByIDResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/vegaGovernanceData"
        }
      }
    },
    "apiGetProposalByReferenceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/vegaGovernanceData"
        }
      }
    },
    "apiGetProposalsByPartyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          }
        }
      }
    },
    "apiGetProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          }
        }
      }
    },
    "apiGetUpdateMarketProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          }
        }
      }
    },
    "apiGetVotesByPartyResponse": {
      "type": "object",
      "properties": {
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaVote"
          }
        }
      }
    },
    "apiLastTradeResponse": {
      "type": "object",
      "properties": {
        "trade": {
          "$ref": "#/definitions/vegaTrade"
        }
      }
    },
    "apiMarginLevelsResponse": {
      "type": "object",
      "properties": {
        "marginLevels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarginLevels"
          }
        }
      }
    },
    "apiMarketAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAccount"
          }
        }
      }
    },
    "apiMarketByIDResponse": {
      "type": "object",
      "properties": {
        "market": {
          "$ref": "#/definitions/vegaMarket"
        }
      }
    },
    "apiMarketDataByIDResponse": {
      "type": "object",
      "properties": {
        "marketData": {
          "$ref": "#/definitions/vegaMarketData"
        }
      }
    },
    "apiMarketDepthResponse": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string"
        },
        "buy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          }
        },
        "sell": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          }
        },
        "lastTrade": {
          "$ref": "#/definitions/vegaTrade"
        }
      }
    },
    "apiMarketsDataResponse": {
      "type": "object",
      "properties": {
        "marketsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarketData"
          }
        }
      }
    },
    "apiMarketsResponse": {
      "type": "object",
      "properties": {
        "markets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarket"
          },
          "title": "a list of Markets"
        }
      }
    },
    "apiOptionalProposalState": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProposalState"
        }
      }
    },
    "apiOrderByMarketAndIdResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder"
        }
      }
    },
    "apiOrderByReferenceResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder"
        }
      }
    },
    "apiOrderVersionsResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          }
        }
      }
    },
    "apiOrdersByMarketResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          }
        }
      }
    },
    "apiOrdersByPartyResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          }
        }
      }
    },
    "apiOrdersStream": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          }
        }
      }
    },
    "apiPagination": {
      "type": "object",
      "properties": {
        "skip": {
          "type": "string",
          "format": "uint64"
        },
        "limit": {
          "type": "string",
          "format": "uint64"
        },
        "descending": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiPartiesResponse": {
      "type": "object",
      "properties": {
        "parties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaParty"
          }
        }
      }
    },
    "apiPartyAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAccount"
          }
        }
      }
    },
    "apiPartyByIDResponse": {
      "type": "object",
      "properties": {
        "party": {
          "$ref": "#/definitions/vegaParty"
        }
      }
    },
    "apiPositionsByPartyResponse": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPosition"
          }
        }
      }
    },
    "apiPrepareAmendOrderResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiPrepareCancelOrderResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiPrepareProposalRequest": {
      "type": "object",
      "properties": {
        "partyID": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "proposal": {
          "$ref": "#/definitions/vegaProposalTerms"
        }
      }
    },
    "apiPrepareProposalResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte"
        },
        "pendingProposal": {
          "$ref": "#/definitions/vegaProposal"
        }
      }
    },
    "apiPrepareSubmitOrderResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte"
        },
        "submitID": {
          "type": "string"
        }
      }
    },
    "apiPrepareVoteResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte"
        },
        "vote": {
          "$ref": "#/definitions/vegaVote"
        }
      }
    },
    "apiPropagateChainEventResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "format": "boolean",
          "title": "Did the event get accepted by the node successfully"
        }
      },
      "title": "The response for a new event sent to vega"
    },
    "apiSubmitOrderRequest": {
      "type": "object",
      "properties": {
        "submission": {
          "$ref": "#/definitions/vegaOrderSubmission",
          "description": "the bulk of the Order, including market, party, price, size, side, time in force, etc."
        }
      }
    },
    "apiSubmitTransactionRequest": {
      "type": "object",
      "properties": {
        "tx": {
          "$ref": "#/definitions/vegaSignedBundle"
        }
      }
    },
    "apiSubmitTransactionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiTradesByMarketResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          }
        }
      }
    },
    "apiTradesByOrderResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          }
        }
      }
    },
    "apiTradesByPartyResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          }
        }
      }
    },
    "apiTradesStream": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          }
        }
      }
    },
    "apiVegaTimeResponse": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "nanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "vegaAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "balance": {
          "type": "string",
          "format": "uint64"
        },
        "asset": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/vegaAccountType"
        }
      }
    },
    "vegaAccountType": {
      "type": "string",
      "enum": [
        "ACCOUNT_TYPE_UNSPECIFIED",
        "ACCOUNT_TYPE_INSURANCE",
        "ACCOUNT_TYPE_SETTLEMENT",
        "ACCOUNT_TYPE_MARGIN",
        "ACCOUNT_TYPE_GENERAL",
        "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
        "ACCOUNT_TYPE_FEES_LIQUIDITY",
        "ACCOUNT_TYPE_FEES_MAKER"
      ],
      "default": "ACCOUNT_TYPE_UNSPECIFIED",
      "title": "- ACCOUNT_TYPE_UNSPECIFIED: the default variant for this enum\n - ACCOUNT_TYPE_INSURANCE: This account is created to hold the insurance pool funds of a market.\n - ACCOUNT_TYPE_SETTLEMENT: This account is created to hold fund while settlement or mtm occur.\n - ACCOUNT_TYPE_MARGIN: A party will have multiple margin accounts, one for each market they have traded in. The balance will shift as margin requirements on positions change\n - ACCOUNT_TYPE_GENERAL: A party will have multiple general accounts, one for each assets they want\nto trade with. This is the account where the funds are initially deposited\nor withdrawn from. It's also the account where funds are taken to fullfill\nmargin requirement or fees\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: This account is created to hold fees earned for providing infrastructure\n - ACCOUNT_TYPE_FEES_LIQUIDITY: This account is created to hold fees earned for providing liquidity\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned for placing orders that sit on the book"
    },
    "vegaAddValidator": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/vegaIdentifier",
          "title": "The identifier of this validator"
        }
      },
      "title": "A message to notify a new validator being added to the vega network"
    },
    "vegaAsset": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "title": "The vega internal ID of the asset"
        },
        "name": {
          "type": "string",
          "title": "The name of the asset (e.g: Great British Pound)"
        },
        "symbol": {
          "type": "string",
          "title": "The symbol of the asset (e.g: GBP)"
        },
        "totalSupply": {
          "type": "string",
          "title": "The total circulating supply for the asset"
        },
        "decimals": {
          "type": "string",
          "format": "uint64",
          "title": "The number of decimal / precision handled by this asset"
        },
        "source": {
          "$ref": "#/definitions/vegaAssetSource",
          "title": "The definition of the external source for this asset"
        }
      },
      "title": "The vega representation of an external asset"
    },
    "vegaAssetSource": {
      "type": "object",
      "properties": {
        "builtinAsset": {
          "$ref": "#/definitions/vegaBuiltinAsset"
        },
        "erc20": {
          "$ref": "#/definitions/vegaERC20"
        }
      }
    },
    "vegaAuctionDuration": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "volume": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "AuctionDuration can be used to configure 3 auction periods:\n1) duration \u003e 0, volume == 0: The auction will last for at least N seconds\n2) Duration == 0, volume \u003e 0: Auction period will end once we can close with given traded volume\n3) Duration \u003e 0 \u0026 volume \u003e 0: Auction period will take at least N seconds, but can end sooner if we can trade a certain volume"
    },
    "vegaBTCDeposit": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "title": "The vega network internally ID of the asset"
        },
        "sourceBTCAddress": {
          "type": "string",
          "title": "The BTC wallet inititing the Deposit"
        },
        "targetPartyId": {
          "type": "string",
          "title": "The Vega public key of the target Vega user"
        }
      },
      "title": "A Bitcoin deposit into vega"
    },
    "vegaBTCEvent": {
      "type": "object",
      "properties": {
        "index": {
          "type": "string",
          "format": "uint64",
          "title": "The index of the transaction"
        },
        "block": {
          "type": "string",
          "format": "uint64",
          "title": "The block in which the transaction happenned"
        },
        "deposit": {
          "$ref": "#/definitions/vegaBTCDeposit"
        },
        "withdrawal": {
          "$ref": "#/definitions/vegaBTCWithdrawal"
        }
      },
      "title": "An event from Bitcoin"
    },
    "vegaBTCWithdrawal": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "title": "The vega network internally ID of the asset"
        },
        "sourcePartyId": {
          "type": "string",
          "title": "The party inititing the withdrawal"
        },
        "targetBTCAddress": {
          "type": "string",
          "title": "Target BTC wallet address"
        },
        "referenceNonce": {
          "type": "string",
          "title": "The nonce reference of the transaction"
        }
      },
      "title": "A Bitcoin withdrawl from vega"
    },
    "vegaBitcoinAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "A Bitcoin address"
        }
      },
      "title": "Wrapper for a Bitcoin address (wallet)"
    },
    "vegaBuiltinAsset": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the asset (e.g: Great British Pound)"
        },
        "symbol": {
          "type": "string",
          "title": "The symbol of the asset (e.g: GBP)"
        },
        "totalSupply": {
          "type": "string",
          "title": "The total circulating supply for the asset"
        },
        "decimals": {
          "type": "string",
          "format": "uint64",
          "title": "The number of decimal / precision handled by this asset"
        }
      },
      "title": "A vega internal asset"
    },
    "vegaBuiltinAssetDeposit": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "title": "A vega network internal asset ID"
        },
        "partyID": {
          "type": "string",
          "title": "A vega party ID (pubkey)"
        },
        "amount": {
          "type": "string",
          "format": "uint64",
          "title": "The amount to be deposited"
        }
      },
      "title": "A deposit for an vega builtin asset"
    },
    "vegaBuiltinAssetEvent": {
      "type": "object",
      "properties": {
        "deposit": {
          "$ref": "#/definitions/vegaBuiltinAssetDeposit"
        },
        "withdrawal": {
          "$ref": "#/definitions/vegaBuiltinAssetWithdrawal"
        }
      },
      "title": "An event related to a vega builtin asset"
    },
    "vegaBuiltinAssetWithdrawal": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "title": "A vega network internal asset ID"
        },
        "partyID": {
          "type": "string",
          "title": "A vega network party ID (pubkey)"
        },
        "amount": {
          "type": "string",
          "format": "uint64",
          "title": "The amount to be withdrawan"
        }
      },
      "title": "A Withdrawal for a vega builtin asset"
    },
    "vegaCandle": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "nanoseconds since the epoch. See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "datetime": {
          "type": "string",
          "title": "ISO 8601 datetime"
        },
        "high": {
          "type": "string",
          "format": "uint64"
        },
        "low": {
          "type": "string",
          "format": "uint64"
        },
        "open": {
          "type": "string",
          "format": "uint64"
        },
        "close": {
          "type": "string",
          "format": "uint64"
        },
        "volume": {
          "type": "string",
          "format": "uint64"
        },
        "interval": {
          "$ref": "#/definitions/vegaInterval"
        }
      }
    },
    "vegaChainEvent": {
      "type": "object",
      "properties": {
        "txID": {
          "type": "string",
          "title": "The ID of the transaction in which the things happened\nusually a hash"
        },
        "builtin": {
          "$ref": "#/definitions/vegaBuiltinAssetEvent"
        },
        "erc20": {
          "$ref": "#/definitions/vegaERC20Event"
        },
        "btc": {
          "$ref": "#/definitions/vegaBTCEvent"
        },
        "validator": {
          "$ref": "#/definitions/vegaValidatorEvent"
        }
      },
      "title": "An event being forwarded to the vega network\nproviding information on things happening on other networks"
    },
    "vegaChainStatus": {
      "type": "string",
      "enum": [
        "CHAIN_STATUS_UNSPECIFIED",
        "CHAIN_STATUS_DISCONNECTED",
        "CHAIN_STATUS_REPLAYING",
        "CHAIN_STATUS_CONNECTED"
      ],
      "default": "CHAIN_STATUS_UNSPECIFIED"
    },
    "vegaContinuousTrading": {
      "type": "object",
      "properties": {
        "tickSize": {
          "type": "string"
        }
      }
    },
    "vegaDiscreteTrading": {
      "type": "object",
      "properties": {
        "durationNs": {
          "type": "string",
          "format": "int64",
          "title": "Duration in nanoseconds, maximum 1 month (2592000000000000 ns)"
        },
        "tickSize": {
          "type": "string"
        }
      }
    },
    "vegaERC20": {
      "type": "object",
      "properties": {
        "contractAddress": {
          "type": "string",
          "title": "The address of the contract for the token, on the ethereum network"
        }
      },
      "title": "An ERC20 token based asset, living on the ethereum network"
    },
    "vegaERC20AssetDelist": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "title": "The vega network internally ID of the asset"
        }
      },
      "title": "An asset blacklisting for a erc20 token"
    },
    "vegaERC20AssetList": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "title": "The vega network internally ID of the asset"
        }
      },
      "title": "An asset whitelisting for a erc20 token"
    },
    "vegaERC20Deposit": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "title": "The vega network internally ID of the asset"
        },
        "sourceEthereumAddress": {
          "type": "string",
          "title": "The ethereum wallet that initiated the deposit"
        },
        "targetPartyID": {
          "type": "string",
          "title": "The Vega public key of the target vega user"
        }
      },
      "title": "An asset deposit for an erc20 token"
    },
    "vegaERC20Event": {
      "type": "object",
      "properties": {
        "index": {
          "type": "string",
          "format": "uint64",
          "title": "Index of the transaction"
        },
        "block": {
          "type": "string",
          "format": "uint64",
          "title": "The block in which the transaction was added"
        },
        "assetList": {
          "$ref": "#/definitions/vegaERC20AssetList"
        },
        "assetDelist": {
          "$ref": "#/definitions/vegaERC20AssetDelist"
        },
        "deposit": {
          "$ref": "#/definitions/vegaERC20Deposit"
        },
        "withdrawal": {
          "$ref": "#/definitions/vegaERC20Withdrawal"
        }
      },
      "title": "An event related to an erc20 token"
    },
    "vegaERC20Withdrawal": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "title": "The vega network internally ID of the asset"
        },
        "sourcePartyId": {
          "type": "string",
          "title": "The party inititing the withdrawal"
        },
        "targetEthereumAddress": {
          "type": "string",
          "title": "The target Ethereum wallet address"
        },
        "referenceNonce": {
          "type": "string",
          "title": "The reference nonce used for the transaction"
        }
      },
      "title": "An asset withdrawal for an erc20 token"
    },
    "vegaEthereumAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "An Ethereum address"
        }
      },
      "title": "Wrapper for an Ethereum address (wallet/contract)"
    },
    "vegaEthereumEvent": {
      "type": "object",
      "properties": {
        "contractID": {
          "type": "string"
        },
        "event": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaExternalRiskModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "socket": {
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "vegaFee": {
      "type": "object",
      "properties": {
        "makerFee": {
          "type": "string",
          "format": "uint64",
          "title": "A fee being paid to the non-aggressor party of the trade"
        },
        "infrastructureFee": {
          "type": "string",
          "format": "uint64",
          "title": "A fee being paid to maintaining the vega infrastructure"
        },
        "liquidityFee": {
          "type": "string",
          "format": "uint64",
          "title": "A fee being paid to the market makers"
        }
      },
      "title": "The fees being paid by a party, resulting from a trade"
    },
    "vegaFeeFactors": {
      "type": "object",
      "properties": {
        "makerFee": {
          "type": "string"
        },
        "infrastructureFee": {
          "type": "string"
        },
        "liquidityFee": {
          "type": "string"
        }
      }
    },
    "vegaFeeFactorsConfiguration": {
      "type": "object",
      "properties": {
        "infrastructureFee": {
          "type": "string",
          "title": "the infrastructure fee, needs to be a valid float"
        },
        "makerFee": {
          "type": "string",
          "title": "the maker fee, needs to be a valid float"
        },
        "liquidityFee": {
          "type": "string",
          "title": "this is the liquidity fee, it needs to be a valid float"
        }
      },
      "title": "FeeFactors set at the network level"
    },
    "vegaFees": {
      "type": "object",
      "properties": {
        "factors": {
          "$ref": "#/definitions/vegaFeeFactors"
        }
      }
    },
    "vegaFuture": {
      "type": "object",
      "properties": {
        "maturity": {
          "type": "string"
        },
        "asset": {
          "type": "string"
        },
        "ethereumEvent": {
          "$ref": "#/definitions/vegaEthereumEvent"
        }
      }
    },
    "vegaFutureProduct": {
      "type": "object",
      "properties": {
        "maturity": {
          "type": "string",
          "title": "Future product maturity (ISO8601/RFC3339 timestamp)"
        },
        "asset": {
          "type": "string",
          "title": "Product asset name"
        }
      },
      "title": "Future product configuration"
    },
    "vegaGovernanceData": {
      "type": "object",
      "properties": {
        "proposal": {
          "$ref": "#/definitions/vegaProposal",
          "title": "Proposal"
        },
        "yes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaVote"
          },
          "description": "All \"yes\" votes in favour of the proposal above."
        },
        "no": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaVote"
          },
          "description": "All \"no\" votes against the proposal above."
        },
        "yesParty": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/vegaVote"
          },
          "title": "All latest YES votes by party (guaranteed to be unique)"
        },
        "noParty": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/vegaVote"
          },
          "title": "All latest NO votes by party (unique)"
        }
      }
    },
    "vegaIdentifier": {
      "type": "object",
      "properties": {
        "ethereumAddress": {
          "$ref": "#/definitions/vegaEthereumAddress"
        },
        "bitcoinAddress": {
          "$ref": "#/definitions/vegaBitcoinAddress"
        }
      },
      "title": "A wrapper type on any possible network address supported by vega"
    },
    "vegaInstrument": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "baseName": {
          "type": "string"
        },
        "quoteName": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/vegaInstrumentMetadata"
        },
        "initialMarkPrice": {
          "type": "string",
          "format": "uint64"
        },
        "future": {
          "$ref": "#/definitions/vegaFuture"
        }
      }
    },
    "vegaInstrumentConfiguration": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Instrument name"
        },
        "code": {
          "type": "string",
          "title": "Instrument code"
        },
        "baseName": {
          "type": "string",
          "title": "Base security used as the reference"
        },
        "quoteName": {
          "type": "string",
          "title": "Quote (secondary) security"
        },
        "future": {
          "$ref": "#/definitions/vegaFutureProduct"
        }
      }
    },
    "vegaInstrumentMetadata": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "vegaInterval": {
      "type": "string",
      "enum": [
        "INTERVAL_UNSPECIFIED",
        "INTERVAL_I1M",
        "INTERVAL_I5M",
        "INTERVAL_I15M",
        "INTERVAL_I1H",
        "INTERVAL_I6H",
        "INTERVAL_I1D"
      ],
      "default": "INTERVAL_UNSPECIFIED",
      "title": "- INTERVAL_UNSPECIFIED: Default value, always invalid\n - INTERVAL_I1M: 1 minute\n - INTERVAL_I5M: 5 minutes\n - INTERVAL_I15M: 15 minutes\n - INTERVAL_I1H: 1 hour\n - INTERVAL_I6H: 6 hours\n - INTERVAL_I1D: 1 day"
    },
    "vegaLedgerEntry": {
      "type": "object",
      "properties": {
        "fromAccount": {
          "type": "string"
        },
        "toAccount": {
          "type": "string"
        },
        "amount": {
          "type": "string",
          "format": "uint64"
        },
        "reference": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaLogNormalModelParams": {
      "type": "object",
      "properties": {
        "mu": {
          "type": "number",
          "format": "double"
        },
        "r": {
          "type": "number",
          "format": "double"
        },
        "sigma": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "vegaLogNormalRiskModel": {
      "type": "object",
      "properties": {
        "riskAversionParameter": {
          "type": "number",
          "format": "double"
        },
        "tau": {
          "type": "number",
          "format": "double"
        },
        "params": {
          "$ref": "#/definitions/vegaLogNormalModelParams"
        }
      }
    },
    "vegaMarginCalculator": {
      "type": "object",
      "properties": {
        "scalingFactors": {
          "$ref": "#/definitions/vegaScalingFactors"
        }
      }
    },
    "vegaMarginLevels": {
      "type": "object",
      "properties": {
        "maintenanceMargin": {
          "type": "string",
          "format": "uint64"
        },
        "searchLevel": {
          "type": "string",
          "format": "uint64"
        },
        "initialMargin": {
          "type": "string",
          "format": "uint64"
        },
        "collateralReleaseLevel": {
          "type": "string",
          "format": "uint64"
        },
        "partyID": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "asset": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaMarket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "tradableInstrument": {
          "$ref": "#/definitions/vegaTradableInstrument"
        },
        "decimalPlaces": {
          "type": "string",
          "format": "uint64",
          "title": "the number of decimal places that a price must be shifted by in order to get a correct price denominated in the currency of the Market. ie `realPrice = price / 10^decimalPlaces`"
        },
        "fees": {
          "$ref": "#/definitions/vegaFees",
          "title": "fees configuration"
        },
        "openingAuction": {
          "$ref": "#/definitions/vegaAuctionDuration",
          "title": "Specifies how long the opening auction will run (min duration + optionally minimum traded volume)"
        },
        "continuous": {
          "$ref": "#/definitions/vegaContinuousTrading"
        },
        "discrete": {
          "$ref": "#/definitions/vegaDiscreteTrading"
        }
      }
    },
    "vegaMarketData": {
      "type": "object",
      "properties": {
        "markPrice": {
          "type": "string",
          "format": "uint64",
          "title": "the mark price (actually an unsgined int)"
        },
        "bestBidPrice": {
          "type": "string",
          "format": "uint64",
          "description": "the highest price level on an order book for buy orders."
        },
        "bestBidVolume": {
          "type": "string",
          "format": "uint64",
          "description": "the aggregated volume being bid at the best bid price."
        },
        "bestOfferPrice": {
          "type": "string",
          "format": "uint64",
          "description": "the lowest price level on an order book for offer orders."
        },
        "bestOfferVolume": {
          "type": "string",
          "format": "uint64",
          "description": "the aggregated volume being offered at the best offer price."
        },
        "midPrice": {
          "type": "string",
          "format": "uint64",
          "description": "the arithmetic average of the best bid price and best offer price."
        },
        "market": {
          "type": "string",
          "title": "market id of the associated mark price"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "time at which this mark price was relevant"
        },
        "openInterest": {
          "type": "string",
          "format": "uint64",
          "description": "the sum of the size of all positions greater than 0."
        },
        "auctionEnd": {
          "type": "string",
          "format": "int64",
          "title": "time in seconds until the end of the auction (0 if currently not in auction period)"
        },
        "auctionStart": {
          "type": "string",
          "format": "int64",
          "title": "time until next auction (used in FBA's) - currently always 0"
        }
      }
    },
    "vegaMarketDepth": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string"
        },
        "buy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          }
        },
        "sell": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          }
        }
      }
    },
    "vegaNetworkConfiguration": {
      "type": "object",
      "properties": {
        "minCloseInSeconds": {
          "type": "string",
          "format": "int64",
          "description": "Constrains minimum duration since submission (in seconds) when vote closing time is allowed to be set for a proposal."
        },
        "maxCloseInSeconds": {
          "type": "string",
          "format": "int64",
          "description": "Constrains maximum duration since submission (in seconds) when vote closing time is allowed to be set for a proposal."
        },
        "minEnactInSeconds": {
          "type": "string",
          "format": "int64",
          "description": "Constrains minimum duration since submission (in seconds) when enactment is allowed to be set for a proposal."
        },
        "maxEnactInSeconds": {
          "type": "string",
          "format": "int64",
          "description": "Constrains maximum duration since submission (in seconds) when enactment is allowed to be set for a proposal."
        },
        "requiredParticipation": {
          "type": "number",
          "format": "float",
          "description": "Participation level required for any proposal to pass. Value from `0` to `1`."
        },
        "requiredMajority": {
          "type": "number",
          "format": "float",
          "description": "Majority level required for any proposal to pass. Value from `0.5` to `1`."
        },
        "minProposerBalance": {
          "type": "number",
          "format": "float",
          "description": "Minimum balance required for a party to be able to submit a new proposal. Value greater than `0` to `1`."
        },
        "minVoterBalance": {
          "type": "number",
          "format": "float",
          "description": "Minimum balance required for a party to be able to cast a vote. Value greater than `0` to `1`."
        },
        "marginConfiguration": {
          "$ref": "#/definitions/vegaScalingFactors",
          "description": "Scaling factors for all markets created via governance."
        },
        "feeFactorsConfiguration": {
          "$ref": "#/definitions/vegaFeeFactorsConfiguration",
          "title": "FeeFactors which are not set via proposal"
        }
      }
    },
    "vegaNewAsset": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaAssetSource"
        }
      },
      "title": "To be implemented"
    },
    "vegaNewMarket": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaNewMarketConfiguration"
        }
      }
    },
    "vegaNewMarketConfiguration": {
      "type": "object",
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaInstrumentConfiguration",
          "title": "New market instrument configuration"
        },
        "decimalPlaces": {
          "type": "string",
          "format": "uint64",
          "title": "Decimal places used for the new market"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional new market meta data, tags"
        },
        "openingAuctionDuration": {
          "type": "string",
          "format": "int64",
          "title": "for now, just specify a time for the opening auction to last"
        },
        "simple": {
          "$ref": "#/definitions/vegaSimpleModelParams",
          "title": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected"
        },
        "logNormal": {
          "$ref": "#/definitions/vegaLogNormalRiskModel",
          "title": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected"
        },
        "continuous": {
          "$ref": "#/definitions/vegaContinuousTrading"
        },
        "discrete": {
          "$ref": "#/definitions/vegaDiscreteTrading"
        }
      }
    },
    "vegaNodeSignature": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "title": "The ID of the resource being signed"
        },
        "sig": {
          "type": "string",
          "format": "byte",
          "title": "The signature"
        },
        "kind": {
          "$ref": "#/definitions/vegaNodeSignatureKind",
          "title": "The kind of resource being signed"
        }
      },
      "description": "A message reprensenting a signature from a validator\nmeant to be used by foreign chain in order to recognise\na decision taken by the vega network."
    },
    "vegaNodeSignatureKind": {
      "type": "string",
      "enum": [
        "NODE_SIGNATURE_KIND_UNSPECIFIED",
        "NODE_SIGNATURE_KIND_ASSET_NEW",
        "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL"
      ],
      "default": "NODE_SIGNATURE_KIND_UNSPECIFIED",
      "description": "- NODE_SIGNATURE_KIND_UNSPECIFIED: represents a unspecified / missing value from the input\n - NODE_SIGNATURE_KIND_ASSET_NEW: represents a signature for a new asset whitelisting\n - NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL: represents a signature for a asset withdrawal",
      "title": "The kind of the signature created by a node\neg: for a new asset whitelisting, withdrawal"
    },
    "vegaOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "partyID": {
          "type": "string"
        },
        "side": {
          "$ref": "#/definitions/vegaSide"
        },
        "price": {
          "type": "string",
          "format": "uint64"
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "remaining": {
          "type": "string",
          "format": "uint64"
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "description": "nanoseconds since the epoch. See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "status": {
          "$ref": "#/definitions/OrderStatus",
          "description": "If `status` is `STATUS_REJECTED`, check `reason`."
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "reference": {
          "type": "string"
        },
        "reason": {
          "$ref": "#/definitions/vegaOrderError"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "Versioning support for amends, orders start at version 1 and increment\nafter each successful amend"
        },
        "batchID": {
          "type": "string",
          "format": "uint64",
          "title": "used internally, for orders submitted during auctions\nto keep track which auction batch this order falls under (required for fees calculation)"
        }
      }
    },
    "vegaOrderAmendment": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string",
          "title": "required to find the order, not being updated"
        },
        "partyID": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/vegaPrice",
          "title": "these can be amended"
        },
        "sizeDelta": {
          "type": "string",
          "format": "int64"
        },
        "expiresAt": {
          "$ref": "#/definitions/vegaTimestamp"
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce"
        }
      }
    },
    "vegaOrderCancellation": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "partyID": {
          "type": "string"
        }
      }
    },
    "vegaOrderError": {
      "type": "string",
      "enum": [
        "ORDER_ERROR_NONE",
        "ORDER_ERROR_INVALID_MARKET_ID",
        "ORDER_ERROR_INVALID_ORDER_ID",
        "ORDER_ERROR_OUT_OF_SEQUENCE",
        "ORDER_ERROR_INVALID_REMAINING_SIZE",
        "ORDER_ERROR_TIME_FAILURE",
        "ORDER_ERROR_REMOVAL_FAILURE",
        "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
        "ORDER_ERROR_INVALID_ORDER_REFERENCE",
        "ORDER_ERROR_EDIT_NOT_ALLOWED",
        "ORDER_ERROR_AMEND_FAILURE",
        "ORDER_ERROR_NOT_FOUND",
        "ORDER_ERROR_INVALID_PARTY_ID",
        "ORDER_ERROR_MARKET_CLOSED",
        "ORDER_ERROR_MARGIN_CHECK_FAILED",
        "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
        "ORDER_ERROR_INTERNAL_ERROR",
        "ORDER_ERROR_INVALID_SIZE",
        "ORDER_ERROR_INVALID_PERSISTENCE",
        "ORDER_ERROR_INVALID_TYPE",
        "ORDER_ERROR_SELF_TRADING",
        "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES"
      ],
      "default": "ORDER_ERROR_NONE",
      "description": "- ORDER_ERROR_NONE: Empty default error\n - ORDER_ERROR_INVALID_MARKET_ID: Order was submitted for a market that does not exist\n - ORDER_ERROR_INVALID_ORDER_ID: Order was submitted with an invalid ID\n - ORDER_ERROR_OUT_OF_SEQUENCE: Order was amended with a sequence number that was not previous version + 1\n - ORDER_ERROR_INVALID_REMAINING_SIZE: Order was amended with an invalid remaining size (e.g. remaining greater than total size)\n - ORDER_ERROR_TIME_FAILURE: Node was unable to get Vega (blockchain) time\n - ORDER_ERROR_REMOVAL_FAILURE: Failed to remove an order from the book\n - ORDER_ERROR_INVALID_EXPIRATION_DATETIME: GTT Order submitted or amended with an expiration that was badly formatted or otherwise invalid\n - ORDER_ERROR_INVALID_ORDER_REFERENCE: Order was submitted or amended with an invalid reference field\n - ORDER_ERROR_EDIT_NOT_ALLOWED: Order amend was submitted for an order field that cannot not be amended (e.g. order id)\n - ORDER_ERROR_AMEND_FAILURE: Amend failure because amend details do not match original order\n - ORDER_ERROR_NOT_FOUND: Order not found in the order book or in order store\n - ORDER_ERROR_INVALID_PARTY_ID: Order was submitted with an invalid or missing party ID\n - ORDER_ERROR_MARKET_CLOSED: Order was submitted for a market that has closed\n - ORDER_ERROR_MARGIN_CHECK_FAILED: Order was submitted, but the party did not have enough collateral to cover the order\n - ORDER_ERROR_MISSING_GENERAL_ACCOUNT: Order was submitted, but the party did not have an account for this asset\n - ORDER_ERROR_INTERNAL_ERROR: Unspecified internal error\n - ORDER_ERROR_INVALID_SIZE: Order was submitted with an invalid or missing size (e.g. 0)\n - ORDER_ERROR_INVALID_PERSISTENCE: Order was submitted with an invalid persistence for its type\n - ORDER_ERROR_INVALID_TYPE: Order was submitted with an invalid type field\n - ORDER_ERROR_SELF_TRADING: Order was stopped as it would have traded with another order for the same party\n - ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES: Order was submitted, but the party did not have enough collateral to cover the fees for the order",
      "title": "Set when an order has an issue"
    },
    "vegaOrderSubmission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "partyID": {
          "type": "string"
        },
        "price": {
          "type": "string",
          "format": "uint64"
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "side": {
          "$ref": "#/definitions/vegaSide"
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType"
        },
        "reference": {
          "type": "string"
        }
      }
    },
    "vegaOrderType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_LIMIT",
        "TYPE_MARKET",
        "TYPE_NETWORK"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_UNSPECIFIED: Default value, always invalid\n - TYPE_LIMIT: used for Limit orders\n - TYPE_MARKET: used for Market orders\n - TYPE_NETWORK: used for orders where the initiating party is the network (used for distressed traders)",
      "title": "Order Type"
    },
    "vegaParty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "vegaPosition": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string"
        },
        "partyID": {
          "type": "string"
        },
        "openVolume": {
          "type": "string",
          "format": "int64"
        },
        "realisedPNL": {
          "type": "string",
          "format": "int64"
        },
        "unrealisedPNL": {
          "type": "string",
          "format": "int64"
        },
        "averageEntryPrice": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaPrice": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaPriceLevel": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string",
          "format": "uint64"
        },
        "numberOfOrders": {
          "type": "string",
          "format": "uint64"
        },
        "volume": {
          "type": "string",
          "format": "uint64"
        },
        "cumulativeVolume": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaProposal": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "Proposal unique identifier."
        },
        "reference": {
          "type": "string",
          "description": "Proposal reference."
        },
        "partyID": {
          "type": "string",
          "description": "Proposal author, identifier of the party submitting the proposal."
        },
        "state": {
          "$ref": "#/definitions/ProposalState",
          "title": "Proposal state (see Proposal.State definition)"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network."
        },
        "terms": {
          "$ref": "#/definitions/vegaProposalTerms",
          "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted."
        },
        "reason": {
          "$ref": "#/definitions/vegaProposalError",
          "title": "A reason for the current state of the proposal\nthis may be set in case of REJECTED and FAILED status"
        }
      }
    },
    "vegaProposalError": {
      "type": "string",
      "enum": [
        "PROPOSAL_ERROR_UNSPECIFIED",
        "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
        "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
        "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
        "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
        "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
        "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
        "PROPOSAL_ERROR_NO_PRODUCT",
        "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
        "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT_TIMESTAMP",
        "PROPOSAL_ERROR_PRODUCT_MATURITY_IS_PASSED",
        "PROPOSAL_ERROR_NO_TRADING_MODE",
        "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
        "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
        "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
        "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS"
      ],
      "default": "PROPOSAL_ERROR_UNSPECIFIED",
      "description": "- PROPOSAL_ERROR_UNSPECIFIED: default value\n - PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON: the specified close time is too early base on network parameters\n - PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE: the specified close time is too late based on network parameters\n - PROPOSAL_ERROR_ENACT_TIME_TOO_SOON: the specified enact time is too early base on network parameters\n - PROPOSAL_ERROR_ENACT_TIME_TOO_LATE: the specified enact time is too late based on network parameters\n - PROPOSAL_ERROR_INSUFFICIENT_TOKENS: the proposer for this proposal as insufficient token\n - PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY: the instrument quote name and base name were the same\n - PROPOSAL_ERROR_NO_PRODUCT: the proposal has not product\n - PROPOSAL_ERROR_UNSUPPORTED_PRODUCT: the specified product is not supported\n - PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT_TIMESTAMP: invalid future maturity timestamp (expect RFC3339)\n - PROPOSAL_ERROR_PRODUCT_MATURITY_IS_PASSED: the product maturity is past\n - PROPOSAL_ERROR_NO_TRADING_MODE: the proposal has not trading mode\n - PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE: the proposal has an unsupported trading mode\n - PROPOSAL_ERROR_NODE_VALIDATION_FAILED: the proposal failed node validation\n - PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD: a field is missing in a builtin asset source\n - PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS: the contract address is missing in the ERC20 asset source",
      "title": "A list of possible error which could have happenned\nand the cause for an proposal being rejected of failed"
    },
    "vegaProposalTerms": {
      "type": "object",
      "properties": {
        "closingTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp (Unix time in seconds) when voting closes for this proposal.\nConstrained by `minCloseInSeconds` and `maxCloseInSeconds` network parameters."
        },
        "enactmentTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed).\nConstrained by `minEnactInSeconds` and `maxEnactInSeconds` network parameters."
        },
        "validationTimestamp": {
          "type": "string",
          "format": "int64"
        },
        "updateMarket": {
          "$ref": "#/definitions/vegaUpdateMarket",
          "description": "Proposal change for modifying an existing market on Vega."
        },
        "newMarket": {
          "$ref": "#/definitions/vegaNewMarket",
          "description": "Proposal change for creating new market on Vega."
        },
        "updateNetwork": {
          "$ref": "#/definitions/vegaUpdateNetwork",
          "description": "Proposal change for updating Vega network parameters."
        },
        "newAsset": {
          "$ref": "#/definitions/vegaNewAsset",
          "description": "Proposal change for creating new assets on Vega."
        }
      }
    },
    "vegaRemoveValidator": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/vegaIdentifier",
          "title": "The identifier of this validator"
        }
      },
      "title": "A message to notify a new validator being removed to the vega network"
    },
    "vegaScalingFactors": {
      "type": "object",
      "properties": {
        "searchLevel": {
          "type": "number",
          "format": "double"
        },
        "initialMargin": {
          "type": "number",
          "format": "double"
        },
        "collateralRelease": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "vegaSide": {
      "type": "string",
      "enum": [
        "SIDE_UNSPECIFIED",
        "SIDE_BUY",
        "SIDE_SELL"
      ],
      "default": "SIDE_UNSPECIFIED",
      "title": "- SIDE_UNSPECIFIED: Default value, always invalid\n - SIDE_BUY: Buy\n - SIDE_SELL: Sell"
    },
    "vegaSignature": {
      "type": "object",
      "properties": {
        "sig": {
          "type": "string",
          "format": "byte",
          "title": "The bytes of the signature"
        },
        "algo": {
          "type": "string",
          "title": "The algorithm used to create the signature"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "The version of the signature used to create the signature"
        }
      },
      "title": "A signature to be authenticate a transaction\nand to be verified by the vega network"
    },
    "vegaSignedBundle": {
      "type": "object",
      "properties": {
        "tx": {
          "type": "string",
          "format": "byte",
          "title": "the transaction, proto marshalled"
        },
        "sig": {
          "$ref": "#/definitions/vegaSignature",
          "title": "the signature authenticating the transaction"
        }
      },
      "title": "A bundle of a transaction, proto marshalled and it's signature"
    },
    "vegaSimpleModelParams": {
      "type": "object",
      "properties": {
        "factorLong": {
          "type": "number",
          "format": "double"
        },
        "factorShort": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "vegaSimpleRiskModel": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/vegaSimpleModelParams"
        }
      }
    },
    "vegaStatistics": {
      "type": "object",
      "properties": {
        "blockHeight": {
          "type": "string",
          "format": "uint64"
        },
        "backlogLength": {
          "type": "string",
          "format": "uint64"
        },
        "totalPeers": {
          "type": "string",
          "format": "uint64"
        },
        "genesisTime": {
          "type": "string",
          "title": "ISO 8601 datetime, nanosecond precision"
        },
        "currentTime": {
          "type": "string",
          "title": "ISO 8601 datetime, nanosecond precision"
        },
        "vegaTime": {
          "type": "string",
          "title": "ISO 8601 datetime, nanosecond precision"
        },
        "status": {
          "$ref": "#/definitions/vegaChainStatus"
        },
        "txPerBlock": {
          "type": "string",
          "format": "uint64"
        },
        "averageTxBytes": {
          "type": "string",
          "format": "uint64"
        },
        "averageOrdersPerBlock": {
          "type": "string",
          "format": "uint64"
        },
        "tradesPerSecond": {
          "type": "string",
          "format": "uint64"
        },
        "ordersPerSecond": {
          "type": "string",
          "format": "uint64"
        },
        "totalMarkets": {
          "type": "string",
          "format": "uint64"
        },
        "totalAmendOrder": {
          "type": "string",
          "format": "uint64"
        },
        "totalCancelOrder": {
          "type": "string",
          "format": "uint64"
        },
        "totalCreateOrder": {
          "type": "string",
          "format": "uint64"
        },
        "totalOrders": {
          "type": "string",
          "format": "uint64"
        },
        "totalTrades": {
          "type": "string",
          "format": "uint64"
        },
        "orderSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "tradeSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "candleSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "marketDepthSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "positionsSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "accountSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "marketDataSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "appVersionHash": {
          "type": "string"
        },
        "appVersion": {
          "type": "string"
        },
        "chainVersion": {
          "type": "string"
        },
        "blockDuration": {
          "type": "string",
          "format": "uint64",
          "title": "nanoseconds"
        },
        "uptime": {
          "type": "string",
          "title": "ISO 8601 datetime, nanosecond precision"
        },
        "chainID": {
          "type": "string",
          "title": "Unique ID of the blockchain"
        }
      }
    },
    "vegaTimestamp": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaTradableInstrument": {
      "type": "object",
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaInstrument"
        },
        "marginCalculator": {
          "$ref": "#/definitions/vegaMarginCalculator"
        },
        "logNormalRiskModel": {
          "$ref": "#/definitions/vegaLogNormalRiskModel"
        },
        "externalRiskModel": {
          "$ref": "#/definitions/vegaExternalRiskModel"
        },
        "simpleRiskModel": {
          "$ref": "#/definitions/vegaSimpleRiskModel"
        }
      }
    },
    "vegaTrade": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "price": {
          "type": "string",
          "format": "uint64"
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "buyer": {
          "type": "string"
        },
        "seller": {
          "type": "string"
        },
        "aggressor": {
          "$ref": "#/definitions/vegaSide"
        },
        "buyOrder": {
          "type": "string"
        },
        "sellOrder": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "nanoseconds since the epoch. See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "type": {
          "$ref": "#/definitions/vegaTradeType"
        },
        "buyerFee": {
          "$ref": "#/definitions/vegaFee"
        },
        "sellerFee": {
          "$ref": "#/definitions/vegaFee"
        },
        "buyerAuctionBatch": {
          "type": "string",
          "format": "uint64"
        },
        "sellerAuctionBatch": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaTradeType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_DEFAULT",
        "TYPE_NETWORK_CLOSE_OUT_GOOD",
        "TYPE_NETWORK_CLOSE_OUT_BAD"
      ],
      "default": "TYPE_UNSPECIFIED",
      "title": "- TYPE_UNSPECIFIED: Default value, always invalid"
    },
    "vegaTransferBalance": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/vegaAccount"
        },
        "balance": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaTransferResponse": {
      "type": "object",
      "properties": {
        "transfers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLedgerEntry"
          }
        },
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTransferBalance"
          }
        }
      }
    },
    "vegaUpdateMarket": {
      "type": "object"
    },
    "vegaUpdateNetwork": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaNetworkConfiguration"
        }
      }
    },
    "vegaValidatorEvent": {
      "type": "object",
      "properties": {
        "sourceID": {
          "type": "string",
          "title": "The source ID of the event"
        },
        "add": {
          "$ref": "#/definitions/vegaAddValidator"
        },
        "rm": {
          "$ref": "#/definitions/vegaRemoveValidator"
        }
      },
      "title": "An event related to validator management with foreign networks"
    },
    "vegaVote": {
      "type": "object",
      "properties": {
        "partyID": {
          "type": "string",
          "description": "Voter's party identifier."
        },
        "value": {
          "$ref": "#/definitions/VoteValue",
          "description": "Actual vote."
        },
        "proposalID": {
          "type": "string",
          "description": "Identifier of the proposal being voted on."
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network."
        }
      }
    }
  },
  "x-stream-definitions": {
    "apiOrdersStream": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiOrdersStream"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiOrdersStream"
    },
    "apiTradesStream": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiTradesStream"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiTradesStream"
    },
    "vegaAccount": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaAccount"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaAccount"
    },
    "vegaCandle": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaCandle"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaCandle"
    },
    "vegaGovernanceData": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaGovernanceData"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaGovernanceData"
    },
    "vegaMarginLevels": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaMarginLevels"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaMarginLevels"
    },
    "vegaMarketData": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaMarketData"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaMarketData"
    },
    "vegaMarketDepth": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaMarketDepth"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaMarketDepth"
    },
    "vegaPosition": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaPosition"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaPosition"
    },
    "vegaTransferResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaTransferResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaTransferResponse"
    },
    "vegaVote": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaVote"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaVote"
    }
  }
}
