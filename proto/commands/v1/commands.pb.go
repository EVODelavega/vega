// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commands/v1/commands.proto

package v1

import (
	proto1 "code.vegaprotocol.io/vega/proto"
	_ "code.vegaprotocol.io/vega/proto/oracles/v1"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// An order submission is a request to submit or create a new order on Vega
type OrderSubmission struct {
	// Unique identifier for the order (set by the system after consensus)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Market identifier for the order, required field
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier for the order, required field
	PartyId string `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Price for the order, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places,
	// , required field for limit orders, however it is not required for market orders
	Price uint64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	// Size for the order, for example, in a futures market the size equals the number of contracts, cannot be negative
	Size uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	// Side for the order, e.g. SIDE_BUY or SIDE_SELL, required field - See [`Side`](#vega.Side)
	Side proto1.Side `protobuf:"varint,6,opt,name=side,proto3,enum=vega.Side" json:"side,omitempty"`
	// Time in force indicates how long an order will remain active before it is executed or expires, required field
	// - See [`Order.TimeInForce`](#vega.Order.TimeInForce)
	TimeInForce proto1.Order_TimeInForce `protobuf:"varint,7,opt,name=time_in_force,json=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"time_in_force,omitempty"`
	// Timestamp for when the order will expire, in nanoseconds since the epoch,
	// required field only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	ExpiresAt int64 `protobuf:"varint,8,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Type for the order, required field - See [`Order.Type`](#vega.Order.Type)
	Type proto1.Order_Type `protobuf:"varint,9,opt,name=type,proto3,enum=vega.Order_Type" json:"type,omitempty"`
	// Reference given for the order, this is typically used to retrieve an order submitted through consensus, currently
	// set internally by the node to return a unique reference identifier for the order submission
	Reference string `protobuf:"bytes,10,opt,name=reference,proto3" json:"reference,omitempty"`
	// Used to specify the details for a pegged order
	// - See [`PeggedOrder`](#vega.PeggedOrder)
	PeggedOrder          *proto1.PeggedOrder `protobuf:"bytes,11,opt,name=pegged_order,json=peggedOrder,proto3" json:"pegged_order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *OrderSubmission) Reset()         { *m = OrderSubmission{} }
func (m *OrderSubmission) String() string { return proto.CompactTextString(m) }
func (*OrderSubmission) ProtoMessage()    {}
func (*OrderSubmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd984d1ab638cd87, []int{0}
}

func (m *OrderSubmission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderSubmission.Unmarshal(m, b)
}
func (m *OrderSubmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderSubmission.Marshal(b, m, deterministic)
}
func (m *OrderSubmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderSubmission.Merge(m, src)
}
func (m *OrderSubmission) XXX_Size() int {
	return xxx_messageInfo_OrderSubmission.Size(m)
}
func (m *OrderSubmission) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderSubmission.DiscardUnknown(m)
}

var xxx_messageInfo_OrderSubmission proto.InternalMessageInfo

func (m *OrderSubmission) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderSubmission) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *OrderSubmission) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *OrderSubmission) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderSubmission) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *OrderSubmission) GetSide() proto1.Side {
	if m != nil {
		return m.Side
	}
	return proto1.Side_SIDE_UNSPECIFIED
}

func (m *OrderSubmission) GetTimeInForce() proto1.Order_TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return proto1.Order_TIME_IN_FORCE_UNSPECIFIED
}

func (m *OrderSubmission) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *OrderSubmission) GetType() proto1.Order_Type {
	if m != nil {
		return m.Type
	}
	return proto1.Order_TYPE_UNSPECIFIED
}

func (m *OrderSubmission) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *OrderSubmission) GetPeggedOrder() *proto1.PeggedOrder {
	if m != nil {
		return m.PeggedOrder
	}
	return nil
}

// An order cancellation is a request to cancel an existing order on Vega
type OrderCancellation struct {
	// Unique identifier for the order (set by the system after consensus), required field
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Market identifier for the order, required field
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier for the order, required field
	PartyId              string   `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderCancellation) Reset()         { *m = OrderCancellation{} }
func (m *OrderCancellation) String() string { return proto.CompactTextString(m) }
func (*OrderCancellation) ProtoMessage()    {}
func (*OrderCancellation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd984d1ab638cd87, []int{1}
}

func (m *OrderCancellation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderCancellation.Unmarshal(m, b)
}
func (m *OrderCancellation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderCancellation.Marshal(b, m, deterministic)
}
func (m *OrderCancellation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderCancellation.Merge(m, src)
}
func (m *OrderCancellation) XXX_Size() int {
	return xxx_messageInfo_OrderCancellation.Size(m)
}
func (m *OrderCancellation) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderCancellation.DiscardUnknown(m)
}

var xxx_messageInfo_OrderCancellation proto.InternalMessageInfo

func (m *OrderCancellation) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderCancellation) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *OrderCancellation) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

// An order amendment is a request to amend or update an existing order on Vega
type OrderAmendment struct {
	// Order identifier, this is required to find the order and will not be updated, required field
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Party identifier, this is required to find the order and will not be updated, required field
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier, this is required to find the order and will not be updated
	MarketId string `protobuf:"bytes,3,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Amend the price for the order, if the Price value is set, otherwise price will remain unchanged - See [`Price`](#vega.Price)
	Price *proto1.Price `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	// Amend the size for the order by the delta specified:
	// - To reduce the size from the current value set a negative integer value
	// - To increase the size from the current value, set a positive integer value
	// - To leave the size unchanged set a value of zero
	SizeDelta int64 `protobuf:"varint,5,opt,name=size_delta,json=sizeDelta,proto3" json:"size_delta,omitempty"`
	// Amend the expiry time for the order, if the Timestamp value is set, otherwise expiry time will remain unchanged
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	ExpiresAt *proto1.Timestamp `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Amend the time in force for the order, set to TIME_IN_FORCE_UNSPECIFIED to remain unchanged
	// - See [`TimeInForce`](#api.VegaTimeResponse).`timestamp`
	TimeInForce proto1.Order_TimeInForce `protobuf:"varint,7,opt,name=time_in_force,json=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"time_in_force,omitempty"`
	// Amend the pegged order offset for the order
	PeggedOffset *wrappers.Int64Value `protobuf:"bytes,8,opt,name=pegged_offset,json=peggedOffset,proto3" json:"pegged_offset,omitempty"`
	// Amend the pegged order reference for the order
	// - See [`PeggedReference`](#vega.PeggedReference)
	PeggedReference      proto1.PeggedReference `protobuf:"varint,9,opt,name=pegged_reference,json=peggedReference,proto3,enum=vega.PeggedReference" json:"pegged_reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *OrderAmendment) Reset()         { *m = OrderAmendment{} }
func (m *OrderAmendment) String() string { return proto.CompactTextString(m) }
func (*OrderAmendment) ProtoMessage()    {}
func (*OrderAmendment) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd984d1ab638cd87, []int{2}
}

func (m *OrderAmendment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderAmendment.Unmarshal(m, b)
}
func (m *OrderAmendment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderAmendment.Marshal(b, m, deterministic)
}
func (m *OrderAmendment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderAmendment.Merge(m, src)
}
func (m *OrderAmendment) XXX_Size() int {
	return xxx_messageInfo_OrderAmendment.Size(m)
}
func (m *OrderAmendment) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderAmendment.DiscardUnknown(m)
}

var xxx_messageInfo_OrderAmendment proto.InternalMessageInfo

func (m *OrderAmendment) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderAmendment) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *OrderAmendment) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *OrderAmendment) GetPrice() *proto1.Price {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *OrderAmendment) GetSizeDelta() int64 {
	if m != nil {
		return m.SizeDelta
	}
	return 0
}

func (m *OrderAmendment) GetExpiresAt() *proto1.Timestamp {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *OrderAmendment) GetTimeInForce() proto1.Order_TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return proto1.Order_TIME_IN_FORCE_UNSPECIFIED
}

func (m *OrderAmendment) GetPeggedOffset() *wrappers.Int64Value {
	if m != nil {
		return m.PeggedOffset
	}
	return nil
}

func (m *OrderAmendment) GetPeggedReference() proto1.PeggedReference {
	if m != nil {
		return m.PeggedReference
	}
	return proto1.PeggedReference_PEGGED_REFERENCE_UNSPECIFIED
}

// A liquidity provision submitted for a given market
type LiquidityProvisionSubmission struct {
	// Market identifier for the order, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Specified as a unitless number that represents the amount of settlement asset of the market
	CommitmentAmount uint64 `protobuf:"varint,2,opt,name=commitment_amount,json=commitmentAmount,proto3" json:"commitment_amount,omitempty"`
	// Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers
	Fee string `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// A set of liquidity sell orders to meet the liquidity provision obligation
	Sells []*proto1.LiquidityOrder `protobuf:"bytes,4,rep,name=sells,proto3" json:"sells,omitempty"`
	// A set of liquidity buy orders to meet the liquidity provision obligation
	Buys []*proto1.LiquidityOrder `protobuf:"bytes,5,rep,name=buys,proto3" json:"buys,omitempty"`
	// A reference to be added to every order created out of this liquidityProvisionSubmission
	Reference            string   `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiquidityProvisionSubmission) Reset()         { *m = LiquidityProvisionSubmission{} }
func (m *LiquidityProvisionSubmission) String() string { return proto.CompactTextString(m) }
func (*LiquidityProvisionSubmission) ProtoMessage()    {}
func (*LiquidityProvisionSubmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd984d1ab638cd87, []int{3}
}

func (m *LiquidityProvisionSubmission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiquidityProvisionSubmission.Unmarshal(m, b)
}
func (m *LiquidityProvisionSubmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiquidityProvisionSubmission.Marshal(b, m, deterministic)
}
func (m *LiquidityProvisionSubmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProvisionSubmission.Merge(m, src)
}
func (m *LiquidityProvisionSubmission) XXX_Size() int {
	return xxx_messageInfo_LiquidityProvisionSubmission.Size(m)
}
func (m *LiquidityProvisionSubmission) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProvisionSubmission.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProvisionSubmission proto.InternalMessageInfo

func (m *LiquidityProvisionSubmission) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *LiquidityProvisionSubmission) GetCommitmentAmount() uint64 {
	if m != nil {
		return m.CommitmentAmount
	}
	return 0
}

func (m *LiquidityProvisionSubmission) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *LiquidityProvisionSubmission) GetSells() []*proto1.LiquidityOrder {
	if m != nil {
		return m.Sells
	}
	return nil
}

func (m *LiquidityProvisionSubmission) GetBuys() []*proto1.LiquidityOrder {
	if m != nil {
		return m.Buys
	}
	return nil
}

func (m *LiquidityProvisionSubmission) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

// A command to submit a new proposal for the
// vega network governance
type ProposalSubmission struct {
	// Proposal reference
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	// Proposal configuration and the actual change that is meant to be executed when proposal is enacted
	Terms                *proto1.ProposalTerms `protobuf:"bytes,2,opt,name=terms,proto3" json:"terms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ProposalSubmission) Reset()         { *m = ProposalSubmission{} }
func (m *ProposalSubmission) String() string { return proto.CompactTextString(m) }
func (*ProposalSubmission) ProtoMessage()    {}
func (*ProposalSubmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd984d1ab638cd87, []int{4}
}

func (m *ProposalSubmission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposalSubmission.Unmarshal(m, b)
}
func (m *ProposalSubmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposalSubmission.Marshal(b, m, deterministic)
}
func (m *ProposalSubmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalSubmission.Merge(m, src)
}
func (m *ProposalSubmission) XXX_Size() int {
	return xxx_messageInfo_ProposalSubmission.Size(m)
}
func (m *ProposalSubmission) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalSubmission.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalSubmission proto.InternalMessageInfo

func (m *ProposalSubmission) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *ProposalSubmission) GetTerms() *proto1.ProposalTerms {
	if m != nil {
		return m.Terms
	}
	return nil
}

// A command to submit a new vote for a governance
// proposal.
type VoteSubmission struct {
	// The ID of the proposal to vote for.
	ProposalId string `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	// The actual value of the vote
	Value                proto1.Vote_Value `protobuf:"varint,2,opt,name=value,proto3,enum=vega.Vote_Value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *VoteSubmission) Reset()         { *m = VoteSubmission{} }
func (m *VoteSubmission) String() string { return proto.CompactTextString(m) }
func (*VoteSubmission) ProtoMessage()    {}
func (*VoteSubmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd984d1ab638cd87, []int{5}
}

func (m *VoteSubmission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteSubmission.Unmarshal(m, b)
}
func (m *VoteSubmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteSubmission.Marshal(b, m, deterministic)
}
func (m *VoteSubmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteSubmission.Merge(m, src)
}
func (m *VoteSubmission) XXX_Size() int {
	return xxx_messageInfo_VoteSubmission.Size(m)
}
func (m *VoteSubmission) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteSubmission.DiscardUnknown(m)
}

var xxx_messageInfo_VoteSubmission proto.InternalMessageInfo

func (m *VoteSubmission) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

func (m *VoteSubmission) GetValue() proto1.Vote_Value {
	if m != nil {
		return m.Value
	}
	return proto1.Vote_VALUE_UNSPECIFIED
}

func init() {
	proto.RegisterType((*OrderSubmission)(nil), "vega.commands.v1.OrderSubmission")
	proto.RegisterType((*OrderCancellation)(nil), "vega.commands.v1.OrderCancellation")
	proto.RegisterType((*OrderAmendment)(nil), "vega.commands.v1.OrderAmendment")
	proto.RegisterType((*LiquidityProvisionSubmission)(nil), "vega.commands.v1.LiquidityProvisionSubmission")
	proto.RegisterType((*ProposalSubmission)(nil), "vega.commands.v1.ProposalSubmission")
	proto.RegisterType((*VoteSubmission)(nil), "vega.commands.v1.VoteSubmission")
}

func init() { proto.RegisterFile("commands/v1/commands.proto", fileDescriptor_bd984d1ab638cd87) }

var fileDescriptor_bd984d1ab638cd87 = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0xf3, 0xb7, 0x9b, 0xe3, 0xee, 0x6e, 0x76, 0x28, 0x60, 0xb6, 0xdb, 0x12, 0x02, 0x82,
	0x88, 0x6a, 0x6d, 0x6d, 0xa8, 0x7a, 0xc3, 0x4d, 0xb7, 0x20, 0xa4, 0x48, 0x48, 0x5d, 0x4d, 0xab,
	0x0a, 0x71, 0x63, 0x4d, 0x3c, 0x27, 0x61, 0x54, 0xdb, 0x63, 0xc6, 0x93, 0x2c, 0xe1, 0x4d, 0x78,
	0x01, 0x5e, 0x0b, 0x89, 0x87, 0xe0, 0x1a, 0xcd, 0x8c, 0x9d, 0xd8, 0x5d, 0x16, 0x09, 0x71, 0x37,
	0xf3, 0x7d, 0xe7, 0x67, 0x66, 0xbe, 0xef, 0xd8, 0x70, 0x96, 0xc8, 0x2c, 0x63, 0x39, 0x2f, 0xa3,
	0xcd, 0x65, 0x54, 0xaf, 0xc3, 0x42, 0x49, 0x2d, 0xc9, 0x68, 0x83, 0x2b, 0x16, 0xee, 0xc0, 0xcd,
	0xe5, 0xd9, 0x51, 0xc6, 0xd4, 0x5b, 0xd4, 0x55, 0xc0, 0xd9, 0x7d, 0x56, 0x96, 0xfb, 0xdd, 0x68,
	0x25, 0x37, 0xa8, 0x72, 0x96, 0x27, 0x58, 0x21, 0x60, 0x0b, 0xb8, 0xf5, 0xb9, 0x54, 0x2c, 0x49,
	0xd1, 0xf6, 0x71, 0xcb, 0xb8, 0x2c, 0x30, 0xb9, 0x9b, 0xe5, 0x4c, 0xd7, 0xb9, 0x8f, 0x57, 0x52,
	0xae, 0x52, 0x8c, 0xec, 0x6e, 0xb1, 0x5e, 0x46, 0x37, 0x8a, 0x15, 0x05, 0xaa, 0xba, 0xf3, 0xb3,
	0x95, 0xd0, 0x3f, 0xad, 0x17, 0xe6, 0xa8, 0x51, 0x76, 0x23, 0xf4, 0x5b, 0x79, 0x13, 0xad, 0xe4,
	0x85, 0x25, 0x2f, 0x36, 0x2c, 0x15, 0x9c, 0x69, 0xa9, 0xca, 0x68, 0xb7, 0x74, 0x79, 0x93, 0xdf,
	0xba, 0x70, 0xf2, 0x52, 0x71, 0x54, 0xaf, 0xd6, 0x8b, 0x4c, 0x94, 0xa5, 0x90, 0x39, 0xf9, 0x00,
	0x3a, 0x82, 0x07, 0xde, 0xd8, 0x9b, 0x0e, 0x5f, 0x0c, 0xfe, 0xfc, 0xe3, 0xe3, 0xce, 0x0f, 0xf7,
	0x68, 0x47, 0x70, 0xf2, 0x29, 0x0c, 0xdd, 0xe5, 0x63, 0xc1, 0x83, 0x4e, 0x83, 0xf6, 0xe8, 0xa1,
	0x23, 0xe6, 0x9c, 0x7c, 0x02, 0x87, 0x05, 0x53, 0x7a, 0x6b, 0x62, 0xba, 0xad, 0x98, 0x03, 0x8b,
	0xcf, 0x39, 0x79, 0x00, 0xfd, 0x42, 0x89, 0x04, 0x83, 0xde, 0xd8, 0x9b, 0xf6, 0xa8, 0xdb, 0x90,
	0x33, 0xe8, 0x95, 0xe2, 0x57, 0x0c, 0xfa, 0x06, 0x74, 0x49, 0xa3, 0x7b, 0xd4, 0x62, 0xe4, 0xb1,
	0xe1, 0x38, 0x06, 0x83, 0xb1, 0x37, 0x3d, 0x9e, 0x41, 0x68, 0x1f, 0xf5, 0x95, 0xe0, 0x48, 0x2d,
	0x4e, 0xbe, 0x86, 0x23, 0x2d, 0x32, 0x8c, 0x45, 0x1e, 0x2f, 0xa5, 0x4a, 0x30, 0x38, 0xb0, 0x81,
	0x1f, 0xba, 0x40, 0x7b, 0xbf, 0xf0, 0xb5, 0xc8, 0x70, 0x9e, 0x7f, 0x67, 0x68, 0xea, 0xeb, 0xfd,
	0x86, 0x3c, 0x02, 0xc0, 0x5f, 0x0a, 0xa1, 0xb0, 0x8c, 0x99, 0x0e, 0x0e, 0xc7, 0xde, 0xb4, 0x4b,
	0x87, 0x15, 0x72, 0xa5, 0xc9, 0x67, 0xd0, 0xd3, 0xdb, 0x02, 0x83, 0xa1, 0x2d, 0x39, 0x6a, 0x95,
	0xdc, 0x16, 0x48, 0x2d, 0x4b, 0xce, 0x61, 0xa8, 0x70, 0x89, 0x0a, 0xf3, 0x04, 0x03, 0x30, 0xf7,
	0xa6, 0x7b, 0x80, 0x3c, 0x85, 0xfb, 0x05, 0xae, 0x56, 0xc8, 0x63, 0x69, 0x12, 0x03, 0x7f, 0xec,
	0x4d, 0xfd, 0xd9, 0xa9, 0xab, 0x75, 0x6d, 0x19, 0x5b, 0x91, 0xfa, 0xc5, 0x7e, 0x33, 0xc9, 0xe1,
	0xd4, 0x2e, 0xbe, 0x31, 0x7e, 0x4a, 0x53, 0xa6, 0x8d, 0x38, 0x1f, 0xc1, 0xa1, 0xad, 0x11, 0xd7,
	0x12, 0xd1, 0x03, 0xbb, 0x9f, 0x73, 0xf2, 0xf0, 0x96, 0x3e, 0xff, 0x49, 0x97, 0xc9, 0xef, 0x5d,
	0x38, 0xb6, 0x0d, 0xaf, 0x32, 0xcc, 0x79, 0x86, 0xb9, 0x36, 0x59, 0xed, 0x6e, 0xfb, 0xac, 0xba,
	0x6b, 0xb3, 0x70, 0xe7, 0x9f, 0x05, 0x6f, 0x1d, 0xac, 0x7b, 0xeb, 0x60, 0x0d, 0x37, 0xf8, 0x33,
	0xbf, 0x7a, 0x14, 0x03, 0xd5, 0xd6, 0x78, 0x04, 0x60, 0x6c, 0x10, 0x73, 0x4c, 0x35, 0xb3, 0x06,
	0xe9, 0xd2, 0xa1, 0x41, 0xbe, 0x35, 0x00, 0x09, 0x5b, 0x02, 0x0e, 0x6c, 0x99, 0x13, 0x57, 0xc6,
	0x88, 0x5e, 0x6a, 0x96, 0x15, 0x4d, 0x45, 0xff, 0x97, 0x5b, 0x9e, 0xc3, 0x51, 0x2d, 0xe5, 0x72,
	0x59, 0xa2, 0x33, 0x8c, 0x3f, 0x7b, 0x18, 0xba, 0x01, 0x0d, 0xeb, 0x01, 0x0d, 0xe7, 0xb9, 0x7e,
	0xf6, 0xf4, 0x0d, 0x4b, 0xd7, 0x48, 0x2b, 0xf1, 0x5f, 0xda, 0x04, 0xf2, 0x1c, 0x46, 0x55, 0x85,
	0xbd, 0x63, 0x9c, 0xb9, 0xde, 0x6f, 0x1a, 0x82, 0xd6, 0x24, 0x3d, 0x29, 0xda, 0xc0, 0xe4, 0x2f,
	0x0f, 0xce, 0xbf, 0x17, 0x3f, 0xaf, 0x05, 0x17, 0x7a, 0x7b, 0xad, 0xe4, 0x46, 0x98, 0xb9, 0x6d,
	0x4c, 0x70, 0x6b, 0x52, 0xbd, 0x3b, 0x26, 0xf5, 0x09, 0x9c, 0x9a, 0x0f, 0x9b, 0xd0, 0x46, 0xe9,
	0x98, 0x65, 0x72, 0x9d, 0x6b, 0xab, 0x60, 0x8f, 0x8e, 0xf6, 0xc4, 0x95, 0xc5, 0xc9, 0x08, 0xba,
	0x4b, 0xc4, 0x4a, 0x3c, 0xb3, 0x24, 0x5f, 0x42, 0xbf, 0xc4, 0x34, 0x2d, 0x83, 0xde, 0xb8, 0x3b,
	0xf5, 0x67, 0x0f, 0xdc, 0xd9, 0x77, 0xc7, 0x72, 0x7e, 0x76, 0x21, 0x64, 0x0a, 0xbd, 0xc5, 0x7a,
	0x5b, 0x06, 0xfd, 0x7f, 0x09, 0xb5, 0x11, 0xed, 0x39, 0x1a, 0xbc, 0x33, 0x47, 0x13, 0x04, 0x72,
	0xad, 0x64, 0x21, 0x4b, 0x96, 0x36, 0x6e, 0xdb, 0xca, 0xf1, 0xde, 0x9d, 0xbd, 0x4b, 0xe8, 0x6b,
	0x54, 0x59, 0x69, 0xaf, 0xe6, 0xcf, 0xde, 0xab, 0xfd, 0xe5, 0xca, 0xbc, 0x36, 0x94, 0x7b, 0x9c,
	0xb1, 0x47, 0x5d, 0xe4, 0x84, 0xc1, 0xf1, 0x1b, 0xa9, 0xb1, 0xd1, 0xe2, 0x0b, 0xf0, 0x8b, 0x2a,
	0xe3, 0xf6, 0x93, 0x42, 0x4d, 0xcd, 0x39, 0xf9, 0x1c, 0xfa, 0x1b, 0xa3, 0xb9, 0xed, 0xb6, 0xfb,
	0x5c, 0x98, 0x6a, 0xa1, 0xf3, 0x82, 0xa3, 0x5f, 0x5c, 0xfc, 0xf8, 0x24, 0x91, 0x1c, 0x2d, 0x6d,
	0x2d, 0x93, 0xc8, 0x34, 0x14, 0x32, 0x32, 0x7b, 0xf7, 0x91, 0x8f, 0x1a, 0xbf, 0xa5, 0xc5, 0xc0,
	0x42, 0x5f, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x70, 0x65, 0x6a, 0xd1, 0xac, 0x06, 0x00, 0x00,
}
