// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/events.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// What triggered an auction (if any)
type AuctionTrigger int32

const (
	// No auction triggered
	AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED AuctionTrigger = 0
	// Batch auction
	AuctionTrigger_AUCTION_TRIGGER_BATCH AuctionTrigger = 1
	// Opening auction
	AuctionTrigger_AUCTION_TRIGGER_OPENING AuctionTrigger = 2
	// Price monitoring trigger
	AuctionTrigger_AUCTION_TRIGGER_PRICE AuctionTrigger = 3
	// liquidity monitoring trigger
	AuctionTrigger_AUCTION_TRIGGER_LIQUIDITY AuctionTrigger = 4
)

var AuctionTrigger_name = map[int32]string{
	0: "AUCTION_TRIGGER_UNSPECIFIED",
	1: "AUCTION_TRIGGER_BATCH",
	2: "AUCTION_TRIGGER_OPENING",
	3: "AUCTION_TRIGGER_PRICE",
	4: "AUCTION_TRIGGER_LIQUIDITY",
}

var AuctionTrigger_value = map[string]int32{
	"AUCTION_TRIGGER_UNSPECIFIED": 0,
	"AUCTION_TRIGGER_BATCH":       1,
	"AUCTION_TRIGGER_OPENING":     2,
	"AUCTION_TRIGGER_PRICE":       3,
	"AUCTION_TRIGGER_LIQUIDITY":   4,
}

func (x AuctionTrigger) String() string {
	return proto.EnumName(AuctionTrigger_name, int32(x))
}

func (AuctionTrigger) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_499cf8c2dd86f7dd, []int{0}
}

// event types, 2 groups: actual single values, and then some events that capture a group of events
type BusEventType int32

const (
	BusEventType_BUS_EVENT_TYPE_UNSPECIFIED         BusEventType = 0
	BusEventType_BUS_EVENT_TYPE_ALL                 BusEventType = 1
	BusEventType_BUS_EVENT_TYPE_TIME_UPDATE         BusEventType = 2
	BusEventType_BUS_EVENT_TYPE_TRANSFER_RESPONSES  BusEventType = 3
	BusEventType_BUS_EVENT_TYPE_POSITION_RESOLUTION BusEventType = 4
	BusEventType_BUS_EVENT_TYPE_ORDER               BusEventType = 5
	BusEventType_BUS_EVENT_TYPE_ACCOUNT             BusEventType = 6
	BusEventType_BUS_EVENT_TYPE_PARTY               BusEventType = 7
	BusEventType_BUS_EVENT_TYPE_TRADE               BusEventType = 8
	BusEventType_BUS_EVENT_TYPE_MARGIN_LEVELS       BusEventType = 9
	BusEventType_BUS_EVENT_TYPE_PROPOSAL            BusEventType = 10
	BusEventType_BUS_EVENT_TYPE_VOTE                BusEventType = 11
	BusEventType_BUS_EVENT_TYPE_MARKET_DATA         BusEventType = 12
	BusEventType_BUS_EVENT_TYPE_NODE_SIGNATURE      BusEventType = 13
	BusEventType_BUS_EVENT_TYPE_LOSS_SOCIALIZATION  BusEventType = 14
	BusEventType_BUS_EVENT_TYPE_SETTLE_POSITION     BusEventType = 15
	BusEventType_BUS_EVENT_TYPE_SETTLE_DISTRESSED   BusEventType = 16
	BusEventType_BUS_EVENT_TYPE_MARKET_CREATED      BusEventType = 17
	BusEventType_BUS_EVENT_TYPE_ASSET               BusEventType = 18
	BusEventType_BUS_EVENT_TYPE_MARKET_TICK         BusEventType = 19
	BusEventType_BUS_EVENT_TYPE_WITHDRAWAL          BusEventType = 20
	BusEventType_BUS_EVENT_TYPE_DEPOSIT             BusEventType = 21
	BusEventType_BUS_EVENT_TYPE_AUCTION             BusEventType = 22
	BusEventType_BUS_EVENT_TYPE_RISK_FACTOR         BusEventType = 23
	BusEventType_BUS_EVENT_TYPE_MARKET              BusEventType = 101
)

var BusEventType_name = map[int32]string{
	0:   "BUS_EVENT_TYPE_UNSPECIFIED",
	1:   "BUS_EVENT_TYPE_ALL",
	2:   "BUS_EVENT_TYPE_TIME_UPDATE",
	3:   "BUS_EVENT_TYPE_TRANSFER_RESPONSES",
	4:   "BUS_EVENT_TYPE_POSITION_RESOLUTION",
	5:   "BUS_EVENT_TYPE_ORDER",
	6:   "BUS_EVENT_TYPE_ACCOUNT",
	7:   "BUS_EVENT_TYPE_PARTY",
	8:   "BUS_EVENT_TYPE_TRADE",
	9:   "BUS_EVENT_TYPE_MARGIN_LEVELS",
	10:  "BUS_EVENT_TYPE_PROPOSAL",
	11:  "BUS_EVENT_TYPE_VOTE",
	12:  "BUS_EVENT_TYPE_MARKET_DATA",
	13:  "BUS_EVENT_TYPE_NODE_SIGNATURE",
	14:  "BUS_EVENT_TYPE_LOSS_SOCIALIZATION",
	15:  "BUS_EVENT_TYPE_SETTLE_POSITION",
	16:  "BUS_EVENT_TYPE_SETTLE_DISTRESSED",
	17:  "BUS_EVENT_TYPE_MARKET_CREATED",
	18:  "BUS_EVENT_TYPE_ASSET",
	19:  "BUS_EVENT_TYPE_MARKET_TICK",
	20:  "BUS_EVENT_TYPE_WITHDRAWAL",
	21:  "BUS_EVENT_TYPE_DEPOSIT",
	22:  "BUS_EVENT_TYPE_AUCTION",
	23:  "BUS_EVENT_TYPE_RISK_FACTOR",
	101: "BUS_EVENT_TYPE_MARKET",
}

var BusEventType_value = map[string]int32{
	"BUS_EVENT_TYPE_UNSPECIFIED":         0,
	"BUS_EVENT_TYPE_ALL":                 1,
	"BUS_EVENT_TYPE_TIME_UPDATE":         2,
	"BUS_EVENT_TYPE_TRANSFER_RESPONSES":  3,
	"BUS_EVENT_TYPE_POSITION_RESOLUTION": 4,
	"BUS_EVENT_TYPE_ORDER":               5,
	"BUS_EVENT_TYPE_ACCOUNT":             6,
	"BUS_EVENT_TYPE_PARTY":               7,
	"BUS_EVENT_TYPE_TRADE":               8,
	"BUS_EVENT_TYPE_MARGIN_LEVELS":       9,
	"BUS_EVENT_TYPE_PROPOSAL":            10,
	"BUS_EVENT_TYPE_VOTE":                11,
	"BUS_EVENT_TYPE_MARKET_DATA":         12,
	"BUS_EVENT_TYPE_NODE_SIGNATURE":      13,
	"BUS_EVENT_TYPE_LOSS_SOCIALIZATION":  14,
	"BUS_EVENT_TYPE_SETTLE_POSITION":     15,
	"BUS_EVENT_TYPE_SETTLE_DISTRESSED":   16,
	"BUS_EVENT_TYPE_MARKET_CREATED":      17,
	"BUS_EVENT_TYPE_ASSET":               18,
	"BUS_EVENT_TYPE_MARKET_TICK":         19,
	"BUS_EVENT_TYPE_WITHDRAWAL":          20,
	"BUS_EVENT_TYPE_DEPOSIT":             21,
	"BUS_EVENT_TYPE_AUCTION":             22,
	"BUS_EVENT_TYPE_RISK_FACTOR":         23,
	"BUS_EVENT_TYPE_MARKET":              101,
}

func (x BusEventType) String() string {
	return proto.EnumName(BusEventType_name, int32(x))
}

func (BusEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_499cf8c2dd86f7dd, []int{1}
}

// MarketEvent - the common denominator for all market events
// interface has a method to return a string for logging
type MarketEvent struct {
	MarketID             string   `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	Payload              string   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketEvent) Reset()         { *m = MarketEvent{} }
func (m *MarketEvent) String() string { return proto.CompactTextString(m) }
func (*MarketEvent) ProtoMessage()    {}
func (*MarketEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_499cf8c2dd86f7dd, []int{0}
}

func (m *MarketEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketEvent.Unmarshal(m, b)
}
func (m *MarketEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketEvent.Marshal(b, m, deterministic)
}
func (m *MarketEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketEvent.Merge(m, src)
}
func (m *MarketEvent) XXX_Size() int {
	return xxx_messageInfo_MarketEvent.Size(m)
}
func (m *MarketEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MarketEvent proto.InternalMessageInfo

func (m *MarketEvent) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *MarketEvent) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

// TimeUpdate - event containing the latest block time
type TimeUpdate struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeUpdate) Reset()         { *m = TimeUpdate{} }
func (m *TimeUpdate) String() string { return proto.CompactTextString(m) }
func (*TimeUpdate) ProtoMessage()    {}
func (*TimeUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_499cf8c2dd86f7dd, []int{1}
}

func (m *TimeUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeUpdate.Unmarshal(m, b)
}
func (m *TimeUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeUpdate.Marshal(b, m, deterministic)
}
func (m *TimeUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeUpdate.Merge(m, src)
}
func (m *TimeUpdate) XXX_Size() int {
	return xxx_messageInfo_TimeUpdate.Size(m)
}
func (m *TimeUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TimeUpdate proto.InternalMessageInfo

func (m *TimeUpdate) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// TransferResponses - a slice of transfer response objects
type TransferResponses struct {
	Responses            []*TransferResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TransferResponses) Reset()         { *m = TransferResponses{} }
func (m *TransferResponses) String() string { return proto.CompactTextString(m) }
func (*TransferResponses) ProtoMessage()    {}
func (*TransferResponses) Descriptor() ([]byte, []int) {
	return fileDescriptor_499cf8c2dd86f7dd, []int{2}
}

func (m *TransferResponses) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferResponses.Unmarshal(m, b)
}
func (m *TransferResponses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferResponses.Marshal(b, m, deterministic)
}
func (m *TransferResponses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferResponses.Merge(m, src)
}
func (m *TransferResponses) XXX_Size() int {
	return xxx_messageInfo_TransferResponses.Size(m)
}
func (m *TransferResponses) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferResponses.DiscardUnknown(m)
}

var xxx_messageInfo_TransferResponses proto.InternalMessageInfo

func (m *TransferResponses) GetResponses() []*TransferResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

// PositionResolution event, a market event indicating number of distressed traders, closed out, at what mark price on which market
type PositionResolution struct {
	MarketID             string   `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	Distressed           int64    `protobuf:"varint,2,opt,name=distressed,proto3" json:"distressed,omitempty"`
	Closed               int64    `protobuf:"varint,3,opt,name=closed,proto3" json:"closed,omitempty"`
	MarkPrice            uint64   `protobuf:"varint,4,opt,name=markPrice,proto3" json:"markPrice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PositionResolution) Reset()         { *m = PositionResolution{} }
func (m *PositionResolution) String() string { return proto.CompactTextString(m) }
func (*PositionResolution) ProtoMessage()    {}
func (*PositionResolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_499cf8c2dd86f7dd, []int{3}
}

func (m *PositionResolution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionResolution.Unmarshal(m, b)
}
func (m *PositionResolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionResolution.Marshal(b, m, deterministic)
}
func (m *PositionResolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionResolution.Merge(m, src)
}
func (m *PositionResolution) XXX_Size() int {
	return xxx_messageInfo_PositionResolution.Size(m)
}
func (m *PositionResolution) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionResolution.DiscardUnknown(m)
}

var xxx_messageInfo_PositionResolution proto.InternalMessageInfo

func (m *PositionResolution) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *PositionResolution) GetDistressed() int64 {
	if m != nil {
		return m.Distressed
	}
	return 0
}

func (m *PositionResolution) GetClosed() int64 {
	if m != nil {
		return m.Closed
	}
	return 0
}

func (m *PositionResolution) GetMarkPrice() uint64 {
	if m != nil {
		return m.MarkPrice
	}
	return 0
}

// LossSocialization event amount of wins unable to be distributed
type LossSocialization struct {
	MarketID             string   `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	PartyID              string   `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	Amount               int64    `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LossSocialization) Reset()         { *m = LossSocialization{} }
func (m *LossSocialization) String() string { return proto.CompactTextString(m) }
func (*LossSocialization) ProtoMessage()    {}
func (*LossSocialization) Descriptor() ([]byte, []int) {
	return fileDescriptor_499cf8c2dd86f7dd, []int{4}
}

func (m *LossSocialization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LossSocialization.Unmarshal(m, b)
}
func (m *LossSocialization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LossSocialization.Marshal(b, m, deterministic)
}
func (m *LossSocialization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LossSocialization.Merge(m, src)
}
func (m *LossSocialization) XXX_Size() int {
	return xxx_messageInfo_LossSocialization.Size(m)
}
func (m *LossSocialization) XXX_DiscardUnknown() {
	xxx_messageInfo_LossSocialization.DiscardUnknown(m)
}

var xxx_messageInfo_LossSocialization proto.InternalMessageInfo

func (m *LossSocialization) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *LossSocialization) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *LossSocialization) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// TradeSettlement data, part of settle position event
type TradeSettlement struct {
	Size                 int64    `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Price                uint64   `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeSettlement) Reset()         { *m = TradeSettlement{} }
func (m *TradeSettlement) String() string { return proto.CompactTextString(m) }
func (*TradeSettlement) ProtoMessage()    {}
func (*TradeSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_499cf8c2dd86f7dd, []int{5}
}

func (m *TradeSettlement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeSettlement.Unmarshal(m, b)
}
func (m *TradeSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeSettlement.Marshal(b, m, deterministic)
}
func (m *TradeSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeSettlement.Merge(m, src)
}
func (m *TradeSettlement) XXX_Size() int {
	return xxx_messageInfo_TradeSettlement.Size(m)
}
func (m *TradeSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_TradeSettlement proto.InternalMessageInfo

func (m *TradeSettlement) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *TradeSettlement) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

// SettlePosition data for party: position settlements (part of trader position information)
type SettlePosition struct {
	MarketID             string             `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	PartyID              string             `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	Price                uint64             `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	TradeSettlements     []*TradeSettlement `protobuf:"bytes,4,rep,name=tradeSettlements,proto3" json:"tradeSettlements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SettlePosition) Reset()         { *m = SettlePosition{} }
func (m *SettlePosition) String() string { return proto.CompactTextString(m) }
func (*SettlePosition) ProtoMessage()    {}
func (*SettlePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_499cf8c2dd86f7dd, []int{6}
}

func (m *SettlePosition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlePosition.Unmarshal(m, b)
}
func (m *SettlePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlePosition.Marshal(b, m, deterministic)
}
func (m *SettlePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlePosition.Merge(m, src)
}
func (m *SettlePosition) XXX_Size() int {
	return xxx_messageInfo_SettlePosition.Size(m)
}
func (m *SettlePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlePosition.DiscardUnknown(m)
}

var xxx_messageInfo_SettlePosition proto.InternalMessageInfo

func (m *SettlePosition) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *SettlePosition) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *SettlePosition) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SettlePosition) GetTradeSettlements() []*TradeSettlement {
	if m != nil {
		return m.TradeSettlements
	}
	return nil
}

// SettleDistressed event per distressed trader who was closed out, any PositionResolution event (market level) will most likely
// be followed by a number of these events
type SettleDistressed struct {
	MarketID             string   `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	PartyID              string   `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	Margin               uint64   `protobuf:"varint,3,opt,name=margin,proto3" json:"margin,omitempty"`
	Price                uint64   `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettleDistressed) Reset()         { *m = SettleDistressed{} }
func (m *SettleDistressed) String() string { return proto.CompactTextString(m) }
func (*SettleDistressed) ProtoMessage()    {}
func (*SettleDistressed) Descriptor() ([]byte, []int) {
	return fileDescriptor_499cf8c2dd86f7dd, []int{7}
}

func (m *SettleDistressed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettleDistressed.Unmarshal(m, b)
}
func (m *SettleDistressed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettleDistressed.Marshal(b, m, deterministic)
}
func (m *SettleDistressed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleDistressed.Merge(m, src)
}
func (m *SettleDistressed) XXX_Size() int {
	return xxx_messageInfo_SettleDistressed.Size(m)
}
func (m *SettleDistressed) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleDistressed.DiscardUnknown(m)
}

var xxx_messageInfo_SettleDistressed proto.InternalMessageInfo

func (m *SettleDistressed) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *SettleDistressed) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *SettleDistressed) GetMargin() uint64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *SettleDistressed) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

// Time update for each market, can be used to see when new markets actually started in terms of block-time
type MarketTick struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Time                 int64    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketTick) Reset()         { *m = MarketTick{} }
func (m *MarketTick) String() string { return proto.CompactTextString(m) }
func (*MarketTick) ProtoMessage()    {}
func (*MarketTick) Descriptor() ([]byte, []int) {
	return fileDescriptor_499cf8c2dd86f7dd, []int{8}
}

func (m *MarketTick) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketTick.Unmarshal(m, b)
}
func (m *MarketTick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketTick.Marshal(b, m, deterministic)
}
func (m *MarketTick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketTick.Merge(m, src)
}
func (m *MarketTick) XXX_Size() int {
	return xxx_messageInfo_MarketTick.Size(m)
}
func (m *MarketTick) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketTick.DiscardUnknown(m)
}

var xxx_messageInfo_MarketTick proto.InternalMessageInfo

func (m *MarketTick) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *MarketTick) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type AuctionEvent struct {
	MarketID             string         `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	OpeningAuction       bool           `protobuf:"varint,2,opt,name=openingAuction,proto3" json:"openingAuction,omitempty"`
	Leave                bool           `protobuf:"varint,3,opt,name=leave,proto3" json:"leave,omitempty"`
	Start                int64          `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	End                  int64          `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
	Trigger              AuctionTrigger `protobuf:"varint,6,opt,name=trigger,proto3,enum=vega.AuctionTrigger" json:"trigger,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AuctionEvent) Reset()         { *m = AuctionEvent{} }
func (m *AuctionEvent) String() string { return proto.CompactTextString(m) }
func (*AuctionEvent) ProtoMessage()    {}
func (*AuctionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_499cf8c2dd86f7dd, []int{9}
}

func (m *AuctionEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuctionEvent.Unmarshal(m, b)
}
func (m *AuctionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuctionEvent.Marshal(b, m, deterministic)
}
func (m *AuctionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionEvent.Merge(m, src)
}
func (m *AuctionEvent) XXX_Size() int {
	return xxx_messageInfo_AuctionEvent.Size(m)
}
func (m *AuctionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionEvent proto.InternalMessageInfo

func (m *AuctionEvent) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *AuctionEvent) GetOpeningAuction() bool {
	if m != nil {
		return m.OpeningAuction
	}
	return false
}

func (m *AuctionEvent) GetLeave() bool {
	if m != nil {
		return m.Leave
	}
	return false
}

func (m *AuctionEvent) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *AuctionEvent) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *AuctionEvent) GetTrigger() AuctionTrigger {
	if m != nil {
		return m.Trigger
	}
	return AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED
}

// BusEvent wraps around the event data emited by the core. All messages have the event ID, and the type flag.
// the actual data is set as a oneof field
type BusEvent struct {
	ID    string       `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Block string       `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	Type  BusEventType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.BusEventType" json:"type,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*BusEvent_TimeUpdate
	//	*BusEvent_TransferResponses
	//	*BusEvent_PositionResolution
	//	*BusEvent_Order
	//	*BusEvent_Account
	//	*BusEvent_Party
	//	*BusEvent_Trade
	//	*BusEvent_MarginLevels
	//	*BusEvent_Proposal
	//	*BusEvent_Vote
	//	*BusEvent_MarketData
	//	*BusEvent_NodeSignature
	//	*BusEvent_LossSocialization
	//	*BusEvent_SettlePosition
	//	*BusEvent_SettleDistressed
	//	*BusEvent_MarketCreated
	//	*BusEvent_Asset
	//	*BusEvent_MarketTick
	//	*BusEvent_Withdrawal
	//	*BusEvent_Deposit
	//	*BusEvent_Auction
	//	*BusEvent_RiskFactor
	//	*BusEvent_Market
	Event                isBusEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BusEvent) Reset()         { *m = BusEvent{} }
func (m *BusEvent) String() string { return proto.CompactTextString(m) }
func (*BusEvent) ProtoMessage()    {}
func (*BusEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_499cf8c2dd86f7dd, []int{10}
}

func (m *BusEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BusEvent.Unmarshal(m, b)
}
func (m *BusEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BusEvent.Marshal(b, m, deterministic)
}
func (m *BusEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusEvent.Merge(m, src)
}
func (m *BusEvent) XXX_Size() int {
	return xxx_messageInfo_BusEvent.Size(m)
}
func (m *BusEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BusEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BusEvent proto.InternalMessageInfo

func (m *BusEvent) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *BusEvent) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

func (m *BusEvent) GetType() BusEventType {
	if m != nil {
		return m.Type
	}
	return BusEventType_BUS_EVENT_TYPE_UNSPECIFIED
}

type isBusEvent_Event interface {
	isBusEvent_Event()
}

type BusEvent_TimeUpdate struct {
	TimeUpdate *TimeUpdate `protobuf:"bytes,101,opt,name=timeUpdate,proto3,oneof"`
}

type BusEvent_TransferResponses struct {
	TransferResponses *TransferResponses `protobuf:"bytes,102,opt,name=transferResponses,proto3,oneof"`
}

type BusEvent_PositionResolution struct {
	PositionResolution *PositionResolution `protobuf:"bytes,103,opt,name=positionResolution,proto3,oneof"`
}

type BusEvent_Order struct {
	Order *Order `protobuf:"bytes,104,opt,name=order,proto3,oneof"`
}

type BusEvent_Account struct {
	Account *Account `protobuf:"bytes,105,opt,name=account,proto3,oneof"`
}

type BusEvent_Party struct {
	Party *Party `protobuf:"bytes,106,opt,name=party,proto3,oneof"`
}

type BusEvent_Trade struct {
	Trade *Trade `protobuf:"bytes,107,opt,name=trade,proto3,oneof"`
}

type BusEvent_MarginLevels struct {
	MarginLevels *MarginLevels `protobuf:"bytes,108,opt,name=marginLevels,proto3,oneof"`
}

type BusEvent_Proposal struct {
	Proposal *Proposal `protobuf:"bytes,109,opt,name=proposal,proto3,oneof"`
}

type BusEvent_Vote struct {
	Vote *Vote `protobuf:"bytes,110,opt,name=vote,proto3,oneof"`
}

type BusEvent_MarketData struct {
	MarketData *MarketData `protobuf:"bytes,111,opt,name=marketData,proto3,oneof"`
}

type BusEvent_NodeSignature struct {
	NodeSignature *NodeSignature `protobuf:"bytes,112,opt,name=nodeSignature,proto3,oneof"`
}

type BusEvent_LossSocialization struct {
	LossSocialization *LossSocialization `protobuf:"bytes,113,opt,name=lossSocialization,proto3,oneof"`
}

type BusEvent_SettlePosition struct {
	SettlePosition *SettlePosition `protobuf:"bytes,114,opt,name=settlePosition,proto3,oneof"`
}

type BusEvent_SettleDistressed struct {
	SettleDistressed *SettleDistressed `protobuf:"bytes,115,opt,name=settleDistressed,proto3,oneof"`
}

type BusEvent_MarketCreated struct {
	MarketCreated *Market `protobuf:"bytes,116,opt,name=marketCreated,proto3,oneof"`
}

type BusEvent_Asset struct {
	Asset *Asset `protobuf:"bytes,117,opt,name=asset,proto3,oneof"`
}

type BusEvent_MarketTick struct {
	MarketTick *MarketTick `protobuf:"bytes,118,opt,name=marketTick,proto3,oneof"`
}

type BusEvent_Withdrawal struct {
	Withdrawal *Withdrawal `protobuf:"bytes,119,opt,name=withdrawal,proto3,oneof"`
}

type BusEvent_Deposit struct {
	Deposit *Deposit `protobuf:"bytes,120,opt,name=deposit,proto3,oneof"`
}

type BusEvent_Auction struct {
	Auction *AuctionEvent `protobuf:"bytes,121,opt,name=auction,proto3,oneof"`
}

type BusEvent_RiskFactor struct {
	RiskFactor *RiskFactor `protobuf:"bytes,122,opt,name=riskFactor,proto3,oneof"`
}

type BusEvent_Market struct {
	Market *MarketEvent `protobuf:"bytes,1001,opt,name=market,proto3,oneof"`
}

func (*BusEvent_TimeUpdate) isBusEvent_Event() {}

func (*BusEvent_TransferResponses) isBusEvent_Event() {}

func (*BusEvent_PositionResolution) isBusEvent_Event() {}

func (*BusEvent_Order) isBusEvent_Event() {}

func (*BusEvent_Account) isBusEvent_Event() {}

func (*BusEvent_Party) isBusEvent_Event() {}

func (*BusEvent_Trade) isBusEvent_Event() {}

func (*BusEvent_MarginLevels) isBusEvent_Event() {}

func (*BusEvent_Proposal) isBusEvent_Event() {}

func (*BusEvent_Vote) isBusEvent_Event() {}

func (*BusEvent_MarketData) isBusEvent_Event() {}

func (*BusEvent_NodeSignature) isBusEvent_Event() {}

func (*BusEvent_LossSocialization) isBusEvent_Event() {}

func (*BusEvent_SettlePosition) isBusEvent_Event() {}

func (*BusEvent_SettleDistressed) isBusEvent_Event() {}

func (*BusEvent_MarketCreated) isBusEvent_Event() {}

func (*BusEvent_Asset) isBusEvent_Event() {}

func (*BusEvent_MarketTick) isBusEvent_Event() {}

func (*BusEvent_Withdrawal) isBusEvent_Event() {}

func (*BusEvent_Deposit) isBusEvent_Event() {}

func (*BusEvent_Auction) isBusEvent_Event() {}

func (*BusEvent_RiskFactor) isBusEvent_Event() {}

func (*BusEvent_Market) isBusEvent_Event() {}

func (m *BusEvent) GetEvent() isBusEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *BusEvent) GetTimeUpdate() *TimeUpdate {
	if x, ok := m.GetEvent().(*BusEvent_TimeUpdate); ok {
		return x.TimeUpdate
	}
	return nil
}

func (m *BusEvent) GetTransferResponses() *TransferResponses {
	if x, ok := m.GetEvent().(*BusEvent_TransferResponses); ok {
		return x.TransferResponses
	}
	return nil
}

func (m *BusEvent) GetPositionResolution() *PositionResolution {
	if x, ok := m.GetEvent().(*BusEvent_PositionResolution); ok {
		return x.PositionResolution
	}
	return nil
}

func (m *BusEvent) GetOrder() *Order {
	if x, ok := m.GetEvent().(*BusEvent_Order); ok {
		return x.Order
	}
	return nil
}

func (m *BusEvent) GetAccount() *Account {
	if x, ok := m.GetEvent().(*BusEvent_Account); ok {
		return x.Account
	}
	return nil
}

func (m *BusEvent) GetParty() *Party {
	if x, ok := m.GetEvent().(*BusEvent_Party); ok {
		return x.Party
	}
	return nil
}

func (m *BusEvent) GetTrade() *Trade {
	if x, ok := m.GetEvent().(*BusEvent_Trade); ok {
		return x.Trade
	}
	return nil
}

func (m *BusEvent) GetMarginLevels() *MarginLevels {
	if x, ok := m.GetEvent().(*BusEvent_MarginLevels); ok {
		return x.MarginLevels
	}
	return nil
}

func (m *BusEvent) GetProposal() *Proposal {
	if x, ok := m.GetEvent().(*BusEvent_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (m *BusEvent) GetVote() *Vote {
	if x, ok := m.GetEvent().(*BusEvent_Vote); ok {
		return x.Vote
	}
	return nil
}

func (m *BusEvent) GetMarketData() *MarketData {
	if x, ok := m.GetEvent().(*BusEvent_MarketData); ok {
		return x.MarketData
	}
	return nil
}

func (m *BusEvent) GetNodeSignature() *NodeSignature {
	if x, ok := m.GetEvent().(*BusEvent_NodeSignature); ok {
		return x.NodeSignature
	}
	return nil
}

func (m *BusEvent) GetLossSocialization() *LossSocialization {
	if x, ok := m.GetEvent().(*BusEvent_LossSocialization); ok {
		return x.LossSocialization
	}
	return nil
}

func (m *BusEvent) GetSettlePosition() *SettlePosition {
	if x, ok := m.GetEvent().(*BusEvent_SettlePosition); ok {
		return x.SettlePosition
	}
	return nil
}

func (m *BusEvent) GetSettleDistressed() *SettleDistressed {
	if x, ok := m.GetEvent().(*BusEvent_SettleDistressed); ok {
		return x.SettleDistressed
	}
	return nil
}

func (m *BusEvent) GetMarketCreated() *Market {
	if x, ok := m.GetEvent().(*BusEvent_MarketCreated); ok {
		return x.MarketCreated
	}
	return nil
}

func (m *BusEvent) GetAsset() *Asset {
	if x, ok := m.GetEvent().(*BusEvent_Asset); ok {
		return x.Asset
	}
	return nil
}

func (m *BusEvent) GetMarketTick() *MarketTick {
	if x, ok := m.GetEvent().(*BusEvent_MarketTick); ok {
		return x.MarketTick
	}
	return nil
}

func (m *BusEvent) GetWithdrawal() *Withdrawal {
	if x, ok := m.GetEvent().(*BusEvent_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

func (m *BusEvent) GetDeposit() *Deposit {
	if x, ok := m.GetEvent().(*BusEvent_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (m *BusEvent) GetAuction() *AuctionEvent {
	if x, ok := m.GetEvent().(*BusEvent_Auction); ok {
		return x.Auction
	}
	return nil
}

func (m *BusEvent) GetRiskFactor() *RiskFactor {
	if x, ok := m.GetEvent().(*BusEvent_RiskFactor); ok {
		return x.RiskFactor
	}
	return nil
}

func (m *BusEvent) GetMarket() *MarketEvent {
	if x, ok := m.GetEvent().(*BusEvent_Market); ok {
		return x.Market
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BusEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BusEvent_TimeUpdate)(nil),
		(*BusEvent_TransferResponses)(nil),
		(*BusEvent_PositionResolution)(nil),
		(*BusEvent_Order)(nil),
		(*BusEvent_Account)(nil),
		(*BusEvent_Party)(nil),
		(*BusEvent_Trade)(nil),
		(*BusEvent_MarginLevels)(nil),
		(*BusEvent_Proposal)(nil),
		(*BusEvent_Vote)(nil),
		(*BusEvent_MarketData)(nil),
		(*BusEvent_NodeSignature)(nil),
		(*BusEvent_LossSocialization)(nil),
		(*BusEvent_SettlePosition)(nil),
		(*BusEvent_SettleDistressed)(nil),
		(*BusEvent_MarketCreated)(nil),
		(*BusEvent_Asset)(nil),
		(*BusEvent_MarketTick)(nil),
		(*BusEvent_Withdrawal)(nil),
		(*BusEvent_Deposit)(nil),
		(*BusEvent_Auction)(nil),
		(*BusEvent_RiskFactor)(nil),
		(*BusEvent_Market)(nil),
	}
}

func init() {
	proto.RegisterEnum("vega.AuctionTrigger", AuctionTrigger_name, AuctionTrigger_value)
	proto.RegisterEnum("vega.BusEventType", BusEventType_name, BusEventType_value)
	proto.RegisterType((*MarketEvent)(nil), "vega.MarketEvent")
	proto.RegisterType((*TimeUpdate)(nil), "vega.TimeUpdate")
	proto.RegisterType((*TransferResponses)(nil), "vega.TransferResponses")
	proto.RegisterType((*PositionResolution)(nil), "vega.PositionResolution")
	proto.RegisterType((*LossSocialization)(nil), "vega.LossSocialization")
	proto.RegisterType((*TradeSettlement)(nil), "vega.TradeSettlement")
	proto.RegisterType((*SettlePosition)(nil), "vega.SettlePosition")
	proto.RegisterType((*SettleDistressed)(nil), "vega.SettleDistressed")
	proto.RegisterType((*MarketTick)(nil), "vega.MarketTick")
	proto.RegisterType((*AuctionEvent)(nil), "vega.AuctionEvent")
	proto.RegisterType((*BusEvent)(nil), "vega.BusEvent")
}

func init() { proto.RegisterFile("proto/events.proto", fileDescriptor_499cf8c2dd86f7dd) }

var fileDescriptor_499cf8c2dd86f7dd = []byte{
	// 1411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcd, 0x6e, 0xdb, 0xc6,
	0x16, 0x96, 0x2c, 0xf9, 0xef, 0xd8, 0x56, 0xc6, 0x63, 0xc7, 0x9e, 0x38, 0x7f, 0x8a, 0xee, 0xbd,
	0x81, 0x6f, 0x10, 0x38, 0x17, 0xbe, 0x59, 0x14, 0x08, 0x50, 0x80, 0x16, 0xc7, 0x16, 0x1b, 0x59,
	0x54, 0x87, 0x23, 0x07, 0xc9, 0x46, 0x60, 0xa4, 0x89, 0xc2, 0x5a, 0x12, 0x55, 0x92, 0x56, 0xea,
	0x3c, 0x40, 0x97, 0x7d, 0x80, 0x6e, 0xba, 0xe8, 0x8b, 0xf4, 0x75, 0xfa, 0x16, 0xc5, 0xcc, 0x50,
	0x22, 0x45, 0xb1, 0x0d, 0x90, 0x55, 0x78, 0xce, 0xf7, 0x9d, 0xc3, 0x8f, 0xe7, 0x2f, 0x16, 0xe0,
	0x49, 0xe0, 0x47, 0xfe, 0x0b, 0x31, 0x15, 0xe3, 0x28, 0x3c, 0x51, 0x06, 0x2e, 0x4f, 0xc5, 0xc0,
	0x3d, 0xda, 0xd3, 0xc8, 0xc8, 0x0d, 0xae, 0xc5, 0x0c, 0x3a, 0x8a, 0xe9, 0x6e, 0x18, 0x26, 0xbe,
	0x03, 0xed, 0x1b, 0xf8, 0x53, 0x11, 0x8c, 0xdd, 0x71, 0x4f, 0xc4, 0x7e, 0xa4, 0xfd, 0x32, 0x99,
	0xf6, 0xd4, 0xea, 0xb0, 0x75, 0xa9, 0xd2, 0x51, 0xf9, 0x3a, 0x7c, 0x04, 0x1b, 0x3a, 0xbb, 0x65,
	0x92, 0x62, 0xb5, 0x78, 0xbc, 0xc9, 0xe6, 0x36, 0x26, 0xb0, 0x3e, 0x71, 0x6f, 0x87, 0xbe, 0xdb,
	0x27, 0x2b, 0x0a, 0x9a, 0x99, 0xb5, 0x67, 0x00, 0xdc, 0x1b, 0x89, 0xce, 0xa4, 0xef, 0x46, 0x02,
	0x3f, 0x80, 0xcd, 0xc8, 0x1b, 0x89, 0x30, 0x72, 0x47, 0x13, 0x95, 0xa4, 0xc4, 0x12, 0x47, 0xcd,
	0x82, 0x5d, 0x1e, 0xb8, 0xe3, 0xf0, 0x83, 0x08, 0x98, 0x08, 0x27, 0xfe, 0x38, 0x14, 0x21, 0x7e,
	0x09, 0x9b, 0xc1, 0xcc, 0x20, 0xc5, 0x6a, 0xe9, 0x78, 0xeb, 0xf4, 0xe0, 0x44, 0xa9, 0xcc, 0x72,
	0x59, 0x42, 0xac, 0xfd, 0x5c, 0x04, 0xdc, 0xf6, 0x43, 0x2f, 0xf2, 0xfc, 0x31, 0x13, 0xa1, 0x3f,
	0xbc, 0x91, 0x4f, 0xff, 0xf8, 0x0d, 0x8f, 0x00, 0xfa, 0x5e, 0x18, 0x05, 0x22, 0x0c, 0x85, 0xfe,
	0x8c, 0x12, 0x4b, 0x79, 0xf0, 0x01, 0xac, 0xf5, 0x86, 0xbe, 0xc4, 0x4a, 0x0a, 0x8b, 0x2d, 0xf9,
	0x4d, 0x32, 0x47, 0x3b, 0xf0, 0x7a, 0x82, 0x94, 0xab, 0xc5, 0xe3, 0x32, 0x4b, 0x1c, 0x35, 0x17,
	0x76, 0x9b, 0x7e, 0x18, 0x3a, 0x7e, 0xcf, 0x73, 0x87, 0xde, 0x67, 0xf7, 0x8b, 0x32, 0x54, 0x29,
	0x83, 0xe8, 0xd6, 0x32, 0x93, 0x52, 0x2a, 0x53, 0x0a, 0x70, 0x47, 0xfe, 0xcd, 0x38, 0x9a, 0x09,
	0xd0, 0x56, 0xed, 0x15, 0xdc, 0xe1, 0x81, 0xdb, 0x17, 0x8e, 0x88, 0xa2, 0xa1, 0x18, 0xc9, 0x5e,
	0x61, 0x28, 0x87, 0xde, 0x67, 0x11, 0x97, 0x58, 0x3d, 0xe3, 0x7d, 0x58, 0x9d, 0x28, 0x8d, 0x2b,
	0x4a, 0xa3, 0x36, 0x6a, 0xbf, 0x15, 0xa1, 0xa2, 0x03, 0x67, 0xe5, 0xfa, 0x4a, 0x75, 0xf3, 0xf4,
	0xa5, 0x54, 0x7a, 0x6c, 0x00, 0x8a, 0x16, 0xb5, 0x85, 0xa4, 0xac, 0x9a, 0x78, 0x77, 0xde, 0xc4,
	0x34, 0xca, 0x96, 0xe8, 0xb5, 0x29, 0x20, 0x6d, 0x9a, 0x49, 0x2f, 0xbe, 0xba, 0x80, 0x23, 0x37,
	0x18, 0x78, 0xe3, 0x58, 0x63, 0x6c, 0x25, 0xd2, 0xcb, 0xe9, 0xca, 0xfc, 0x0f, 0x40, 0x8f, 0x3f,
	0xf7, 0x7a, 0xd7, 0xb8, 0x02, 0x2b, 0xf3, 0x77, 0xad, 0x58, 0xa6, 0xac, 0xb0, 0x1c, 0xdc, 0x78,
	0x4e, 0xd4, 0x73, 0xed, 0x8f, 0x22, 0x6c, 0x1b, 0x37, 0x3d, 0x59, 0xc4, 0x2f, 0xaf, 0xcc, 0x53,
	0xa8, 0xf8, 0x13, 0x31, 0xf6, 0xc6, 0x83, 0x38, 0x44, 0xa5, 0xda, 0x60, 0x19, 0xaf, 0x14, 0x37,
	0x14, 0xee, 0x54, 0xd7, 0x75, 0x83, 0x69, 0x43, 0x7a, 0xc3, 0xc8, 0x0d, 0x22, 0x25, 0xb9, 0xc4,
	0xb4, 0x81, 0x11, 0x94, 0xc4, 0xb8, 0x4f, 0x56, 0x95, 0x4f, 0x3e, 0xe2, 0x13, 0x58, 0x8f, 0x02,
	0x6f, 0x30, 0x10, 0x01, 0x59, 0xab, 0x16, 0x8f, 0x2b, 0xa7, 0xfb, 0xba, 0xec, 0x71, 0x76, 0xae,
	0x31, 0x36, 0x23, 0xd5, 0x7e, 0x01, 0xd8, 0x38, 0xbb, 0x09, 0xb5, 0xfc, 0xec, 0x37, 0xef, 0xc3,
	0xea, 0xfb, 0xa1, 0xdf, 0xbb, 0x8e, 0xeb, 0xaa, 0x0d, 0xfc, 0x14, 0xca, 0xd1, 0xed, 0x44, 0xeb,
	0xab, 0x9c, 0x62, 0x9d, 0x7f, 0x96, 0x83, 0xdf, 0x4e, 0x04, 0x53, 0x38, 0x3e, 0x05, 0x88, 0xe6,
	0x97, 0x80, 0x88, 0x6a, 0xf1, 0x78, 0xeb, 0x14, 0xc5, 0x43, 0x30, 0xf7, 0x37, 0x0a, 0x2c, 0xc5,
	0xc2, 0x17, 0xb0, 0x1b, 0x65, 0x2f, 0x02, 0xf9, 0xa0, 0x42, 0x0f, 0xf3, 0x8f, 0x40, 0xd8, 0x28,
	0xb0, 0xe5, 0x18, 0xfc, 0x1d, 0xe0, 0xc9, 0xd2, 0x39, 0x20, 0x03, 0x95, 0x89, 0xe8, 0x4c, 0xcb,
	0xe7, 0xa2, 0x51, 0x60, 0x39, 0x51, 0xf8, 0x5f, 0xb0, 0xea, 0x07, 0x7d, 0x11, 0x90, 0x8f, 0x2a,
	0x7c, 0x4b, 0x87, 0xdb, 0xd2, 0xd5, 0x28, 0x30, 0x8d, 0xe1, 0xff, 0xc2, 0xba, 0xdb, 0xeb, 0xa9,
	0x6d, 0xf5, 0x14, 0x6d, 0x27, 0x2e, 0xbc, 0x76, 0x36, 0x0a, 0x6c, 0x86, 0xcb, 0x7c, 0x6a, 0x42,
	0xc9, 0x0f, 0xe9, 0x7c, 0x6d, 0xe9, 0x92, 0xf9, 0x14, 0x26, 0x49, 0x6a, 0x33, 0xc8, 0x75, 0x9a,
	0xa4, 0xb6, 0x47, 0x92, 0x14, 0x86, 0xbf, 0x81, 0x6d, 0x3d, 0xd2, 0x4d, 0x31, 0x15, 0xc3, 0x90,
	0x0c, 0x15, 0x37, 0x6e, 0xc9, 0x65, 0x0a, 0x69, 0x14, 0xd8, 0x02, 0x13, 0x3f, 0x87, 0x8d, 0x49,
	0xe0, 0x4f, 0xfc, 0xd0, 0x1d, 0x92, 0x91, 0x8a, 0xaa, 0xc4, 0x32, 0x62, 0x6f, 0xa3, 0xc0, 0xe6,
	0x0c, 0x5c, 0x85, 0xf2, 0xd4, 0x8f, 0x04, 0x19, 0x2b, 0x26, 0x68, 0xe6, 0x95, 0xaf, 0xda, 0xa7,
	0x10, 0xd9, 0x6c, 0x3d, 0xe9, 0xa6, 0x1b, 0xb9, 0xc4, 0x4f, 0x37, 0xfb, 0x72, 0xee, 0x97, 0xcd,
	0x4e, 0x58, 0xf8, 0x15, 0xec, 0x8c, 0xfd, 0xbe, 0x70, 0xbc, 0xc1, 0xd8, 0x8d, 0x6e, 0x02, 0x41,
	0x26, 0x2a, 0x6c, 0x4f, 0x87, 0xb5, 0xd2, 0x50, 0xa3, 0xc0, 0x16, 0xb9, 0x72, 0x52, 0x86, 0xd9,
	0x3b, 0x4b, 0x7e, 0x4c, 0x4f, 0xca, 0xd2, 0x19, 0x96, 0x93, 0xb2, 0x14, 0x83, 0xbf, 0x85, 0x4a,
	0xb8, 0x70, 0x0f, 0x49, 0xa0, 0xb2, 0xc4, 0x8b, 0xb3, 0x78, 0x2b, 0x1b, 0x05, 0x96, 0x61, 0x63,
	0x13, 0x50, 0x98, 0x39, 0x57, 0x24, 0x54, 0x19, 0x0e, 0xd2, 0x19, 0x12, 0xb4, 0x51, 0x60, 0x4b,
	0x11, 0xf8, 0x25, 0xec, 0xe8, 0xca, 0xd4, 0x03, 0xe1, 0x46, 0xa2, 0x4f, 0x22, 0x95, 0x62, 0x3b,
	0x5d, 0x42, 0x59, 0x84, 0x05, 0x92, 0x1c, 0x12, 0xf5, 0x7f, 0x3d, 0xb9, 0x49, 0x0f, 0x89, 0x21,
	0x5d, 0x72, 0x48, 0x14, 0x96, 0xb4, 0x46, 0xde, 0x35, 0x32, 0x5d, 0x6e, 0x8d, 0xf4, 0x27, 0xad,
	0x51, 0xd7, 0xef, 0x14, 0xe0, 0x93, 0x17, 0x7d, 0xec, 0x07, 0xee, 0x27, 0x77, 0x48, 0x3e, 0xa5,
	0x63, 0xde, 0xcc, 0xfd, 0x32, 0x26, 0x61, 0xc9, 0x0d, 0xe8, 0x0b, 0xb5, 0x3e, 0xe4, 0xa7, 0xf4,
	0x06, 0x98, 0xda, 0x29, 0x37, 0x20, 0xc6, 0xe5, 0x95, 0x72, 0xe3, 0x23, 0x78, 0x9b, 0x1e, 0xd9,
	0xf4, 0x31, 0x55, 0x1b, 0x13, 0xdf, 0xc4, 0x53, 0x80, 0xc0, 0x0b, 0xaf, 0xcf, 0xdd, 0x5e, 0xe4,
	0x07, 0xe4, 0x73, 0x5a, 0x0e, 0x9b, 0xfb, 0xa5, 0x9c, 0x84, 0x85, 0x9f, 0xab, 0xe3, 0x7f, 0x2d,
	0x22, 0xf2, 0xe7, 0xba, 0x0a, 0xd8, 0x4d, 0x7f, 0xf3, 0xec, 0x15, 0x31, 0xe7, 0x6c, 0x1d, 0x56,
	0xd5, 0x1f, 0x59, 0xcf, 0x7e, 0x2f, 0x42, 0x65, 0xf1, 0x58, 0xe2, 0xc7, 0x70, 0xdf, 0xe8, 0xd4,
	0xb9, 0x65, 0xb7, 0xba, 0x9c, 0x59, 0x17, 0x17, 0x94, 0x75, 0x3b, 0x2d, 0xa7, 0x4d, 0xeb, 0xd6,
	0xb9, 0x45, 0x4d, 0x54, 0xc0, 0xf7, 0xe0, 0x6e, 0x96, 0x70, 0x66, 0xf0, 0x7a, 0x03, 0x15, 0xf1,
	0x7d, 0x38, 0xcc, 0x42, 0x76, 0x9b, 0xb6, 0xac, 0xd6, 0x05, 0x5a, 0xc9, 0x8b, 0x6b, 0x33, 0xab,
	0x4e, 0x51, 0x09, 0x3f, 0x84, 0x7b, 0x59, 0xa8, 0x69, 0x7d, 0xdf, 0xb1, 0x4c, 0x8b, 0xbf, 0x45,
	0xe5, 0x67, 0xbf, 0xae, 0xc1, 0x76, 0xfa, 0xe4, 0xe2, 0x47, 0x70, 0x74, 0xd6, 0x71, 0xba, 0xf4,
	0x8a, 0xb6, 0x78, 0x97, 0xbf, 0x6d, 0xd3, 0x8c, 0xc4, 0x03, 0xc0, 0x19, 0xdc, 0x68, 0x36, 0x51,
	0x31, 0x27, 0x8e, 0x5b, 0x97, 0xb4, 0xdb, 0x69, 0x9b, 0x06, 0xa7, 0x68, 0x05, 0xff, 0x07, 0x9e,
	0x64, 0x71, 0x66, 0xb4, 0x9c, 0x73, 0xca, 0xba, 0x8c, 0x3a, 0x6d, 0xbb, 0xe5, 0x50, 0x07, 0x95,
	0xf0, 0x53, 0xa8, 0x65, 0x68, 0x6d, 0xdb, 0xb1, 0x94, 0x7c, 0x46, 0x1d, 0xbb, 0xd9, 0x91, 0x8f,
	0xa8, 0x8c, 0x09, 0xec, 0x67, 0x78, 0x36, 0x33, 0x29, 0x43, 0xab, 0xf8, 0x08, 0x0e, 0xb2, 0x02,
	0xeb, 0x75, 0xbb, 0xd3, 0xe2, 0x68, 0x2d, 0x27, 0xaa, 0x6d, 0x30, 0xfe, 0x16, 0xad, 0xe7, 0x20,
	0x9c, 0x19, 0x26, 0x45, 0x1b, 0xb8, 0x0a, 0x0f, 0x32, 0xc8, 0xa5, 0xc1, 0x2e, 0xac, 0x56, 0xb7,
	0x49, 0xaf, 0x68, 0xd3, 0x41, 0x9b, 0xb2, 0x35, 0xd9, 0xac, 0xcc, 0x6e, 0xdb, 0x8e, 0xd1, 0x44,
	0x80, 0x0f, 0x61, 0x2f, 0x03, 0x5e, 0xd9, 0x9c, 0xa2, 0xad, 0x9c, 0x82, 0x5d, 0x1a, 0xec, 0x35,
	0xe5, 0x5d, 0xd3, 0xe0, 0x06, 0xda, 0xc6, 0x4f, 0xe0, 0x61, 0x06, 0x6f, 0xd9, 0x26, 0xed, 0x3a,
	0xd6, 0x45, 0xcb, 0xe0, 0x1d, 0x46, 0xd1, 0x4e, 0x4e, 0x4d, 0x9b, 0xb6, 0xe3, 0x74, 0x1d, 0xbb,
	0x6e, 0x19, 0x4d, 0xeb, 0x9d, 0xa1, 0x6a, 0x55, 0xc1, 0x35, 0x78, 0x94, 0xa1, 0x39, 0x94, 0xf3,
	0x66, 0x52, 0x5a, 0x74, 0x07, 0xff, 0x1b, 0xaa, 0xf9, 0x1c, 0xd3, 0x72, 0x38, 0xa3, 0x8e, 0x43,
	0x4d, 0x84, 0x72, 0x34, 0xc5, 0x9a, 0xeb, 0x8c, 0x1a, 0x9c, 0x9a, 0x68, 0x37, 0xa7, 0x90, 0x86,
	0xe3, 0x50, 0x8e, 0xf0, 0xdf, 0x7f, 0x30, 0xb7, 0xea, 0xaf, 0xd1, 0x9e, 0x9c, 0xd4, 0x0c, 0xfe,
	0xc6, 0xe2, 0x0d, 0x93, 0x19, 0x6f, 0x8c, 0x26, 0xda, 0xcf, 0xe9, 0xab, 0x49, 0xd5, 0x07, 0xa0,
	0xbb, 0x79, 0x3d, 0xd7, 0x33, 0x8f, 0x0e, 0x72, 0x5e, 0xcb, 0x2c, 0xe7, 0x75, 0xf7, 0xdc, 0xa8,
	0x73, 0x9b, 0xa1, 0x43, 0xb9, 0x3b, 0xb9, 0xb2, 0x90, 0x38, 0x7b, 0xf2, 0xee, 0x71, 0xcf, 0xef,
	0x0b, 0xb5, 0xee, 0xea, 0x97, 0x4d, 0xcf, 0x1f, 0x9e, 0x78, 0xfa, 0xa7, 0xce, 0x0b, 0xe5, 0x78,
	0xbf, 0xa6, 0xfe, 0xf9, 0xff, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xe2, 0xf4, 0xfc, 0x60,
	0x0d, 0x00, 0x00,
}
