syntax = "proto3";

package vega;
option go_package = "code.vegaprotocol.io/vega/proto";

import "github.com/mwitkow/go-proto-validators/validator.proto";

import "proto/markets.proto";
import "proto/assets.proto";

message NetworkConfiguration {
  // Constrains minimum duration since submission (in seconds) when vote closing time is allowed to be set for a proposal.
  int64 minCloseInSeconds = 1;
  // Constrains maximum duration since submission (in seconds) when vote closing time is allowed to be set for a proposal.
  int64 maxCloseInSeconds = 2;

  // Constrains minimum duration since submission (in seconds) when enactment is allowed to be set for a proposal.
  int64 minEnactInSeconds = 3;
  // Constrains maximum duration since submission (in seconds) when enactment is allowed to be set for a proposal.
  int64 maxEnactInSeconds = 4;

  // Constrains minimum participation level allowed to be set for a proposal. Value from `0` to `1`.
  float minRequiredParticipation = 5 [(validator.field) = {float_gte: 0, float_lte: 1}];

  // Constrains minimum majority level allowed to be set for a proposal. Value from `0.5` to `1`.
  float minRequiredMajority = 6 [(validator.field) = {float_gte: 0.5, float_lte: 1}];

  // Minimum balance required for a party to be able to submit a new proposal. Value greater than `0` to `1`.
  float minProposingBalance = 7 [(validator.field) = {float_gt: 0, float_lte: 1}];

  // Minimum balance required for a party to be able to cast a vote. Value greater than `0` to `1`.
  float minVotingBalance = 8 [(validator.field) = {float_gt: 0, float_lte: 1}];
}

message UpdateMarket {
  //TODO
}
message NewMarket {
  Market changes = 1 [(validator.field) = {msg_exists: true}];
}
message UpdateNetwork {
  NetworkConfiguration changes = 1 [(validator.field) = {msg_exists: true}];
}

// To be implemented
message NewAsset {
  AssetSource changes = 1 [(validator.field) = {msg_exists: true}];
}

message ProposalTerms {
  // Timestamp (Unix time in seconds) when voting closes for this proposal.
  // Constrained by `minCloseInSeconds` and `maxCloseInSeconds` network parameters.
  int64 closingTimestamp      = 1 [(validator.field) = {int_gt: 0}];
  // Timestamp (Unix time in seconds) when proposal gets enacted (if passed).
  // Constrained by `minEnactInSeconds` and `maxEnactInSeconds` network parameters.
  int64 enactmentTimestamp    = 2 [(validator.field) = {int_gt: 0}];
  // Participation level required for the proposal to pass. Constrained by `minRequiredParticipation` network parameter.
  // Value from `0` to `1`; `0` to use network parameter value.
  float requiredParticipation = 3 [(validator.field) = {float_gte: 0, float_lte: 1}];
  // Majority level required for the proposal to pass. Constrained by `minRequiredMajority` network parameter.
  // Value from `0.5` to `1`; `0` to use network parameter value
  float requiredMajority      = 4 [(validator.field) = {float_gte: 0, float_lte: 1}];

  int64 validationTimestamp = 5; //TODO: this should be moved into `NewAsset` definition

  // Actual changes being proposed
  oneof change {
    UpdateMarket  updateMarket  = 101;
    NewMarket     newMarket     = 102;
    UpdateNetwork updateNetwork = 103;
    NewAsset      newAsset      = 104;
  };
}

message GovernanceData {
  Proposal proposal = 1;
  repeated Vote yes = 2;
  repeated Vote no = 3;
}

message Proposal {
  // Proposal state transition:
  // Open ->
  //   - Passed -> Enacted.
  //   - Passed -> Failed.
  //   - Declined
  // Rejected
  // Proposal can enter Failed state from any other state.
  enum State {
    // Proposal could not be enacted after being accepted by the network
    FAILED    = 0;

    // Proposal is open for voting.
    OPEN      = 1;

    // Proposal has gained enough support to be executed.
    PASSED    = 2;

    // Proposal wasn't accepted (validation failed, author not allowed to submit proposals)
    REJECTED  = 3;

    // Proposal didn't get enough votes
    DECLINED  = 4;

    // Proposal has been executed and the changes under this proposal have now been applied.
    ENACTED   = 5;
  }

  string        ID        = 1;
  string        reference = 2;
  string        partyID   = 3 [(validator.field) = {string_not_empty : true}];
  State         state     = 4 [(validator.field) = {is_in_enum: true}];
  int64         timestamp = 5;
  ProposalTerms terms     = 6 [(validator.field) = {msg_exists: true}];
}

message Vote {
  enum Value {
      NO  = 0;
      YES = 1;
  }

  string partyID    = 1 [(validator.field) = {string_not_empty : true}];
  Value  value      = 2 [(validator.field) = {is_in_enum : true}];
  string proposalID = 3 [(validator.field) = {string_not_empty : true}];
  int64  timestamp  = 4;
}
