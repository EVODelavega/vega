// Code generated by protoc-gen-go. DO NOT EDIT.
// source: oracles/v1/oracles.proto

package oraclesv1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type describes the type of properties that are supported by the oracle
// engine.
type PropertyKey_Type int32

const (
	// The default value.
	PropertyKey_TYPE_UNSPECIFIED PropertyKey_Type = 0
	// Any type.
	PropertyKey_TYPE_EMPTY PropertyKey_Type = 1
	// Integer type.
	PropertyKey_TYPE_INTEGER PropertyKey_Type = 2
	// String type.
	PropertyKey_TYPE_STRING PropertyKey_Type = 3
	// Boolean type.
	PropertyKey_TYPE_BOOLEAN PropertyKey_Type = 4
	// Any floating point decimal type.
	PropertyKey_TYPE_DECIMAL PropertyKey_Type = 5
	// Timestamp date type.
	PropertyKey_TYPE_TIMESTAMP PropertyKey_Type = 6
)

var PropertyKey_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_EMPTY",
	2: "TYPE_INTEGER",
	3: "TYPE_STRING",
	4: "TYPE_BOOLEAN",
	5: "TYPE_DECIMAL",
	6: "TYPE_TIMESTAMP",
}

var PropertyKey_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"TYPE_EMPTY":       1,
	"TYPE_INTEGER":     2,
	"TYPE_STRING":      3,
	"TYPE_BOOLEAN":     4,
	"TYPE_DECIMAL":     5,
	"TYPE_TIMESTAMP":   6,
}

func (x PropertyKey_Type) String() string {
	return proto.EnumName(PropertyKey_Type_name, int32(x))
}

func (PropertyKey_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fc4c54e127e92f6d, []int{2, 0}
}

// Comparator describes the type of comparison.
type Condition_Operator int32

const (
	// The default value
	Condition_OPERATOR_UNSPECIFIED Condition_Operator = 0
	// Verify if the property values are strictly equal or not.
	Condition_OPERATOR_EQUALS Condition_Operator = 1
	// Verify if the oracle data value is greater than the Condition value.
	Condition_OPERATOR_GREATER_THAN Condition_Operator = 2
	// Verify if the oracle data value is greater than or equal to the Condition
	// value.
	Condition_OPERATOR_GREATER_THAN_OR_EQUAL Condition_Operator = 3
	// Verify if the oracle data value is less than the Condition value.
	Condition_OPERATOR_LESS_THAN Condition_Operator = 4
	// Verify if the oracle data value is less or equal to than the Condition
	// value.
	Condition_OPERATOR_LESS_THAN_OR_EQUAL Condition_Operator = 5
)

var Condition_Operator_name = map[int32]string{
	0: "OPERATOR_UNSPECIFIED",
	1: "OPERATOR_EQUALS",
	2: "OPERATOR_GREATER_THAN",
	3: "OPERATOR_GREATER_THAN_OR_EQUAL",
	4: "OPERATOR_LESS_THAN",
	5: "OPERATOR_LESS_THAN_OR_EQUAL",
}

var Condition_Operator_value = map[string]int32{
	"OPERATOR_UNSPECIFIED":           0,
	"OPERATOR_EQUALS":                1,
	"OPERATOR_GREATER_THAN":          2,
	"OPERATOR_GREATER_THAN_OR_EQUAL": 3,
	"OPERATOR_LESS_THAN":             4,
	"OPERATOR_LESS_THAN_OR_EQUAL":    5,
}

func (x Condition_Operator) String() string {
	return proto.EnumName(Condition_Operator_name, int32(x))
}

func (Condition_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fc4c54e127e92f6d, []int{3, 0}
}

// An oracle spec describe the oracle data that a product (or a risk model)
// wants to get from the oracle engine.
type OracleSpec struct {
	// pubKeys is the list of authorized public keys that signed the data for this
	// oracle. All the public keys in the oracle data should be contained in these
	// public keys.
	PubKeys []string `protobuf:"bytes,2,rep,name=pub_keys,json=pubKeys,proto3" json:"pub_keys,omitempty"`
	// filters describes which oracle data are considered of interest or not for
	// the product (or the risk model).
	Filters              []*Filter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OracleSpec) Reset()         { *m = OracleSpec{} }
func (m *OracleSpec) String() string { return proto.CompactTextString(m) }
func (*OracleSpec) ProtoMessage()    {}
func (*OracleSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4c54e127e92f6d, []int{0}
}

func (m *OracleSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleSpec.Unmarshal(m, b)
}
func (m *OracleSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleSpec.Marshal(b, m, deterministic)
}
func (m *OracleSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleSpec.Merge(m, src)
}
func (m *OracleSpec) XXX_Size() int {
	return xxx_messageInfo_OracleSpec.Size(m)
}
func (m *OracleSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleSpec.DiscardUnknown(m)
}

var xxx_messageInfo_OracleSpec proto.InternalMessageInfo

func (m *OracleSpec) GetPubKeys() []string {
	if m != nil {
		return m.PubKeys
	}
	return nil
}

func (m *OracleSpec) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

// Filter describes the conditions under which an oracle data is considered of
// interest or not.
type Filter struct {
	// key is the oracle data property key targeted by the filter.
	Key *PropertyKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// conditions are the conditions that should be matched by the data to be
	//considered of interest.
	Conditions           []*Condition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4c54e127e92f6d, []int{1}
}

func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetKey() *PropertyKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Filter) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

// PropertyKey describes the property key contained in an oracle data.
type PropertyKey struct {
	// name is the name of the property.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type is the type of the property.
	Type                 PropertyKey_Type `protobuf:"varint,2,opt,name=type,proto3,enum=oracles.v1.PropertyKey_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PropertyKey) Reset()         { *m = PropertyKey{} }
func (m *PropertyKey) String() string { return proto.CompactTextString(m) }
func (*PropertyKey) ProtoMessage()    {}
func (*PropertyKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4c54e127e92f6d, []int{2}
}

func (m *PropertyKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PropertyKey.Unmarshal(m, b)
}
func (m *PropertyKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PropertyKey.Marshal(b, m, deterministic)
}
func (m *PropertyKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropertyKey.Merge(m, src)
}
func (m *PropertyKey) XXX_Size() int {
	return xxx_messageInfo_PropertyKey.Size(m)
}
func (m *PropertyKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PropertyKey.DiscardUnknown(m)
}

var xxx_messageInfo_PropertyKey proto.InternalMessageInfo

func (m *PropertyKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PropertyKey) GetType() PropertyKey_Type {
	if m != nil {
		return m.Type
	}
	return PropertyKey_TYPE_UNSPECIFIED
}

// Condition describes the condition that must be validated by the
type Condition struct {
	// comparator is the type of comparison to make on the value.
	Operator Condition_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=oracles.v1.Condition_Operator" json:"operator,omitempty"`
	// value is used by the comparator.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Condition) Reset()         { *m = Condition{} }
func (m *Condition) String() string { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()    {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4c54e127e92f6d, []int{3}
}

func (m *Condition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Condition.Unmarshal(m, b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Condition.Marshal(b, m, deterministic)
}
func (m *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(m, src)
}
func (m *Condition) XXX_Size() int {
	return xxx_messageInfo_Condition.Size(m)
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *Condition) GetOperator() Condition_Operator {
	if m != nil {
		return m.Operator
	}
	return Condition_OPERATOR_UNSPECIFIED
}

func (m *Condition) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterEnum("oracles.v1.PropertyKey_Type", PropertyKey_Type_name, PropertyKey_Type_value)
	proto.RegisterEnum("oracles.v1.Condition_Operator", Condition_Operator_name, Condition_Operator_value)
	proto.RegisterType((*OracleSpec)(nil), "oracles.v1.OracleSpec")
	proto.RegisterType((*Filter)(nil), "oracles.v1.Filter")
	proto.RegisterType((*PropertyKey)(nil), "oracles.v1.PropertyKey")
	proto.RegisterType((*Condition)(nil), "oracles.v1.Condition")
}

func init() { proto.RegisterFile("oracles/v1/oracles.proto", fileDescriptor_fc4c54e127e92f6d) }

var fileDescriptor_fc4c54e127e92f6d = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xd1, 0x6e, 0xda, 0x3c,
	0x14, 0xc7, 0xbf, 0x40, 0xa0, 0x70, 0xf8, 0x44, 0xad, 0x33, 0xba, 0xa5, 0xda, 0xd4, 0xa1, 0x5c,
	0x51, 0x6d, 0x0a, 0x83, 0x69, 0x37, 0xbb, 0x4b, 0xa9, 0xcb, 0xa2, 0x02, 0xc9, 0x1c, 0x73, 0xd1,
	0xdd, 0xa0, 0x90, 0x7a, 0x13, 0x2b, 0xc3, 0x51, 0x08, 0x91, 0xf2, 0x04, 0xbb, 0xde, 0xa3, 0xec,
	0x81, 0xf6, 0x2e, 0x13, 0x4e, 0x93, 0xa2, 0xad, 0xbb, 0xf3, 0xff, 0x77, 0x7e, 0xc7, 0xf6, 0xb1,
	0x0c, 0x86, 0x8c, 0x83, 0x70, 0x2d, 0xb6, 0xfd, 0x74, 0xd0, 0xbf, 0x5f, 0x5a, 0x51, 0x2c, 0x13,
	0x89, 0x50, 0xc4, 0x74, 0x60, 0xce, 0x01, 0x5c, 0x95, 0xfc, 0x48, 0x84, 0x78, 0x0a, 0x8d, 0x68,
	0xb7, 0x5c, 0xdc, 0x89, 0x6c, 0x6b, 0x54, 0xba, 0xd5, 0x5e, 0x93, 0x1d, 0x45, 0xbb, 0xe5, 0xb5,
	0xc8, 0xb6, 0xf8, 0x1a, 0x8e, 0x3e, 0xaf, 0xd6, 0x89, 0x88, 0xb7, 0x86, 0xde, 0xad, 0xf6, 0x5a,
	0x43, 0xb4, 0x1e, 0xb6, 0xb1, 0xae, 0x54, 0x89, 0x15, 0x8a, 0xf9, 0x15, 0xea, 0x39, 0xc2, 0x73,
	0xa8, 0xde, 0x89, 0xcc, 0xd0, 0xba, 0x5a, 0xaf, 0x35, 0x7c, 0x76, 0xd8, 0xe3, 0xc5, 0x32, 0x12,
	0x71, 0x92, 0x5d, 0x8b, 0x8c, 0xed, 0x1d, 0x7c, 0x07, 0x10, 0xca, 0xcd, 0xed, 0x2a, 0x59, 0xc9,
	0x4d, 0x7e, 0x7e, 0x6b, 0x78, 0x72, 0xd8, 0x31, 0x2a, 0xaa, 0xec, 0x40, 0x34, 0x7f, 0x69, 0xd0,
	0x3a, 0xd8, 0x0b, 0x11, 0xf4, 0x4d, 0xf0, 0x4d, 0xa8, 0x23, 0x9b, 0x4c, 0xad, 0xf1, 0x0d, 0xe8,
	0x49, 0x16, 0x09, 0xa3, 0xd2, 0xd5, 0x7a, 0xed, 0xe1, 0x8b, 0x7f, 0x5c, 0xc3, 0xe2, 0x59, 0x24,
	0x98, 0x32, 0xcd, 0xef, 0x1a, 0xe8, 0xfb, 0x88, 0x1d, 0x20, 0xfc, 0xc6, 0xa3, 0x8b, 0xf9, 0xcc,
	0xf7, 0xe8, 0xc8, 0xb9, 0x72, 0xe8, 0x25, 0xf9, 0x0f, 0xdb, 0x00, 0x8a, 0xd2, 0xa9, 0xc7, 0x6f,
	0x88, 0x86, 0x04, 0xfe, 0x57, 0xd9, 0x99, 0x71, 0x3a, 0xa6, 0x8c, 0x54, 0xf0, 0x18, 0x5a, 0x8a,
	0xf8, 0x9c, 0x39, 0xb3, 0x31, 0xa9, 0x96, 0xca, 0x85, 0xeb, 0x4e, 0xa8, 0x3d, 0x23, 0x7a, 0x49,
	0x2e, 0xe9, 0xc8, 0x99, 0xda, 0x13, 0x52, 0x43, 0x84, 0xb6, 0x22, 0xdc, 0x99, 0x52, 0x9f, 0xdb,
	0x53, 0x8f, 0xd4, 0xcd, 0x1f, 0x15, 0x68, 0x96, 0x93, 0xe3, 0x7b, 0x68, 0xec, 0xef, 0x1b, 0x24,
	0x32, 0x56, 0x13, 0xb6, 0x87, 0x67, 0x8f, 0x3e, 0x91, 0xe5, 0xde, 0x5b, 0xac, 0xf4, 0xb1, 0x03,
	0xb5, 0x34, 0x58, 0xef, 0xf2, 0x67, 0x68, 0xb2, 0x3c, 0x98, 0x3f, 0x35, 0x68, 0x14, 0x32, 0x1a,
	0xd0, 0x71, 0x3d, 0xca, 0x6c, 0xee, 0xb2, 0x3f, 0x26, 0x7e, 0x02, 0xc7, 0x65, 0x85, 0x7e, 0x9c,
	0xdb, 0x13, 0x9f, 0x68, 0x78, 0x0a, 0x27, 0x25, 0x1c, 0x33, 0x6a, 0x73, 0xca, 0x16, 0xfc, 0x83,
	0x3d, 0x23, 0x15, 0x34, 0xe1, 0xec, 0xd1, 0xd2, 0xa2, 0xe8, 0x27, 0x55, 0x7c, 0x0a, 0x58, 0x3a,
	0x13, 0xea, 0xfb, 0x79, 0xaf, 0x8e, 0x2f, 0xe1, 0xf9, 0xdf, 0xfc, 0xa1, 0xb1, 0x76, 0xf1, 0xea,
	0xd3, 0x79, 0x28, 0x6f, 0x85, 0x95, 0x8a, 0x2f, 0x81, 0xfa, 0xd4, 0xa1, 0x5c, 0x5b, 0x2b, 0xd9,
	0xdf, 0xe7, 0xbe, 0x02, 0xc5, 0x9f, 0x4f, 0x07, 0xcb, 0xba, 0x02, 0x6f, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x37, 0xf2, 0x5d, 0xdf, 0x12, 0x03, 0x00, 0x00,
}
