// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/governance.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A list of possible error which could have happenned
// and the cause for an proposal being rejected of failed
type ProposalError int32

const (
	// default value
	ProposalError_PROPOSAL_ERROR_UNSPECIFIED ProposalError = 0
	// the specified close time is too early base on network parameters
	ProposalError_PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON ProposalError = 1
	// the specified close time is too late based on network parameters
	ProposalError_PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE ProposalError = 2
	// the specified enact time is too early base on network parameters
	ProposalError_PROPOSAL_ERROR_ENACT_TIME_TOO_SOON ProposalError = 3
	// the specified enact time is too late based on network parameters
	ProposalError_PROPOSAL_ERROR_ENACT_TIME_TOO_LATE ProposalError = 4
	// the proposer for this proposal as insufficient token
	ProposalError_PROPOSAL_ERROR_INSUFFICIENT_TOKENS ProposalError = 5
	// the instrument quote name and base name were the same
	ProposalError_PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY ProposalError = 6
	// the proposal has not product
	ProposalError_PROPOSAL_ERROR_NO_PRODUCT ProposalError = 7
	// the specified product is not supported
	ProposalError_PROPOSAL_ERROR_UNSUPPORTED_PRODUCT ProposalError = 8
	// invalid future maturity timestamp (expect RFC3339)
	ProposalError_PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT_TIMESTAMP ProposalError = 9
	// the product maturity is past
	ProposalError_PROPOSAL_ERROR_PRODUCT_MATURITY_IS_PASSED ProposalError = 10
	// the proposal has not trading mode
	ProposalError_PROPOSAL_ERROR_NO_TRADING_MODE ProposalError = 11
	// the proposal has an unsupported trading mode
	ProposalError_PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE ProposalError = 12
	// the proposal failed node validation
	ProposalError_PROPOSAL_ERROR_NODE_VALIDATION_FAILED ProposalError = 13
)

var ProposalError_name = map[int32]string{
	0:  "PROPOSAL_ERROR_UNSPECIFIED",
	1:  "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
	2:  "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
	3:  "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
	4:  "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
	5:  "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
	6:  "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
	7:  "PROPOSAL_ERROR_NO_PRODUCT",
	8:  "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
	9:  "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT_TIMESTAMP",
	10: "PROPOSAL_ERROR_PRODUCT_MATURITY_IS_PASSED",
	11: "PROPOSAL_ERROR_NO_TRADING_MODE",
	12: "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
	13: "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
}

var ProposalError_value = map[string]int32{
	"PROPOSAL_ERROR_UNSPECIFIED":                      0,
	"PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON":              1,
	"PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE":              2,
	"PROPOSAL_ERROR_ENACT_TIME_TOO_SOON":              3,
	"PROPOSAL_ERROR_ENACT_TIME_TOO_LATE":              4,
	"PROPOSAL_ERROR_INSUFFICIENT_TOKENS":              5,
	"PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY":      6,
	"PROPOSAL_ERROR_NO_PRODUCT":                       7,
	"PROPOSAL_ERROR_UNSUPPORTED_PRODUCT":              8,
	"PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT_TIMESTAMP": 9,
	"PROPOSAL_ERROR_PRODUCT_MATURITY_IS_PASSED":       10,
	"PROPOSAL_ERROR_NO_TRADING_MODE":                  11,
	"PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE":         12,
	"PROPOSAL_ERROR_NODE_VALIDATION_FAILED":           13,
}

func (x ProposalError) String() string {
	return proto.EnumName(ProposalError_name, int32(x))
}

func (ProposalError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{0}
}

// Proposal state transition:
// Open ->
//   - Passed -> Enacted.
//   - Passed -> Failed.
//   - Declined
// Rejected
// Proposal can enter Failed state from any other state.
type Proposal_State int32

const (
	// Default value, always invalid.
	Proposal_STATE_UNSPECIFIED Proposal_State = 0
	// Proposal enactment has failed - even though proposal has passed, its execusion could not be performed.
	Proposal_STATE_FAILED Proposal_State = 1
	// Proposal is open for voting.
	Proposal_STATE_OPEN Proposal_State = 2
	// Proposal has gained enough support to be executed.
	Proposal_STATE_PASSED Proposal_State = 3
	// Proposal wasn't accepted (proposal terms failed validation due to wrong configuration or failing to meet network requirements).
	Proposal_STATE_REJECTED Proposal_State = 4
	// Proposal didn't get enough votes (either failing to gain required participation or majority level).
	Proposal_STATE_DECLINED Proposal_State = 5
	Proposal_STATE_ENACTED  Proposal_State = 6
	// waiting for validators validation of the proposal
	Proposal_STATE_WAITING_FOR_NODE_VOTE Proposal_State = 7
)

var Proposal_State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "STATE_FAILED",
	2: "STATE_OPEN",
	3: "STATE_PASSED",
	4: "STATE_REJECTED",
	5: "STATE_DECLINED",
	6: "STATE_ENACTED",
	7: "STATE_WAITING_FOR_NODE_VOTE",
}

var Proposal_State_value = map[string]int32{
	"STATE_UNSPECIFIED":           0,
	"STATE_FAILED":                1,
	"STATE_OPEN":                  2,
	"STATE_PASSED":                3,
	"STATE_REJECTED":              4,
	"STATE_DECLINED":              5,
	"STATE_ENACTED":               6,
	"STATE_WAITING_FOR_NODE_VOTE": 7,
}

func (x Proposal_State) String() string {
	return proto.EnumName(Proposal_State_name, int32(x))
}

func (Proposal_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{10, 0}
}

type Vote_Value int32

const (
	// Default value, always invalid.
	Vote_VALUE_UNSPECIFIED Vote_Value = 0
	// A vote against the proposal.
	Vote_VALUE_NO Vote_Value = 1
	// A vote in favour of the proposal.
	Vote_VALUE_YES Vote_Value = 2
)

var Vote_Value_name = map[int32]string{
	0: "VALUE_UNSPECIFIED",
	1: "VALUE_NO",
	2: "VALUE_YES",
}

var Vote_Value_value = map[string]int32{
	"VALUE_UNSPECIFIED": 0,
	"VALUE_NO":          1,
	"VALUE_YES":         2,
}

func (x Vote_Value) String() string {
	return proto.EnumName(Vote_Value_name, int32(x))
}

func (Vote_Value) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{11, 0}
}

type NetworkConfiguration struct {
	// Constrains minimum duration since submission (in seconds) when vote closing time is allowed to be set for a proposal.
	MinCloseInSeconds int64 `protobuf:"varint,1,opt,name=minCloseInSeconds,proto3" json:"minCloseInSeconds,omitempty"`
	// Constrains maximum duration since submission (in seconds) when vote closing time is allowed to be set for a proposal.
	MaxCloseInSeconds int64 `protobuf:"varint,2,opt,name=maxCloseInSeconds,proto3" json:"maxCloseInSeconds,omitempty"`
	// Constrains minimum duration since submission (in seconds) when enactment is allowed to be set for a proposal.
	MinEnactInSeconds int64 `protobuf:"varint,3,opt,name=minEnactInSeconds,proto3" json:"minEnactInSeconds,omitempty"`
	// Constrains maximum duration since submission (in seconds) when enactment is allowed to be set for a proposal.
	MaxEnactInSeconds int64 `protobuf:"varint,4,opt,name=maxEnactInSeconds,proto3" json:"maxEnactInSeconds,omitempty"`
	// Participation level required for any proposal to pass. Value from `0` to `1`.
	RequiredParticipation float32 `protobuf:"fixed32,5,opt,name=requiredParticipation,proto3" json:"requiredParticipation,omitempty"`
	// Majority level required for any proposal to pass. Value from `0.5` to `1`.
	RequiredMajority float32 `protobuf:"fixed32,6,opt,name=requiredMajority,proto3" json:"requiredMajority,omitempty"`
	// Minimum balance required for a party to be able to submit a new proposal. Value greater than `0` to `1`.
	MinProposerBalance float32 `protobuf:"fixed32,7,opt,name=minProposerBalance,proto3" json:"minProposerBalance,omitempty"`
	// Minimum balance required for a party to be able to cast a vote. Value greater than `0` to `1`.
	MinVoterBalance float32 `protobuf:"fixed32,8,opt,name=minVoterBalance,proto3" json:"minVoterBalance,omitempty"`
	// Scaling factors for all markets created via governance.
	MarginConfiguration  *ScalingFactors `protobuf:"bytes,9,opt,name=marginConfiguration,proto3" json:"marginConfiguration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NetworkConfiguration) Reset()         { *m = NetworkConfiguration{} }
func (m *NetworkConfiguration) String() string { return proto.CompactTextString(m) }
func (*NetworkConfiguration) ProtoMessage()    {}
func (*NetworkConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{0}
}

func (m *NetworkConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkConfiguration.Unmarshal(m, b)
}
func (m *NetworkConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkConfiguration.Marshal(b, m, deterministic)
}
func (m *NetworkConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkConfiguration.Merge(m, src)
}
func (m *NetworkConfiguration) XXX_Size() int {
	return xxx_messageInfo_NetworkConfiguration.Size(m)
}
func (m *NetworkConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkConfiguration proto.InternalMessageInfo

func (m *NetworkConfiguration) GetMinCloseInSeconds() int64 {
	if m != nil {
		return m.MinCloseInSeconds
	}
	return 0
}

func (m *NetworkConfiguration) GetMaxCloseInSeconds() int64 {
	if m != nil {
		return m.MaxCloseInSeconds
	}
	return 0
}

func (m *NetworkConfiguration) GetMinEnactInSeconds() int64 {
	if m != nil {
		return m.MinEnactInSeconds
	}
	return 0
}

func (m *NetworkConfiguration) GetMaxEnactInSeconds() int64 {
	if m != nil {
		return m.MaxEnactInSeconds
	}
	return 0
}

func (m *NetworkConfiguration) GetRequiredParticipation() float32 {
	if m != nil {
		return m.RequiredParticipation
	}
	return 0
}

func (m *NetworkConfiguration) GetRequiredMajority() float32 {
	if m != nil {
		return m.RequiredMajority
	}
	return 0
}

func (m *NetworkConfiguration) GetMinProposerBalance() float32 {
	if m != nil {
		return m.MinProposerBalance
	}
	return 0
}

func (m *NetworkConfiguration) GetMinVoterBalance() float32 {
	if m != nil {
		return m.MinVoterBalance
	}
	return 0
}

func (m *NetworkConfiguration) GetMarginConfiguration() *ScalingFactors {
	if m != nil {
		return m.MarginConfiguration
	}
	return nil
}

type UpdateMarket struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMarket) Reset()         { *m = UpdateMarket{} }
func (m *UpdateMarket) String() string { return proto.CompactTextString(m) }
func (*UpdateMarket) ProtoMessage()    {}
func (*UpdateMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{1}
}

func (m *UpdateMarket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMarket.Unmarshal(m, b)
}
func (m *UpdateMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMarket.Marshal(b, m, deterministic)
}
func (m *UpdateMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMarket.Merge(m, src)
}
func (m *UpdateMarket) XXX_Size() int {
	return xxx_messageInfo_UpdateMarket.Size(m)
}
func (m *UpdateMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMarket.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMarket proto.InternalMessageInfo

// Future product configuration
type FutureProduct struct {
	// Future product maturity (ISO8601/RFC3339 timestamp)
	Maturity string `protobuf:"bytes,1,opt,name=maturity,proto3" json:"maturity,omitempty"`
	// Product asset name
	Asset                string   `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FutureProduct) Reset()         { *m = FutureProduct{} }
func (m *FutureProduct) String() string { return proto.CompactTextString(m) }
func (*FutureProduct) ProtoMessage()    {}
func (*FutureProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{2}
}

func (m *FutureProduct) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FutureProduct.Unmarshal(m, b)
}
func (m *FutureProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FutureProduct.Marshal(b, m, deterministic)
}
func (m *FutureProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FutureProduct.Merge(m, src)
}
func (m *FutureProduct) XXX_Size() int {
	return xxx_messageInfo_FutureProduct.Size(m)
}
func (m *FutureProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_FutureProduct.DiscardUnknown(m)
}

var xxx_messageInfo_FutureProduct proto.InternalMessageInfo

func (m *FutureProduct) GetMaturity() string {
	if m != nil {
		return m.Maturity
	}
	return ""
}

func (m *FutureProduct) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

type InstrumentConfiguration struct {
	// Instrument name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Instrument code
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Base security used as the reference
	BaseName string `protobuf:"bytes,3,opt,name=baseName,proto3" json:"baseName,omitempty"`
	// Quote (secondary) security
	QuoteName string `protobuf:"bytes,4,opt,name=quoteName,proto3" json:"quoteName,omitempty"`
	// Product specification
	//
	// Types that are valid to be assigned to Product:
	//	*InstrumentConfiguration_Future
	Product              isInstrumentConfiguration_Product `protobuf_oneof:"product"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *InstrumentConfiguration) Reset()         { *m = InstrumentConfiguration{} }
func (m *InstrumentConfiguration) String() string { return proto.CompactTextString(m) }
func (*InstrumentConfiguration) ProtoMessage()    {}
func (*InstrumentConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{3}
}

func (m *InstrumentConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentConfiguration.Unmarshal(m, b)
}
func (m *InstrumentConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentConfiguration.Marshal(b, m, deterministic)
}
func (m *InstrumentConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentConfiguration.Merge(m, src)
}
func (m *InstrumentConfiguration) XXX_Size() int {
	return xxx_messageInfo_InstrumentConfiguration.Size(m)
}
func (m *InstrumentConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentConfiguration proto.InternalMessageInfo

func (m *InstrumentConfiguration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstrumentConfiguration) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *InstrumentConfiguration) GetBaseName() string {
	if m != nil {
		return m.BaseName
	}
	return ""
}

func (m *InstrumentConfiguration) GetQuoteName() string {
	if m != nil {
		return m.QuoteName
	}
	return ""
}

type isInstrumentConfiguration_Product interface {
	isInstrumentConfiguration_Product()
}

type InstrumentConfiguration_Future struct {
	Future *FutureProduct `protobuf:"bytes,100,opt,name=future,proto3,oneof"`
}

func (*InstrumentConfiguration_Future) isInstrumentConfiguration_Product() {}

func (m *InstrumentConfiguration) GetProduct() isInstrumentConfiguration_Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *InstrumentConfiguration) GetFuture() *FutureProduct {
	if x, ok := m.GetProduct().(*InstrumentConfiguration_Future); ok {
		return x.Future
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InstrumentConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InstrumentConfiguration_Future)(nil),
	}
}

type NewMarketConfiguration struct {
	// New market instrument configuration
	Instrument *InstrumentConfiguration `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// New market risk model parameters
	//
	// Types that are valid to be assigned to RiskParameters:
	//	*NewMarketConfiguration_Simple
	//	*NewMarketConfiguration_LogNormal
	RiskParameters isNewMarketConfiguration_RiskParameters `protobuf_oneof:"riskParameters"`
	// Decimal places used for the new market
	DecimalPlaces uint64 `protobuf:"varint,3,opt,name=decimalPlaces,proto3" json:"decimalPlaces,omitempty"`
	// Optional new market meta data, tags
	Metadata []string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// Trading mode
	//
	// Types that are valid to be assigned to TradingMode:
	//	*NewMarketConfiguration_Continuous
	//	*NewMarketConfiguration_Discrete
	TradingMode          isNewMarketConfiguration_TradingMode `protobuf_oneof:"tradingMode"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *NewMarketConfiguration) Reset()         { *m = NewMarketConfiguration{} }
func (m *NewMarketConfiguration) String() string { return proto.CompactTextString(m) }
func (*NewMarketConfiguration) ProtoMessage()    {}
func (*NewMarketConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{4}
}

func (m *NewMarketConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewMarketConfiguration.Unmarshal(m, b)
}
func (m *NewMarketConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewMarketConfiguration.Marshal(b, m, deterministic)
}
func (m *NewMarketConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewMarketConfiguration.Merge(m, src)
}
func (m *NewMarketConfiguration) XXX_Size() int {
	return xxx_messageInfo_NewMarketConfiguration.Size(m)
}
func (m *NewMarketConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_NewMarketConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_NewMarketConfiguration proto.InternalMessageInfo

func (m *NewMarketConfiguration) GetInstrument() *InstrumentConfiguration {
	if m != nil {
		return m.Instrument
	}
	return nil
}

type isNewMarketConfiguration_RiskParameters interface {
	isNewMarketConfiguration_RiskParameters()
}

type NewMarketConfiguration_Simple struct {
	Simple *SimpleModelParams `protobuf:"bytes,100,opt,name=simple,proto3,oneof"`
}

type NewMarketConfiguration_LogNormal struct {
	LogNormal *LogNormalRiskModel `protobuf:"bytes,101,opt,name=logNormal,proto3,oneof"`
}

func (*NewMarketConfiguration_Simple) isNewMarketConfiguration_RiskParameters() {}

func (*NewMarketConfiguration_LogNormal) isNewMarketConfiguration_RiskParameters() {}

func (m *NewMarketConfiguration) GetRiskParameters() isNewMarketConfiguration_RiskParameters {
	if m != nil {
		return m.RiskParameters
	}
	return nil
}

func (m *NewMarketConfiguration) GetSimple() *SimpleModelParams {
	if x, ok := m.GetRiskParameters().(*NewMarketConfiguration_Simple); ok {
		return x.Simple
	}
	return nil
}

func (m *NewMarketConfiguration) GetLogNormal() *LogNormalRiskModel {
	if x, ok := m.GetRiskParameters().(*NewMarketConfiguration_LogNormal); ok {
		return x.LogNormal
	}
	return nil
}

func (m *NewMarketConfiguration) GetDecimalPlaces() uint64 {
	if m != nil {
		return m.DecimalPlaces
	}
	return 0
}

func (m *NewMarketConfiguration) GetMetadata() []string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type isNewMarketConfiguration_TradingMode interface {
	isNewMarketConfiguration_TradingMode()
}

type NewMarketConfiguration_Continuous struct {
	Continuous *ContinuousTrading `protobuf:"bytes,200,opt,name=continuous,proto3,oneof"`
}

type NewMarketConfiguration_Discrete struct {
	Discrete *DiscreteTrading `protobuf:"bytes,201,opt,name=discrete,proto3,oneof"`
}

func (*NewMarketConfiguration_Continuous) isNewMarketConfiguration_TradingMode() {}

func (*NewMarketConfiguration_Discrete) isNewMarketConfiguration_TradingMode() {}

func (m *NewMarketConfiguration) GetTradingMode() isNewMarketConfiguration_TradingMode {
	if m != nil {
		return m.TradingMode
	}
	return nil
}

func (m *NewMarketConfiguration) GetContinuous() *ContinuousTrading {
	if x, ok := m.GetTradingMode().(*NewMarketConfiguration_Continuous); ok {
		return x.Continuous
	}
	return nil
}

func (m *NewMarketConfiguration) GetDiscrete() *DiscreteTrading {
	if x, ok := m.GetTradingMode().(*NewMarketConfiguration_Discrete); ok {
		return x.Discrete
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NewMarketConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NewMarketConfiguration_Simple)(nil),
		(*NewMarketConfiguration_LogNormal)(nil),
		(*NewMarketConfiguration_Continuous)(nil),
		(*NewMarketConfiguration_Discrete)(nil),
	}
}

type NewMarket struct {
	Changes              *NewMarketConfiguration `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *NewMarket) Reset()         { *m = NewMarket{} }
func (m *NewMarket) String() string { return proto.CompactTextString(m) }
func (*NewMarket) ProtoMessage()    {}
func (*NewMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{5}
}

func (m *NewMarket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewMarket.Unmarshal(m, b)
}
func (m *NewMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewMarket.Marshal(b, m, deterministic)
}
func (m *NewMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewMarket.Merge(m, src)
}
func (m *NewMarket) XXX_Size() int {
	return xxx_messageInfo_NewMarket.Size(m)
}
func (m *NewMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_NewMarket.DiscardUnknown(m)
}

var xxx_messageInfo_NewMarket proto.InternalMessageInfo

func (m *NewMarket) GetChanges() *NewMarketConfiguration {
	if m != nil {
		return m.Changes
	}
	return nil
}

type UpdateNetwork struct {
	Changes              *NetworkConfiguration `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateNetwork) Reset()         { *m = UpdateNetwork{} }
func (m *UpdateNetwork) String() string { return proto.CompactTextString(m) }
func (*UpdateNetwork) ProtoMessage()    {}
func (*UpdateNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{6}
}

func (m *UpdateNetwork) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateNetwork.Unmarshal(m, b)
}
func (m *UpdateNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateNetwork.Marshal(b, m, deterministic)
}
func (m *UpdateNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNetwork.Merge(m, src)
}
func (m *UpdateNetwork) XXX_Size() int {
	return xxx_messageInfo_UpdateNetwork.Size(m)
}
func (m *UpdateNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNetwork proto.InternalMessageInfo

func (m *UpdateNetwork) GetChanges() *NetworkConfiguration {
	if m != nil {
		return m.Changes
	}
	return nil
}

// To be implemented
type NewAsset struct {
	Changes              *AssetSource `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *NewAsset) Reset()         { *m = NewAsset{} }
func (m *NewAsset) String() string { return proto.CompactTextString(m) }
func (*NewAsset) ProtoMessage()    {}
func (*NewAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{7}
}

func (m *NewAsset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewAsset.Unmarshal(m, b)
}
func (m *NewAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewAsset.Marshal(b, m, deterministic)
}
func (m *NewAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewAsset.Merge(m, src)
}
func (m *NewAsset) XXX_Size() int {
	return xxx_messageInfo_NewAsset.Size(m)
}
func (m *NewAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_NewAsset.DiscardUnknown(m)
}

var xxx_messageInfo_NewAsset proto.InternalMessageInfo

func (m *NewAsset) GetChanges() *AssetSource {
	if m != nil {
		return m.Changes
	}
	return nil
}

type ProposalTerms struct {
	// Timestamp (Unix time in seconds) when voting closes for this proposal.
	// Constrained by `minCloseInSeconds` and `maxCloseInSeconds` network parameters.
	ClosingTimestamp int64 `protobuf:"varint,1,opt,name=closingTimestamp,proto3" json:"closingTimestamp,omitempty"`
	// Timestamp (Unix time in seconds) when proposal gets enacted (if passed).
	// Constrained by `minEnactInSeconds` and `maxEnactInSeconds` network parameters.
	EnactmentTimestamp  int64 `protobuf:"varint,2,opt,name=enactmentTimestamp,proto3" json:"enactmentTimestamp,omitempty"`
	ValidationTimestamp int64 `protobuf:"varint,5,opt,name=validationTimestamp,proto3" json:"validationTimestamp,omitempty"`
	// Actual changes being proposed
	//
	// Types that are valid to be assigned to Change:
	//	*ProposalTerms_UpdateMarket
	//	*ProposalTerms_NewMarket
	//	*ProposalTerms_UpdateNetwork
	//	*ProposalTerms_NewAsset
	Change               isProposalTerms_Change `protobuf_oneof:"change"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ProposalTerms) Reset()         { *m = ProposalTerms{} }
func (m *ProposalTerms) String() string { return proto.CompactTextString(m) }
func (*ProposalTerms) ProtoMessage()    {}
func (*ProposalTerms) Descriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{8}
}

func (m *ProposalTerms) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposalTerms.Unmarshal(m, b)
}
func (m *ProposalTerms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposalTerms.Marshal(b, m, deterministic)
}
func (m *ProposalTerms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalTerms.Merge(m, src)
}
func (m *ProposalTerms) XXX_Size() int {
	return xxx_messageInfo_ProposalTerms.Size(m)
}
func (m *ProposalTerms) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalTerms.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalTerms proto.InternalMessageInfo

func (m *ProposalTerms) GetClosingTimestamp() int64 {
	if m != nil {
		return m.ClosingTimestamp
	}
	return 0
}

func (m *ProposalTerms) GetEnactmentTimestamp() int64 {
	if m != nil {
		return m.EnactmentTimestamp
	}
	return 0
}

func (m *ProposalTerms) GetValidationTimestamp() int64 {
	if m != nil {
		return m.ValidationTimestamp
	}
	return 0
}

type isProposalTerms_Change interface {
	isProposalTerms_Change()
}

type ProposalTerms_UpdateMarket struct {
	UpdateMarket *UpdateMarket `protobuf:"bytes,101,opt,name=updateMarket,proto3,oneof"`
}

type ProposalTerms_NewMarket struct {
	NewMarket *NewMarket `protobuf:"bytes,102,opt,name=newMarket,proto3,oneof"`
}

type ProposalTerms_UpdateNetwork struct {
	UpdateNetwork *UpdateNetwork `protobuf:"bytes,103,opt,name=updateNetwork,proto3,oneof"`
}

type ProposalTerms_NewAsset struct {
	NewAsset *NewAsset `protobuf:"bytes,104,opt,name=newAsset,proto3,oneof"`
}

func (*ProposalTerms_UpdateMarket) isProposalTerms_Change() {}

func (*ProposalTerms_NewMarket) isProposalTerms_Change() {}

func (*ProposalTerms_UpdateNetwork) isProposalTerms_Change() {}

func (*ProposalTerms_NewAsset) isProposalTerms_Change() {}

func (m *ProposalTerms) GetChange() isProposalTerms_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *ProposalTerms) GetUpdateMarket() *UpdateMarket {
	if x, ok := m.GetChange().(*ProposalTerms_UpdateMarket); ok {
		return x.UpdateMarket
	}
	return nil
}

func (m *ProposalTerms) GetNewMarket() *NewMarket {
	if x, ok := m.GetChange().(*ProposalTerms_NewMarket); ok {
		return x.NewMarket
	}
	return nil
}

func (m *ProposalTerms) GetUpdateNetwork() *UpdateNetwork {
	if x, ok := m.GetChange().(*ProposalTerms_UpdateNetwork); ok {
		return x.UpdateNetwork
	}
	return nil
}

func (m *ProposalTerms) GetNewAsset() *NewAsset {
	if x, ok := m.GetChange().(*ProposalTerms_NewAsset); ok {
		return x.NewAsset
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProposalTerms) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProposalTerms_UpdateMarket)(nil),
		(*ProposalTerms_NewMarket)(nil),
		(*ProposalTerms_UpdateNetwork)(nil),
		(*ProposalTerms_NewAsset)(nil),
	}
}

type GovernanceData struct {
	// Proposal
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// All "yes" votes in favour of the proposal above.
	Yes []*Vote `protobuf:"bytes,2,rep,name=yes,proto3" json:"yes,omitempty"`
	// All "no" votes against the proposal above.
	No []*Vote `protobuf:"bytes,3,rep,name=no,proto3" json:"no,omitempty"`
	// All latest YES votes by party (guaranteed to be unique)
	YesParty map[string]*Vote `protobuf:"bytes,4,rep,name=yesParty,proto3" json:"yesParty,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All latest NO votes by party (unique)
	NoParty              map[string]*Vote `protobuf:"bytes,5,rep,name=noParty,proto3" json:"noParty,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GovernanceData) Reset()         { *m = GovernanceData{} }
func (m *GovernanceData) String() string { return proto.CompactTextString(m) }
func (*GovernanceData) ProtoMessage()    {}
func (*GovernanceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{9}
}

func (m *GovernanceData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GovernanceData.Unmarshal(m, b)
}
func (m *GovernanceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GovernanceData.Marshal(b, m, deterministic)
}
func (m *GovernanceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovernanceData.Merge(m, src)
}
func (m *GovernanceData) XXX_Size() int {
	return xxx_messageInfo_GovernanceData.Size(m)
}
func (m *GovernanceData) XXX_DiscardUnknown() {
	xxx_messageInfo_GovernanceData.DiscardUnknown(m)
}

var xxx_messageInfo_GovernanceData proto.InternalMessageInfo

func (m *GovernanceData) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *GovernanceData) GetYes() []*Vote {
	if m != nil {
		return m.Yes
	}
	return nil
}

func (m *GovernanceData) GetNo() []*Vote {
	if m != nil {
		return m.No
	}
	return nil
}

func (m *GovernanceData) GetYesParty() map[string]*Vote {
	if m != nil {
		return m.YesParty
	}
	return nil
}

func (m *GovernanceData) GetNoParty() map[string]*Vote {
	if m != nil {
		return m.NoParty
	}
	return nil
}

type Proposal struct {
	// Proposal unique identifier.
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Proposal reference.
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	// Proposal author, identifier of the party submitting the proposal.
	PartyID string `protobuf:"bytes,3,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Proposal state (see Proposal.State definition)
	State Proposal_State `protobuf:"varint,4,opt,name=state,proto3,enum=vega.Proposal_State" json:"state,omitempty"`
	// Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network.
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Proposal configuration and the actual change that is meant to be executed when proposal is enacted.
	Terms *ProposalTerms `protobuf:"bytes,6,opt,name=terms,proto3" json:"terms,omitempty"`
	// A reason for the current state of the proposal
	// this may be set in case of REJECTED and FAILED status
	Reason               ProposalError `protobuf:"varint,7,opt,name=reason,proto3,enum=vega.ProposalError" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{10}
}

func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Proposal.Unmarshal(m, b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return xxx_messageInfo_Proposal.Size(m)
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Proposal) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *Proposal) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *Proposal) GetState() Proposal_State {
	if m != nil {
		return m.State
	}
	return Proposal_STATE_UNSPECIFIED
}

func (m *Proposal) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Proposal) GetTerms() *ProposalTerms {
	if m != nil {
		return m.Terms
	}
	return nil
}

func (m *Proposal) GetReason() ProposalError {
	if m != nil {
		return m.Reason
	}
	return ProposalError_PROPOSAL_ERROR_UNSPECIFIED
}

type Vote struct {
	// Voter's party identifier.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Actual vote.
	Value Vote_Value `protobuf:"varint,2,opt,name=value,proto3,enum=vega.Vote_Value" json:"value,omitempty"`
	// Identifier of the proposal being voted on.
	ProposalID string `protobuf:"bytes,3,opt,name=proposalID,proto3" json:"proposalID,omitempty"`
	// Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network.
	Timestamp            int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_c891e73c7d2524a3, []int{11}
}

func (m *Vote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vote.Unmarshal(m, b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return xxx_messageInfo_Vote.Size(m)
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *Vote) GetValue() Vote_Value {
	if m != nil {
		return m.Value
	}
	return Vote_VALUE_UNSPECIFIED
}

func (m *Vote) GetProposalID() string {
	if m != nil {
		return m.ProposalID
	}
	return ""
}

func (m *Vote) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("vega.ProposalError", ProposalError_name, ProposalError_value)
	proto.RegisterEnum("vega.Proposal_State", Proposal_State_name, Proposal_State_value)
	proto.RegisterEnum("vega.Vote_Value", Vote_Value_name, Vote_Value_value)
	proto.RegisterType((*NetworkConfiguration)(nil), "vega.NetworkConfiguration")
	proto.RegisterType((*UpdateMarket)(nil), "vega.UpdateMarket")
	proto.RegisterType((*FutureProduct)(nil), "vega.FutureProduct")
	proto.RegisterType((*InstrumentConfiguration)(nil), "vega.InstrumentConfiguration")
	proto.RegisterType((*NewMarketConfiguration)(nil), "vega.NewMarketConfiguration")
	proto.RegisterType((*NewMarket)(nil), "vega.NewMarket")
	proto.RegisterType((*UpdateNetwork)(nil), "vega.UpdateNetwork")
	proto.RegisterType((*NewAsset)(nil), "vega.NewAsset")
	proto.RegisterType((*ProposalTerms)(nil), "vega.ProposalTerms")
	proto.RegisterType((*GovernanceData)(nil), "vega.GovernanceData")
	proto.RegisterMapType((map[string]*Vote)(nil), "vega.GovernanceData.NoPartyEntry")
	proto.RegisterMapType((map[string]*Vote)(nil), "vega.GovernanceData.YesPartyEntry")
	proto.RegisterType((*Proposal)(nil), "vega.Proposal")
	proto.RegisterType((*Vote)(nil), "vega.Vote")
}

func init() { proto.RegisterFile("proto/governance.proto", fileDescriptor_c891e73c7d2524a3) }

var fileDescriptor_c891e73c7d2524a3 = []byte{
	// 1576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcf, 0x6f, 0xe3, 0xc6,
	0x15, 0x36, 0xf5, 0xcb, 0xd2, 0xb3, 0xa5, 0x70, 0x67, 0xb3, 0x89, 0xaa, 0x6e, 0xb2, 0x8e, 0xd0,
	0xa6, 0xce, 0x26, 0x96, 0x1a, 0x6f, 0x10, 0x2c, 0xb2, 0x45, 0x0a, 0x59, 0xa4, 0xd6, 0x6c, 0x2c,
	0x52, 0x1d, 0x52, 0x6e, 0xb7, 0x17, 0x61, 0x96, 0x9a, 0xd5, 0xb2, 0x16, 0x39, 0x0a, 0x49, 0xad,
	0xeb, 0x7b, 0x0f, 0xbd, 0xf4, 0xda, 0x3f, 0xa2, 0x87, 0xfe, 0x09, 0x3d, 0xb7, 0x97, 0x1e, 0x0a,
	0xf4, 0x56, 0x20, 0x40, 0xfe, 0x92, 0x62, 0x66, 0x48, 0x4a, 0xa4, 0x94, 0x06, 0xc8, 0xc9, 0xd2,
	0xf7, 0xbe, 0xef, 0xcd, 0x9b, 0xf9, 0xe6, 0xbd, 0x91, 0xe1, 0x9d, 0x55, 0xc8, 0x62, 0xd6, 0x5f,
	0xb0, 0x37, 0x34, 0x0c, 0x48, 0xe0, 0xd2, 0x9e, 0x00, 0x50, 0xe5, 0x0d, 0x5d, 0x90, 0xce, 0xe7,
	0x0b, 0x2f, 0x7e, 0xbd, 0x7e, 0xd9, 0x73, 0x99, 0xdf, 0xf7, 0x6f, 0xbd, 0xf8, 0x86, 0xdd, 0xf6,
	0x17, 0xec, 0x4c, 0x50, 0xce, 0xde, 0x90, 0xa5, 0x37, 0x27, 0x31, 0x0b, 0xa3, 0x7e, 0xf6, 0x51,
	0xaa, 0x3b, 0xf7, 0x65, 0x56, 0x9f, 0x84, 0x37, 0x34, 0x8e, 0x12, 0x10, 0x49, 0x90, 0x44, 0x51,
	0x86, 0x75, 0xff, 0x5d, 0x86, 0xb7, 0x4d, 0x1a, 0xdf, 0xb2, 0xf0, 0x66, 0xc8, 0x82, 0x57, 0xde,
	0x62, 0x1d, 0x92, 0xd8, 0x63, 0x01, 0xfa, 0x04, 0xee, 0xf9, 0x5e, 0x30, 0x5c, 0xb2, 0x88, 0x1a,
	0x81, 0x4d, 0x5d, 0x16, 0xcc, 0xa3, 0xb6, 0x72, 0xa2, 0x9c, 0x96, 0xf1, 0x6e, 0x40, 0xb0, 0xc9,
	0x1f, 0x0a, 0xec, 0x52, 0xc2, 0x2e, 0x06, 0x92, 0xdc, 0x7a, 0x40, 0xdc, 0x78, 0xc3, 0x2e, 0x67,
	0xb9, 0xf3, 0x81, 0x24, 0x77, 0x81, 0x5d, 0xc9, 0x72, 0x17, 0xd8, 0x9f, 0xc1, 0x83, 0x90, 0x7e,
	0xbd, 0xf6, 0x42, 0x3a, 0x9f, 0x90, 0x30, 0xf6, 0x5c, 0x6f, 0x25, 0x36, 0xd4, 0xae, 0x9e, 0x28,
	0xa7, 0x25, 0xbc, 0x3f, 0x88, 0x1e, 0x83, 0x9a, 0x06, 0xc6, 0xe4, 0xf7, 0x2c, 0xf4, 0xe2, 0xbb,
	0x76, 0x4d, 0x08, 0x76, 0x70, 0xd4, 0x03, 0xe4, 0x7b, 0xc1, 0x24, 0x64, 0x2b, 0x16, 0xd1, 0xf0,
	0x82, 0x2c, 0xb9, 0x6b, 0xed, 0x43, 0xc1, 0xde, 0x13, 0x41, 0xa7, 0xf0, 0x96, 0xef, 0x05, 0xd7,
	0x2c, 0xde, 0x90, 0xeb, 0x82, 0x5c, 0x84, 0xd1, 0x08, 0xee, 0xfb, 0x24, 0x5c, 0x78, 0x41, 0xce,
	0x8a, 0x76, 0xe3, 0x44, 0x39, 0x3d, 0x3a, 0x7f, 0xbb, 0xc7, 0x6f, 0x44, 0xcf, 0x76, 0xc9, 0xd2,
	0x0b, 0x16, 0x23, 0xe2, 0x72, 0xe3, 0xf1, 0x3e, 0x41, 0xb7, 0x05, 0xc7, 0xd3, 0xd5, 0x9c, 0xc4,
	0x74, 0x2c, 0xfc, 0xef, 0xfe, 0x1a, 0x9a, 0xa3, 0x75, 0xbc, 0x0e, 0xe9, 0x24, 0x64, 0xf3, 0xb5,
	0x1b, 0xa3, 0x2e, 0xd4, 0x7d, 0x12, 0xaf, 0xc5, 0x36, 0xb9, 0xa7, 0x8d, 0x8b, 0xda, 0xb7, 0xdf,
	0x3c, 0x2a, 0xfd, 0x56, 0xc1, 0x19, 0x8e, 0x1e, 0x42, 0x55, 0xdc, 0x14, 0x61, 0xe3, 0x86, 0x20,
	0xc1, 0xee, 0x7f, 0x14, 0x78, 0xd7, 0x08, 0xa2, 0x38, 0x5c, 0xfb, 0x34, 0x88, 0xf3, 0x57, 0xa7,
	0x03, 0x95, 0x80, 0xf8, 0xb4, 0x90, 0x59, 0x60, 0x3c, 0xe6, 0xb2, 0x39, 0x2d, 0x24, 0x15, 0x18,
	0xaf, 0xea, 0x25, 0x89, 0xa8, 0xc9, 0xb5, 0xe5, 0x7c, 0x55, 0x29, 0x8e, 0x7e, 0x02, 0x8d, 0xaf,
	0xd7, 0x2c, 0x96, 0xa4, 0x4a, 0x8e, 0xb4, 0x09, 0xa0, 0x33, 0xa8, 0xbd, 0x12, 0x1b, 0x6e, 0xcf,
	0xc5, 0xd9, 0xdd, 0x97, 0x67, 0x97, 0x3b, 0x84, 0xcb, 0x03, 0x9c, 0x90, 0x2e, 0x1a, 0x70, 0xb8,
	0x92, 0x60, 0xf7, 0xaf, 0x65, 0x78, 0xc7, 0xa4, 0xb7, 0xf2, 0xe0, 0xf2, 0xdb, 0xd2, 0x01, 0xbc,
	0x6c, 0xc7, 0x62, 0x73, 0x47, 0xe7, 0xef, 0xc9, 0xc4, 0xdf, 0x71, 0x12, 0xb2, 0xb4, 0x13, 0x05,
	0x6f, 0x09, 0xd1, 0xa7, 0x50, 0x8b, 0x3c, 0x7f, 0xb5, 0x4c, 0x6b, 0x7b, 0x37, 0xf1, 0x55, 0x60,
	0x63, 0x36, 0xa7, 0xcb, 0x09, 0x09, 0x89, 0x1f, 0xf1, 0xfa, 0x24, 0x11, 0x3d, 0x85, 0xc6, 0x92,
	0x2d, 0x4c, 0x16, 0xfa, 0x64, 0xd9, 0xa6, 0x42, 0xd5, 0x96, 0xaa, 0xab, 0x14, 0xc6, 0x5e, 0x74,
	0x23, 0xc4, 0x97, 0x07, 0x78, 0x43, 0x46, 0x67, 0xd0, 0x9c, 0x53, 0xd7, 0xf3, 0xc9, 0x72, 0xb2,
	0x24, 0x2e, 0x95, 0x5d, 0x56, 0xb9, 0x38, 0xfc, 0xf6, 0x9b, 0x47, 0xe5, 0xf6, 0x5f, 0x14, 0x9c,
	0x8f, 0xa2, 0x0e, 0xd4, 0x7d, 0x1a, 0x93, 0x39, 0x89, 0x49, 0xbb, 0x72, 0x52, 0x3e, 0x6d, 0xe0,
	0xec, 0x3b, 0xfa, 0x02, 0xc0, 0x65, 0x41, 0xec, 0x05, 0x6b, 0xb6, 0x8e, 0xda, 0xff, 0x50, 0xb6,
	0x8b, 0x1f, 0x66, 0x01, 0x27, 0x24, 0x73, 0x2f, 0x58, 0x5c, 0x2a, 0x78, 0x8b, 0x8d, 0x3e, 0x83,
	0xfa, 0xdc, 0x8b, 0xdc, 0x90, 0xc6, 0xb4, 0xfd, 0x4f, 0xa9, 0x7c, 0x20, 0x95, 0x5a, 0x02, 0x6f,
	0x74, 0x19, 0xf3, 0x42, 0x85, 0x56, 0xe8, 0x45, 0x37, 0xe2, 0x38, 0x68, 0x4c, 0xc3, 0xe8, 0xa2,
	0x09, 0x47, 0xb1, 0x24, 0xf2, 0xbd, 0x76, 0xbf, 0x82, 0x46, 0xe6, 0x15, 0xfa, 0x12, 0x0e, 0xdd,
	0xd7, 0x24, 0x58, 0xd0, 0x28, 0xf1, 0xe6, 0xa1, 0x5c, 0x61, 0xbf, 0x9b, 0x99, 0x35, 0xa9, 0xa8,
	0x3b, 0x86, 0xa6, 0x6c, 0x9a, 0x64, 0x1c, 0xa2, 0x5f, 0x14, 0x13, 0x76, 0xd2, 0x84, 0xbb, 0xe3,
	0x72, 0x37, 0xdd, 0x2f, 0xa1, 0x6e, 0xd2, 0xdb, 0x01, 0x6f, 0x16, 0xf4, 0xa4, 0x98, 0xe9, 0x9e,
	0xcc, 0x24, 0xa2, 0x36, 0x5b, 0x87, 0x2e, 0xdd, 0x4d, 0xf0, 0xe7, 0x32, 0x34, 0xe5, 0x28, 0x21,
	0x4b, 0x87, 0x86, 0x7e, 0x84, 0xce, 0x41, 0x75, 0x97, 0x2c, 0xf2, 0x82, 0x85, 0xe3, 0xf9, 0x34,
	0x8a, 0x89, 0xbf, 0x92, 0x13, 0x59, 0x8a, 0xd5, 0x03, 0xbc, 0x13, 0x47, 0x9f, 0x03, 0xa2, 0x7c,
	0x40, 0xf2, 0xab, 0xb7, 0x51, 0x95, 0x72, 0xaa, 0x3d, 0x0c, 0xf4, 0x73, 0xb8, 0x9f, 0xbc, 0x29,
	0x1e, 0x0b, 0x36, 0xc2, 0xaa, 0x18, 0xbb, 0xfb, 0x42, 0xe8, 0x29, 0x1c, 0xaf, 0xb7, 0x86, 0x4e,
	0x72, 0x4f, 0x91, 0xdc, 0xe9, 0xf6, 0x38, 0xba, 0x3c, 0xc0, 0x39, 0x26, 0xea, 0x43, 0x23, 0x48,
	0x4d, 0x6a, 0xbf, 0x12, 0xb2, 0xb7, 0x0a, 0xde, 0xf1, 0x5b, 0x9d, 0x71, 0xd0, 0x33, 0x68, 0xae,
	0xb7, 0xad, 0x6a, 0x2f, 0xb6, 0xbb, 0x3c, 0xe7, 0xe2, 0xe5, 0x01, 0xce, 0x73, 0xd1, 0x27, 0x50,
	0x0f, 0x12, 0x63, 0xda, 0xaf, 0x85, 0xae, 0x95, 0x2d, 0x26, 0xd0, 0xcb, 0x03, 0x9c, 0x31, 0x2e,
	0xea, 0x50, 0x93, 0x86, 0x74, 0xff, 0x58, 0x86, 0xd6, 0xf3, 0xec, 0x95, 0xd6, 0x78, 0x4b, 0x3c,
	0x86, 0xfa, 0x2a, 0x71, 0x28, 0x31, 0x36, 0x49, 0x95, 0xfa, 0x86, 0xb3, 0x38, 0x7a, 0x08, 0xe5,
	0x3b, 0xca, 0xdf, 0xc4, 0xf2, 0xe9, 0xd1, 0x39, 0x48, 0x1a, 0x1f, 0xfe, 0x98, 0xc3, 0xa8, 0x03,
	0xa5, 0x80, 0xb5, 0xcb, 0x3b, 0xc1, 0x52, 0xc0, 0xd0, 0x97, 0x50, 0xbf, 0xa3, 0x11, 0x7f, 0xaf,
	0xee, 0x44, 0x53, 0x1e, 0x9d, 0x77, 0x25, 0x23, 0x5f, 0x4d, 0xef, 0x45, 0x42, 0xd2, 0x83, 0x38,
	0xbc, 0xc3, 0x99, 0x06, 0x3d, 0x83, 0xc3, 0x80, 0x49, 0x79, 0x55, 0xc8, 0x3f, 0xd8, 0x2b, 0x37,
	0xd9, 0x96, 0x3a, 0x55, 0x74, 0x9e, 0x43, 0x33, 0x97, 0x17, 0xa9, 0x50, 0xbe, 0xa1, 0xc9, 0xab,
	0x81, 0xf9, 0x47, 0x74, 0x02, 0xd5, 0x37, 0x64, 0xb9, 0x96, 0x33, 0x3d, 0x5f, 0xbe, 0x0c, 0x7c,
	0x51, 0x7a, 0xaa, 0x74, 0x46, 0x70, 0xbc, 0xbd, 0xc2, 0x0f, 0xcd, 0xd3, 0xfd, 0x7b, 0x19, 0xea,
	0xe9, 0xf1, 0xa2, 0x16, 0x94, 0x0c, 0x2d, 0xc9, 0x51, 0x32, 0x34, 0xf4, 0x10, 0x1a, 0x21, 0x7d,
	0x45, 0x43, 0xca, 0x1f, 0x59, 0xf1, 0xc4, 0xe0, 0x0d, 0x80, 0x4e, 0xe0, 0x70, 0xc5, 0x0b, 0x30,
	0xb4, 0xc2, 0xf3, 0x92, 0xc2, 0xe8, 0x09, 0x54, 0xa3, 0x98, 0xc4, 0xf2, 0x65, 0x69, 0xa5, 0x4f,
	0x6e, 0xba, 0x5c, 0xcf, 0xe6, 0x31, 0x39, 0x3c, 0xff, 0xa4, 0x28, 0x58, 0x72, 0xf9, 0xa2, 0x71,
	0xa1, 0x41, 0x36, 0x00, 0xfa, 0x14, 0xaa, 0x31, 0xef, 0x5e, 0xf1, 0x73, 0x22, 0xbb, 0xa3, 0xb9,
	0xc6, 0xce, 0x7a, 0x5f, 0x32, 0xd1, 0xc7, 0x50, 0x0b, 0x29, 0x89, 0x58, 0x20, 0x7e, 0x54, 0xb4,
	0x8a, 0x1a, 0x3d, 0x0c, 0x59, 0x88, 0x13, 0x4a, 0xf7, 0x6f, 0x0a, 0x54, 0x45, 0x5d, 0xe8, 0x01,
	0xdc, 0xb3, 0x9d, 0x81, 0xa3, 0xcf, 0xa6, 0xa6, 0x3d, 0xd1, 0x87, 0xc6, 0xc8, 0xd0, 0x35, 0xf5,
	0x00, 0xa9, 0x70, 0x2c, 0xe1, 0xd1, 0xc0, 0xb8, 0xd2, 0x35, 0x55, 0x41, 0x2d, 0x00, 0x89, 0x58,
	0x13, 0xdd, 0x54, 0x4b, 0x1b, 0xc6, 0x64, 0x60, 0xdb, 0xba, 0xa6, 0x96, 0x11, 0x82, 0x96, 0x44,
	0xb0, 0xfe, 0x2b, 0x7d, 0xe8, 0xe8, 0x9a, 0x5a, 0xd9, 0x60, 0x9a, 0x3e, 0xbc, 0x32, 0x4c, 0x5d,
	0x53, 0xab, 0xe8, 0x1e, 0x34, 0x25, 0xa6, 0x9b, 0x03, 0x41, 0xab, 0xa1, 0x47, 0xf0, 0x63, 0x09,
	0xfd, 0x66, 0x60, 0x38, 0x86, 0xf9, 0x7c, 0x36, 0xb2, 0xf0, 0xcc, 0xb4, 0x34, 0x7d, 0x76, 0x6d,
	0x39, 0xba, 0x7a, 0xd8, 0xfd, 0xaf, 0x02, 0x15, 0x6e, 0xea, 0xb6, 0x1d, 0xca, 0x7e, 0x3b, 0xfa,
	0xdb, 0x37, 0xa2, 0x75, 0xae, 0x6e, 0x6e, 0x44, 0xef, 0x9a, 0xe3, 0x5b, 0x56, 0x08, 0x1e, 0xfa,
	0x10, 0x20, 0x6d, 0xb8, 0x1d, 0x93, 0xb7, 0x22, 0x79, 0xcb, 0x2a, 0x05, 0xcb, 0xba, 0xcf, 0xa0,
	0x2a, 0xd2, 0xf3, 0x13, 0xbd, 0x1e, 0x5c, 0x4d, 0x8b, 0x27, 0x7a, 0x0c, 0x75, 0x09, 0x9b, 0x96,
	0xaa, 0xa0, 0x26, 0x34, 0xe4, 0xb7, 0x17, 0xba, 0xad, 0x96, 0x1e, 0xff, 0xab, 0xb2, 0x19, 0xdb,
	0xc2, 0x29, 0xf4, 0x3e, 0x74, 0x26, 0xd8, 0x9a, 0x58, 0xf6, 0xe0, 0x6a, 0xa6, 0x63, 0x6c, 0xe1,
	0x42, 0xba, 0x0f, 0xa1, 0x5b, 0x88, 0x0f, 0xaf, 0x2c, 0x5b, 0x9f, 0x39, 0xc6, 0x58, 0x9f, 0x39,
	0x96, 0x35, 0xb3, 0x2d, 0xcb, 0x54, 0x95, 0xef, 0xe7, 0x5d, 0x0d, 0x1c, 0x5d, 0x2d, 0xed, 0xe1,
	0x09, 0x77, 0x0a, 0xf9, 0xca, 0xdf, 0xcf, 0x13, 0xf9, 0x2a, 0x7b, 0x78, 0x86, 0x69, 0x4f, 0x47,
	0x23, 0x63, 0x68, 0xe8, 0xa6, 0x33, 0x73, 0xac, 0xaf, 0x74, 0xd3, 0x56, 0xab, 0xa8, 0x07, 0x8f,
	0x77, 0x78, 0xd7, 0x83, 0x2b, 0x43, 0xe3, 0x7c, 0x07, 0x4f, 0xc7, 0x9c, 0x6d, 0xeb, 0xc3, 0x29,
	0x36, 0x9c, 0x17, 0x6a, 0x0d, 0xbd, 0x07, 0x3f, 0x2a, 0xf0, 0x4d, 0x6b, 0x36, 0xc1, 0x96, 0x36,
	0x1d, 0x3a, 0xea, 0xe1, 0x9e, 0x65, 0xa7, 0xa6, 0x3d, 0x9d, 0x4c, 0x2c, 0xec, 0xe8, 0x5a, 0xc6,
	0xab, 0xa3, 0x27, 0xd0, 0xff, 0x8e, 0x65, 0x47, 0x53, 0x67, 0x8a, 0xf5, 0x94, 0x2a, 0xf6, 0x65,
	0x3b, 0x83, 0xf1, 0x44, 0x6d, 0xa0, 0x33, 0xf8, 0xa8, 0x20, 0x4a, 0x59, 0xe3, 0x81, 0x23, 0x0a,
	0x9c, 0x19, 0x76, 0xda, 0x0f, 0x80, 0xba, 0xf0, 0xfe, 0x6e, 0xa9, 0x0e, 0x1e, 0x68, 0xfc, 0x82,
	0x8f, 0x2d, 0x4d, 0x57, 0x8f, 0xd0, 0xc7, 0xf0, 0xb3, 0xff, 0x53, 0x6f, 0x8e, 0x7c, 0x8c, 0x3e,
	0x82, 0x9f, 0xee, 0x24, 0xe4, 0x2d, 0xc2, 0xeb, 0x1e, 0x38, 0x86, 0x65, 0xa6, 0xdd, 0xda, 0xbc,
	0xf8, 0xe0, 0x77, 0x8f, 0xf8, 0xaf, 0x63, 0x71, 0xf7, 0xc5, 0xff, 0x6c, 0x2e, 0x5b, 0xf6, 0x3c,
	0xd6, 0xe7, 0xdf, 0xfb, 0x02, 0x78, 0x59, 0x13, 0x7f, 0x9e, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0x9d, 0xc6, 0x32, 0x37, 0x4c, 0x0e, 0x00, 0x00,
}
