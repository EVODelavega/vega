syntax = "proto3";

package vega;
option go_package = "code.vegaprotocol.io/vega/proto";

import "github.com/mwitkow/go-proto-validators/validator.proto";

// here begin trading modes

message ContinuousTrading {
  uint64 tickSize = 1;
}

message DiscreteTrading {
  // Duration in nanoseconds, maximum 1 month (2592000000000000 ns)
  int64 durationNs = 1 [(validator.field) = {int_gt: 0, int_lt: 2592000000000000}];
  uint64 tickSize = 2;
}

// here end trading modes

// here begin products

message Future {
  string maturity = 1;
  string asset = 2;
  oneof oracle {
   EthereumEvent ethereumEvent = 100;
  }
}

// here end products

// here begin oracles

message EthereumEvent {
  string contractID = 1;
  string event = 2;
  uint64 value = 3;
}

// here ends oracles

message InstrumentMetadata {
  repeated string tags = 1;
}

message Instrument {
  string id = 1;
  string code = 2;
  string name = 3;
  string baseName = 4;
  string quoteName = 5;
  InstrumentMetadata metadata = 6;
  uint64 initialMarkPrice = 7;
  oneof product {
    Future future = 100;
  }
}

// here start risk models

message LogNormalRiskModel {
  double riskAversionParameter = 1;
  double tau = 2;
  LogNormalModelParams params = 3;
}

message LogNormalModelParams {
  double mu = 1;
  double r = 2;
  double sigma = 3;
}

message SimpleRiskModel {
  SimpleModelParams params = 1;
}

message SimpleModelParams {
  double factorLong = 1;
  double factorShort = 2;
}

message ExternalRiskModel {
  string name = 1;
  string socket = 2;
  map<string, string> config = 3;
}

message ScalingFactors {
  double searchLevel = 1;
  double initialMargin = 2;
  double collateralRelease = 3;
}

message MarginCalculator {
  ScalingFactors scalingFactors = 1;
}

message TradableInstrument {
  Instrument instrument = 1;
  MarginCalculator marginCalculator = 2;
  oneof riskModel {
    LogNormalRiskModel logNormalRiskModel = 100;
    ExternalRiskModel externalRiskModel = 101;
    SimpleRiskModel simpleRiskModel = 102;
  }
}

message Market {
  string id = 1;

  TradableInstrument tradableInstrument = 2;

  // the number of decimal places that a price must be shifted by in order to get a correct price denominated in the currency of the Market. ie `realPrice = price / 10^decimalPlaces`
  uint64 decimalPlaces = 3;

  oneof tradingMode {
    ContinuousTrading continuous = 100;
    DiscreteTrading discrete = 101;
  }
}
