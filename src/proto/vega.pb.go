// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/vega.proto

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	proto/vega.proto

It has these top-level messages:
	Order
	OrderConfirmation
	Trade
	TradeSet
	MarketData
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Side int32

const (
	Side_Buy  Side = 0
	Side_Sell Side = 1
)

var Side_name = map[int32]string{
	0: "Buy",
	1: "Sell",
}
var Side_value = map[string]int32{
	"Buy":  0,
	"Sell": 1,
}

func (x Side) String() string {
	return proto.EnumName(Side_name, int32(x))
}
func (Side) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type OrderError int32

const (
	OrderError_NONE              OrderError = 0
	OrderError_INVALID_MARKET_ID OrderError = 1
)

var OrderError_name = map[int32]string{
	0: "NONE",
	1: "INVALID_MARKET_ID",
}
var OrderError_value = map[string]int32{
	"NONE":              0,
	"INVALID_MARKET_ID": 1,
}

func (x OrderError) String() string {
	return proto.EnumName(OrderError_name, int32(x))
}
func (OrderError) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Order_Type int32

const (
	Order_GTC Order_Type = 0
	Order_GTT Order_Type = 1
	Order_ENE Order_Type = 2
	Order_FOK Order_Type = 3
)

var Order_Type_name = map[int32]string{
	0: "GTC",
	1: "GTT",
	2: "ENE",
	3: "FOK",
}
var Order_Type_value = map[string]int32{
	"GTC": 0,
	"GTT": 1,
	"ENE": 2,
	"FOK": 3,
}

func (x Order_Type) String() string {
	return proto.EnumName(Order_Type_name, int32(x))
}
func (Order_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Order struct {
	Market    string     `protobuf:"bytes,1,opt,name=market" json:"market,omitempty"`
	Party     string     `protobuf:"bytes,2,opt,name=party" json:"party,omitempty"`
	Side      Side       `protobuf:"varint,3,opt,name=side,enum=vega.Side" json:"side,omitempty"`
	Price     uint64     `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	Size      uint64     `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Remaining uint64     `protobuf:"varint,6,opt,name=remaining" json:"remaining,omitempty"`
	Type      Order_Type `protobuf:"varint,7,opt,name=type,enum=vega.Order_Type" json:"type,omitempty"`
	Timestamp uint64     `protobuf:"varint,8,opt,name=timestamp" json:"timestamp,omitempty"`
	Id        string     `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Order) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *Order) GetParty() string {
	if m != nil {
		return m.Party
	}
	return ""
}

func (m *Order) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_Buy
}

func (m *Order) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Order) GetRemaining() uint64 {
	if m != nil {
		return m.Remaining
	}
	return 0
}

func (m *Order) GetType() Order_Type {
	if m != nil {
		return m.Type
	}
	return Order_GTC
}

func (m *Order) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type OrderConfirmation struct {
	Order  *Order   `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
	Trades []*Trade `protobuf:"bytes,2,rep,name=trades" json:"trades,omitempty"`
}

func (m *OrderConfirmation) Reset()                    { *m = OrderConfirmation{} }
func (m *OrderConfirmation) String() string            { return proto.CompactTextString(m) }
func (*OrderConfirmation) ProtoMessage()               {}
func (*OrderConfirmation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OrderConfirmation) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *OrderConfirmation) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type Trade struct {
	Market    string `protobuf:"bytes,1,opt,name=market" json:"market,omitempty"`
	Price     uint64 `protobuf:"varint,2,opt,name=price" json:"price,omitempty"`
	Size      uint64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Buyer     string `protobuf:"bytes,4,opt,name=buyer" json:"buyer,omitempty"`
	Seller    string `protobuf:"bytes,5,opt,name=seller" json:"seller,omitempty"`
	Aggressor Side   `protobuf:"varint,6,opt,name=aggressor,enum=vega.Side" json:"aggressor,omitempty"`
}

func (m *Trade) Reset()                    { *m = Trade{} }
func (m *Trade) String() string            { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()               {}
func (*Trade) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Trade) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *Trade) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trade) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Trade) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *Trade) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *Trade) GetAggressor() Side {
	if m != nil {
		return m.Aggressor
	}
	return Side_Buy
}

type TradeSet struct {
	Trades []*Trade `protobuf:"bytes,1,rep,name=trades" json:"trades,omitempty"`
}

func (m *TradeSet) Reset()                    { *m = TradeSet{} }
func (m *TradeSet) String() string            { return proto.CompactTextString(m) }
func (*TradeSet) ProtoMessage()               {}
func (*TradeSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TradeSet) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type MarketData struct {
	BestBid         uint64 `protobuf:"varint,1,opt,name=bestBid" json:"bestBid,omitempty"`
	BestOffer       uint64 `protobuf:"varint,2,opt,name=bestOffer" json:"bestOffer,omitempty"`
	LastTradedPrice uint64 `protobuf:"varint,3,opt,name=lastTradedPrice" json:"lastTradedPrice,omitempty"`
}

func (m *MarketData) Reset()                    { *m = MarketData{} }
func (m *MarketData) String() string            { return proto.CompactTextString(m) }
func (*MarketData) ProtoMessage()               {}
func (*MarketData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MarketData) GetBestBid() uint64 {
	if m != nil {
		return m.BestBid
	}
	return 0
}

func (m *MarketData) GetBestOffer() uint64 {
	if m != nil {
		return m.BestOffer
	}
	return 0
}

func (m *MarketData) GetLastTradedPrice() uint64 {
	if m != nil {
		return m.LastTradedPrice
	}
	return 0
}

func init() {
	proto.RegisterType((*Order)(nil), "vega.Order")
	proto.RegisterType((*OrderConfirmation)(nil), "vega.OrderConfirmation")
	proto.RegisterType((*Trade)(nil), "vega.Trade")
	proto.RegisterType((*TradeSet)(nil), "vega.TradeSet")
	proto.RegisterType((*MarketData)(nil), "vega.MarketData")
	proto.RegisterEnum("vega.Side", Side_name, Side_value)
	proto.RegisterEnum("vega.OrderError", OrderError_name, OrderError_value)
	proto.RegisterEnum("vega.Order_Type", Order_Type_name, Order_Type_value)
}

func init() { proto.RegisterFile("proto/vega.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x8b, 0x13, 0x41,
	0x10, 0xcd, 0x7c, 0x25, 0x99, 0x5a, 0x58, 0x7b, 0x9b, 0x55, 0x5a, 0x10, 0x89, 0xd1, 0x43, 0x08,
	0x98, 0x85, 0xf5, 0x17, 0x6c, 0x36, 0x51, 0xc2, 0xba, 0x89, 0x74, 0x82, 0x07, 0x3d, 0x2c, 0x1d,
	0xa7, 0x32, 0x34, 0xce, 0x17, 0x3d, 0xbd, 0xc2, 0xf8, 0x5f, 0x3c, 0xf8, 0x4f, 0xa5, 0x6b, 0xa2,
	0x89, 0xa2, 0xde, 0xde, 0x7b, 0x35, 0x5d, 0xf5, 0xea, 0x15, 0x03, 0xac, 0x32, 0xa5, 0x2d, 0x2f,
	0xbe, 0x60, 0xaa, 0x26, 0x04, 0x79, 0xe8, 0xf0, 0xf0, 0x9b, 0x0f, 0xd1, 0xca, 0x24, 0x68, 0xf8,
	0x23, 0xe8, 0xe6, 0xca, 0x7c, 0x46, 0x2b, 0xbc, 0x81, 0x37, 0x8a, 0xe5, 0x9e, 0xf1, 0x73, 0x88,
	0x2a, 0x65, 0x6c, 0x23, 0x7c, 0x92, 0x5b, 0xc2, 0x9f, 0x42, 0x58, 0xeb, 0x04, 0x45, 0x30, 0xf0,
	0x46, 0xa7, 0x97, 0x30, 0xa1, 0xc6, 0x6b, 0x9d, 0xa0, 0x24, 0x9d, 0x5e, 0x19, 0xfd, 0x09, 0x45,
	0x38, 0xf0, 0x46, 0xa1, 0x6c, 0x09, 0xe7, 0xee, 0xd5, 0x57, 0x14, 0x11, 0x89, 0x84, 0xf9, 0x13,
	0x88, 0x0d, 0xe6, 0x4a, 0x17, 0xba, 0x48, 0x45, 0x97, 0x0a, 0x07, 0x81, 0xbf, 0x80, 0xd0, 0x36,
	0x15, 0x8a, 0x1e, 0xcd, 0x61, 0xed, 0x1c, 0x32, 0x3c, 0xd9, 0x34, 0x15, 0x4a, 0xaa, 0xba, 0x1e,
	0x56, 0xe7, 0x58, 0x5b, 0x95, 0x57, 0xa2, 0xdf, 0xf6, 0xf8, 0x25, 0xf0, 0x53, 0xf0, 0x75, 0x22,
	0x62, 0xb2, 0xef, 0xeb, 0x64, 0x38, 0x86, 0xd0, 0xbd, 0xe5, 0x3d, 0x08, 0xde, 0x6c, 0xae, 0x59,
	0xa7, 0x05, 0x1b, 0xe6, 0x39, 0x30, 0x5f, 0xce, 0x99, 0xef, 0xc0, 0xeb, 0xd5, 0x0d, 0x0b, 0x86,
	0x1f, 0xe1, 0x8c, 0xa6, 0x5d, 0x97, 0xc5, 0x4e, 0x9b, 0x5c, 0x59, 0x5d, 0x16, 0xfc, 0x19, 0x44,
	0xa5, 0x13, 0x29, 0xa9, 0x93, 0xcb, 0x93, 0x23, 0x57, 0xb2, 0xad, 0xf0, 0xe7, 0xd0, 0xb5, 0x46,
	0x25, 0x58, 0x0b, 0x7f, 0x10, 0x1c, 0xbe, 0xd9, 0x38, 0x4d, 0xee, 0x4b, 0xc3, 0xef, 0x1e, 0x44,
	0xa4, 0xfc, 0x37, 0x7c, 0x8a, 0xd1, 0xff, 0x5b, 0x8c, 0xc1, 0x51, 0x8c, 0xe7, 0x10, 0x6d, 0xef,
	0x1b, 0x34, 0x14, 0x78, 0x2c, 0x5b, 0xe2, 0xfa, 0xd6, 0x98, 0x65, 0x68, 0x28, 0xf2, 0x58, 0xee,
	0x19, 0x1f, 0x41, 0xac, 0xd2, 0xd4, 0x60, 0x5d, 0x97, 0x86, 0x42, 0xff, 0xfd, 0x86, 0x87, 0xe2,
	0xf0, 0x02, 0xfa, 0x64, 0x71, 0x8d, 0xf6, 0x68, 0x29, 0xef, 0xdf, 0x4b, 0x15, 0x00, 0xb7, 0x64,
	0x7e, 0xa6, 0xac, 0xe2, 0x02, 0x7a, 0x5b, 0xac, 0xed, 0x54, 0x27, 0xb4, 0x59, 0x28, 0x7f, 0x52,
	0x77, 0x33, 0x07, 0x57, 0xbb, 0x1d, 0x9a, 0xfd, 0x7a, 0x07, 0x81, 0x8f, 0xe0, 0x41, 0xa6, 0x6a,
	0x4b, 0xad, 0x93, 0x77, 0x14, 0x41, 0xbb, 0xed, 0x9f, 0xf2, 0xf8, 0x31, 0x84, 0xce, 0xb3, 0x3b,
	0xd9, 0xf4, 0xbe, 0x61, 0x1d, 0xde, 0x87, 0x70, 0x8d, 0x59, 0xc6, 0xbc, 0xf1, 0x4b, 0x00, 0x3a,
	0xca, 0xdc, 0x98, 0xd2, 0x38, 0x7d, 0xb9, 0x5a, 0xce, 0x59, 0x87, 0x3f, 0x84, 0xb3, 0xc5, 0xf2,
	0xfd, 0xd5, 0xdb, 0xc5, 0xec, 0xee, 0xf6, 0x4a, 0xde, 0xcc, 0x37, 0x77, 0x8b, 0x19, 0xf3, 0xa6,
	0xd1, 0x87, 0x20, 0xaf, 0xd3, 0x6d, 0x97, 0xfe, 0x8f, 0x57, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x68, 0x11, 0x74, 0x2a, 0x33, 0x03, 0x00, 0x00,
}
