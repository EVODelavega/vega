// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/data-node/delegations (interfaces: DelegationStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	vega "code.vegaprotocol.io/protos/vega"
	gomock "github.com/golang/mock/gomock"
)

// MockDelegationStore is a mock of DelegationStore interface.
type MockDelegationStore struct {
	ctrl     *gomock.Controller
	recorder *MockDelegationStoreMockRecorder
}

// MockDelegationStoreMockRecorder is the mock recorder for MockDelegationStore.
type MockDelegationStoreMockRecorder struct {
	mock *MockDelegationStore
}

// NewMockDelegationStore creates a new mock instance.
func NewMockDelegationStore(ctrl *gomock.Controller) *MockDelegationStore {
	mock := &MockDelegationStore{ctrl: ctrl}
	mock.recorder = &MockDelegationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegationStore) EXPECT() *MockDelegationStoreMockRecorder {
	return m.recorder
}

// GetAllDelegations mocks base method.
func (m *MockDelegationStore) GetAllDelegations() ([]*vega.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDelegations")
	ret0, _ := ret[0].([]*vega.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDelegations indicates an expected call of GetAllDelegations.
func (mr *MockDelegationStoreMockRecorder) GetAllDelegations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDelegations", reflect.TypeOf((*MockDelegationStore)(nil).GetAllDelegations))
}

// GetAllDelegationsOnEpoch mocks base method.
func (m *MockDelegationStore) GetAllDelegationsOnEpoch(epochSeq string) ([]*vega.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDelegationsOnEpoch", epochSeq)
	ret0, _ := ret[0].([]*vega.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDelegationsOnEpoch indicates an expected call of GetAllDelegationsOnEpoch.
func (mr *MockDelegationStoreMockRecorder) GetAllDelegationsOnEpoch(epochSeq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDelegationsOnEpoch", reflect.TypeOf((*MockDelegationStore)(nil).GetAllDelegationsOnEpoch), epochSeq)
}

// GetNodeDelegations mocks base method.
func (m *MockDelegationStore) GetNodeDelegations(nodeID string) ([]*vega.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeDelegations", nodeID)
	ret0, _ := ret[0].([]*vega.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeDelegations indicates an expected call of GetNodeDelegations.
func (mr *MockDelegationStoreMockRecorder) GetNodeDelegations(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeDelegations", reflect.TypeOf((*MockDelegationStore)(nil).GetNodeDelegations), nodeID)
}

// GetNodeDelegationsOnEpoch mocks base method.
func (m *MockDelegationStore) GetNodeDelegationsOnEpoch(nodeID, epochSeq string) ([]*vega.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeDelegationsOnEpoch", nodeID, epochSeq)
	ret0, _ := ret[0].([]*vega.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeDelegationsOnEpoch indicates an expected call of GetNodeDelegationsOnEpoch.
func (mr *MockDelegationStoreMockRecorder) GetNodeDelegationsOnEpoch(nodeID, epochSeq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeDelegationsOnEpoch", reflect.TypeOf((*MockDelegationStore)(nil).GetNodeDelegationsOnEpoch), nodeID, epochSeq)
}

// GetPartyDelegations mocks base method.
func (m *MockDelegationStore) GetPartyDelegations(party string) ([]*vega.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyDelegations", party)
	ret0, _ := ret[0].([]*vega.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyDelegations indicates an expected call of GetPartyDelegations.
func (mr *MockDelegationStoreMockRecorder) GetPartyDelegations(party interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyDelegations", reflect.TypeOf((*MockDelegationStore)(nil).GetPartyDelegations), party)
}

// GetPartyDelegationsOnEpoch mocks base method.
func (m *MockDelegationStore) GetPartyDelegationsOnEpoch(party, epochSeq string) ([]*vega.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyDelegationsOnEpoch", party, epochSeq)
	ret0, _ := ret[0].([]*vega.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyDelegationsOnEpoch indicates an expected call of GetPartyDelegationsOnEpoch.
func (mr *MockDelegationStoreMockRecorder) GetPartyDelegationsOnEpoch(party, epochSeq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyDelegationsOnEpoch", reflect.TypeOf((*MockDelegationStore)(nil).GetPartyDelegationsOnEpoch), party, epochSeq)
}

// GetPartyNodeDelegations mocks base method.
func (m *MockDelegationStore) GetPartyNodeDelegations(party, node string) ([]*vega.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyNodeDelegations", party, node)
	ret0, _ := ret[0].([]*vega.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyNodeDelegations indicates an expected call of GetPartyNodeDelegations.
func (mr *MockDelegationStoreMockRecorder) GetPartyNodeDelegations(party, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyNodeDelegations", reflect.TypeOf((*MockDelegationStore)(nil).GetPartyNodeDelegations), party, node)
}

// GetPartyNodeDelegationsOnEpoch mocks base method.
func (m *MockDelegationStore) GetPartyNodeDelegationsOnEpoch(party, node, epochSeq string) ([]*vega.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyNodeDelegationsOnEpoch", party, node, epochSeq)
	ret0, _ := ret[0].([]*vega.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyNodeDelegationsOnEpoch indicates an expected call of GetPartyNodeDelegationsOnEpoch.
func (mr *MockDelegationStoreMockRecorder) GetPartyNodeDelegationsOnEpoch(party, node, epochSeq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyNodeDelegationsOnEpoch", reflect.TypeOf((*MockDelegationStore)(nil).GetPartyNodeDelegationsOnEpoch), party, node, epochSeq)
}
