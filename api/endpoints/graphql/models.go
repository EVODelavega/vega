// Code generated by github.com/vektah/gqlgen, DO NOT EDIT.

package graphql

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
)

type Market struct {
	Name string `json:"name"`
}
type Trade struct {
	ID        string `json:"id"`
	Market    Market `json:"market"`
	Buyer     string `json:"buyer"`
	Seller    string `json:"seller"`
	Aggressor Side   `json:"aggressor"`
	Price     int    `json:"price"`
	Size      int    `json:"size"`
	Timestamp int    `json:"timestamp"`
}

type OrderType string

const (
	// The order either trades completely (remainingSize == 0 after adding) or not at all, does not remain on the book if it doesn't trade
	OrderTypeFok OrderType = "FOK" // FILL_OR_KILL,
	// The order trades any amount and as much as possible but does not remain on the book (whether it trades or not)
	OrderTypeEne OrderType = "ENE" // EXECUTE_AND_ELIMINATE,
	// This order trades any amount and as much as possible and remains on the book until it either trades completely or is cancelled
	OrderTypeGtc OrderType = "GTC" // GOOD_TILL_CANCELLED,
	// This order type trades any amount and as much as possible and remains on the book until they either trade completely, are cancelled, or expires at a set time
	// NOTE: this may in future be multiple types or have sub types for orders that provide different ways of specifying expiry
	OrderTypeGtt OrderType = "GTT"
)

func (e OrderType) IsValid() bool {
	switch e {
	case OrderTypeFok, OrderTypeEne, OrderTypeGtc, OrderTypeGtt:
		return true
	}
	return false
}

func (e OrderType) String() string {
	return string(e)
}

func (e *OrderType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderType", str)
	}
	return nil
}

func (e OrderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Side string

const (
	SideBuy  Side = "Buy"
	SideSell Side = "Sell"
)

func (e Side) IsValid() bool {
	switch e {
	case SideBuy, SideSell:
		return true
	}
	return false
}

func (e Side) String() string {
	return string(e)
}

func (e *Side) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Side(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Side", str)
	}
	return nil
}

func (e Side) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
