// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import datastore "vega/datastore"
import mock "github.com/stretchr/testify/mock"
import msg "vega/proto"

// TradeService is an autogenerated mock type for the TradeService type
type TradeService struct {
	mock.Mock
}

// GetTrades provides a mock function with given fields: ctx, market
func (_m *TradeService) GetTrades(ctx context.Context, market string) ([]msg.Trade, error) {
	ret := _m.Called(ctx, market)

	var r0 []msg.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string) []msg.Trade); ok {
		r0 = rf(ctx, market)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, market)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradesForOrder provides a mock function with given fields: ctx, market, orderID
func (_m *TradeService) GetTradesForOrder(ctx context.Context, market string, orderID string) ([]msg.Trade, error) {
	ret := _m.Called(ctx, market, orderID)

	var r0 []msg.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []msg.Trade); ok {
		r0 = rf(ctx, market, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, market, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: tradeStore
func (_m *TradeService) Init(tradeStore datastore.TradeStore) {
	_m.Called(tradeStore)
}
