// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/api (interfaces: EventService)

// Package mocks is a generated GoMock package.
package mocks

import (
	events "code.vegaprotocol.io/vega/events"
	proto "code.vegaprotocol.io/vega/proto"
	subscribers "code.vegaprotocol.io/vega/subscribers"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEventService is a mock of EventService interface
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// ObserveEvents mocks base method
func (m *MockEventService) ObserveEvents(arg0 context.Context, arg1 int, arg2 []events.Type, arg3 ...subscribers.EventFilter) <-chan []*proto.BusEvent {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveEvents", varargs...)
	ret0, _ := ret[0].(<-chan []*proto.BusEvent)
	return ret0
}

// ObserveEvents indicates an expected call of ObserveEvents
func (mr *MockEventServiceMockRecorder) ObserveEvents(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveEvents", reflect.TypeOf((*MockEventService)(nil).ObserveEvents), varargs...)
}
