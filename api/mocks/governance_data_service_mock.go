// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/api (interfaces: GovernanceDataService)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGovernanceDataService is a mock of GovernanceDataService interface
type MockGovernanceDataService struct {
	ctrl     *gomock.Controller
	recorder *MockGovernanceDataServiceMockRecorder
}

// MockGovernanceDataServiceMockRecorder is the mock recorder for MockGovernanceDataService
type MockGovernanceDataServiceMockRecorder struct {
	mock *MockGovernanceDataService
}

// NewMockGovernanceDataService creates a new mock instance
func NewMockGovernanceDataService(ctrl *gomock.Controller) *MockGovernanceDataService {
	mock := &MockGovernanceDataService{ctrl: ctrl}
	mock.recorder = &MockGovernanceDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGovernanceDataService) EXPECT() *MockGovernanceDataServiceMockRecorder {
	return m.recorder
}

// GetAllGovernanceData mocks base method
func (m *MockGovernanceDataService) GetAllGovernanceData() []*proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGovernanceData")
	ret0, _ := ret[0].([]*proto.GovernanceData)
	return ret0
}

// GetAllGovernanceData indicates an expected call of GetAllGovernanceData
func (mr *MockGovernanceDataServiceMockRecorder) GetAllGovernanceData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGovernanceData", reflect.TypeOf((*MockGovernanceDataService)(nil).GetAllGovernanceData))
}

// GetNetworkParametersProposals mocks base method
func (m *MockGovernanceDataService) GetNetworkParametersProposals() []*proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkParametersProposals")
	ret0, _ := ret[0].([]*proto.GovernanceData)
	return ret0
}

// GetNetworkParametersProposals indicates an expected call of GetNetworkParametersProposals
func (mr *MockGovernanceDataServiceMockRecorder) GetNetworkParametersProposals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkParametersProposals", reflect.TypeOf((*MockGovernanceDataService)(nil).GetNetworkParametersProposals))
}

// GetNewMarketProposals mocks base method
func (m *MockGovernanceDataService) GetNewMarketProposals(arg0 string) []*proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewMarketProposals", arg0)
	ret0, _ := ret[0].([]*proto.GovernanceData)
	return ret0
}

// GetNewMarketProposals indicates an expected call of GetNewMarketProposals
func (mr *MockGovernanceDataServiceMockRecorder) GetNewMarketProposals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewMarketProposals", reflect.TypeOf((*MockGovernanceDataService)(nil).GetNewMarketProposals), arg0)
}

// GetProposalByID mocks base method
func (m *MockGovernanceDataService) GetProposalByID(arg0 string) (*proto.GovernanceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalByID", arg0)
	ret0, _ := ret[0].(*proto.GovernanceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByID indicates an expected call of GetProposalByID
func (mr *MockGovernanceDataServiceMockRecorder) GetProposalByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByID", reflect.TypeOf((*MockGovernanceDataService)(nil).GetProposalByID), arg0)
}

// GetProposalByReference mocks base method
func (m *MockGovernanceDataService) GetProposalByReference(arg0 string) (*proto.GovernanceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalByReference", arg0)
	ret0, _ := ret[0].(*proto.GovernanceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByReference indicates an expected call of GetProposalByReference
func (mr *MockGovernanceDataServiceMockRecorder) GetProposalByReference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByReference", reflect.TypeOf((*MockGovernanceDataService)(nil).GetProposalByReference), arg0)
}

// GetProposalsByMarket mocks base method
func (m *MockGovernanceDataService) GetProposalsByMarket(arg0 string) []*proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalsByMarket", arg0)
	ret0, _ := ret[0].([]*proto.GovernanceData)
	return ret0
}

// GetProposalsByMarket indicates an expected call of GetProposalsByMarket
func (mr *MockGovernanceDataServiceMockRecorder) GetProposalsByMarket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalsByMarket", reflect.TypeOf((*MockGovernanceDataService)(nil).GetProposalsByMarket), arg0)
}

// GetProposalsByParty mocks base method
func (m *MockGovernanceDataService) GetProposalsByParty(arg0 string) []*proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalsByParty", arg0)
	ret0, _ := ret[0].([]*proto.GovernanceData)
	return ret0
}

// GetProposalsByParty indicates an expected call of GetProposalsByParty
func (mr *MockGovernanceDataServiceMockRecorder) GetProposalsByParty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalsByParty", reflect.TypeOf((*MockGovernanceDataService)(nil).GetProposalsByParty), arg0)
}

// GetProposalsInState mocks base method
func (m *MockGovernanceDataService) GetProposalsInState(arg0 proto.Proposal_State) []*proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalsInState", arg0)
	ret0, _ := ret[0].([]*proto.GovernanceData)
	return ret0
}

// GetProposalsInState indicates an expected call of GetProposalsInState
func (mr *MockGovernanceDataServiceMockRecorder) GetProposalsInState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalsInState", reflect.TypeOf((*MockGovernanceDataService)(nil).GetProposalsInState), arg0)
}

// GetProposalsNotInState mocks base method
func (m *MockGovernanceDataService) GetProposalsNotInState(arg0 proto.Proposal_State) []*proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalsNotInState", arg0)
	ret0, _ := ret[0].([]*proto.GovernanceData)
	return ret0
}

// GetProposalsNotInState indicates an expected call of GetProposalsNotInState
func (mr *MockGovernanceDataServiceMockRecorder) GetProposalsNotInState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalsNotInState", reflect.TypeOf((*MockGovernanceDataService)(nil).GetProposalsNotInState), arg0)
}

// GetUpdateMarketProposals mocks base method
func (m *MockGovernanceDataService) GetUpdateMarketProposals(arg0 string) []*proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateMarketProposals", arg0)
	ret0, _ := ret[0].([]*proto.GovernanceData)
	return ret0
}

// GetUpdateMarketProposals indicates an expected call of GetUpdateMarketProposals
func (mr *MockGovernanceDataServiceMockRecorder) GetUpdateMarketProposals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateMarketProposals", reflect.TypeOf((*MockGovernanceDataService)(nil).GetUpdateMarketProposals), arg0)
}

// GetVotesByParty mocks base method
func (m *MockGovernanceDataService) GetVotesByParty(arg0 string) []*proto.Vote {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotesByParty", arg0)
	ret0, _ := ret[0].([]*proto.Vote)
	return ret0
}

// GetVotesByParty indicates an expected call of GetVotesByParty
func (mr *MockGovernanceDataServiceMockRecorder) GetVotesByParty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesByParty", reflect.TypeOf((*MockGovernanceDataService)(nil).GetVotesByParty), arg0)
}

// ObserveGovernance mocks base method
func (m *MockGovernanceDataService) ObserveGovernance(arg0 context.Context, arg1 int) <-chan []proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObserveGovernance", arg0, arg1)
	ret0, _ := ret[0].(<-chan []proto.GovernanceData)
	return ret0
}

// ObserveGovernance indicates an expected call of ObserveGovernance
func (mr *MockGovernanceDataServiceMockRecorder) ObserveGovernance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveGovernance", reflect.TypeOf((*MockGovernanceDataService)(nil).ObserveGovernance), arg0, arg1)
}
