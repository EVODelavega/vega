// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import datastore "vega/datastore"
import mock "github.com/stretchr/testify/mock"
import msg "vega/proto"

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *OrderService) CreateOrder(ctx context.Context, order msg.Order) (bool, error) {
	ret := _m.Called(ctx, order)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, msg.Order) bool); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, msg.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, market, limit
func (_m *OrderService) GetOrders(ctx context.Context, market string, limit uint64) ([]msg.Order, error) {
	ret := _m.Called(ctx, market, limit)

	var r0 []msg.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) []msg.Order); ok {
		r0 = rf(ctx, market, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]msg.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uint64) error); ok {
		r1 = rf(ctx, market, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: orderStore
func (_m *OrderService) Init(orderStore datastore.OrderStore) {
	_m.Called(orderStore)
}
