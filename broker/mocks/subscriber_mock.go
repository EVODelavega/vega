// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/broker (interfaces: Subscriber)

// Package mocks is a generated GoMock package.
package mocks

import (
	events "code.vegaprotocol.io/vega/events"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSubscriber is a mock of Subscriber interface
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// C mocks base method
func (m *MockSubscriber) C() chan<- events.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "C")
	ret0, _ := ret[0].(chan<- events.Event)
	return ret0
}

// C indicates an expected call of C
func (mr *MockSubscriberMockRecorder) C() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C", reflect.TypeOf((*MockSubscriber)(nil).C))
}

// Closed mocks base method
func (m *MockSubscriber) Closed() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Closed")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Closed indicates an expected call of Closed
func (mr *MockSubscriberMockRecorder) Closed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Closed", reflect.TypeOf((*MockSubscriber)(nil).Closed))
}

// Push mocks base method
func (m *MockSubscriber) Push(arg0 events.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", arg0)
}

// Push indicates an expected call of Push
func (mr *MockSubscriberMockRecorder) Push(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockSubscriber)(nil).Push), arg0)
}

// Skip mocks base method
func (m *MockSubscriber) Skip() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Skip")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Skip indicates an expected call of Skip
func (mr *MockSubscriberMockRecorder) Skip() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Skip", reflect.TypeOf((*MockSubscriber)(nil).Skip))
}

// Types mocks base method
func (m *MockSubscriber) Types() []events.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Types")
	ret0, _ := ret[0].([]events.Type)
	return ret0
}

// Types indicates an expected call of Types
func (mr *MockSubscriberMockRecorder) Types() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Types", reflect.TypeOf((*MockSubscriber)(nil).Types))
}
