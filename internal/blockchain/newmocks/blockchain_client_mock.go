// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/internal/blockchain (interfaces: Client)

// Package newmocks is a generated GoMock package.
package newmocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "github.com/tendermint/tendermint/rpc/core/types"
	reflect "reflect"
	time "time"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AmendOrder mocks base method
func (m *MockClient) AmendOrder(arg0 context.Context, arg1 *proto.OrderAmendment) (bool, error) {
	ret := m.ctrl.Call(m, "AmendOrder", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmendOrder indicates an expected call of AmendOrder
func (mr *MockClientMockRecorder) AmendOrder(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmendOrder", reflect.TypeOf((*MockClient)(nil).AmendOrder), arg0, arg1)
}

// CancelOrder mocks base method
func (m *MockClient) CancelOrder(arg0 context.Context, arg1 *proto.Order) (bool, error) {
	ret := m.ctrl.Call(m, "CancelOrder", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder
func (mr *MockClientMockRecorder) CancelOrder(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockClient)(nil).CancelOrder), arg0, arg1)
}

// CreateOrder mocks base method
func (m *MockClient) CreateOrder(arg0 context.Context, arg1 *proto.Order) (bool, string, error) {
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrder indicates an expected call of CreateOrder
func (mr *MockClientMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockClient)(nil).CreateOrder), arg0, arg1)
}

// GetGenesisTime mocks base method
func (m *MockClient) GetGenesisTime(arg0 context.Context) (time.Time, error) {
	ret := m.ctrl.Call(m, "GetGenesisTime", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenesisTime indicates an expected call of GetGenesisTime
func (mr *MockClientMockRecorder) GetGenesisTime(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenesisTime", reflect.TypeOf((*MockClient)(nil).GetGenesisTime), arg0)
}

// GetNetworkInfo mocks base method
func (m *MockClient) GetNetworkInfo(arg0 context.Context) (*types.ResultNetInfo, error) {
	ret := m.ctrl.Call(m, "GetNetworkInfo", arg0)
	ret0, _ := ret[0].(*types.ResultNetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkInfo indicates an expected call of GetNetworkInfo
func (mr *MockClientMockRecorder) GetNetworkInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkInfo", reflect.TypeOf((*MockClient)(nil).GetNetworkInfo), arg0)
}

// GetStatus mocks base method
func (m *MockClient) GetStatus(arg0 context.Context) (*types.ResultStatus, error) {
	ret := m.ctrl.Call(m, "GetStatus", arg0)
	ret0, _ := ret[0].(*types.ResultStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockClientMockRecorder) GetStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockClient)(nil).GetStatus), arg0)
}

// GetUnconfirmedTxCount mocks base method
func (m *MockClient) GetUnconfirmedTxCount(arg0 context.Context) (int, error) {
	ret := m.ctrl.Call(m, "GetUnconfirmedTxCount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnconfirmedTxCount indicates an expected call of GetUnconfirmedTxCount
func (mr *MockClientMockRecorder) GetUnconfirmedTxCount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnconfirmedTxCount", reflect.TypeOf((*MockClient)(nil).GetUnconfirmedTxCount), arg0)
}

// Health mocks base method
func (m *MockClient) Health() (*types.ResultHealth, error) {
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(*types.ResultHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health
func (mr *MockClientMockRecorder) Health() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockClient)(nil).Health))
}
