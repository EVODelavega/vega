// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"

import proto "vega/proto"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateParty provides a mock function with given fields: party
func (_m *Service) CreateParty(party *proto.Party) error {
	ret := _m.Called(party)

	var r0 error
	if rf, ok := ret.Get(0).(func(*proto.Party) error); ok {
		r0 = rf(party)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Service) GetAll() ([]*proto.Party, error) {
	ret := _m.Called()

	var r0 []*proto.Party
	if rf, ok := ret.Get(0).(func() []*proto.Party); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Party)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *Service) GetByName(name string) (*proto.Party, error) {
	ret := _m.Called(name)

	var r0 *proto.Party
	if rf, ok := ret.Get(0).(func(string) *proto.Party); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Party)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
