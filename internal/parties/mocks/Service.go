// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"

import proto "vega/proto"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateParty provides a mock function with given fields: ctx, party
func (_m *Service) CreateParty(ctx context.Context, party *proto.Party) error {
	ret := _m.Called(ctx, party)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Party) error); ok {
		r0 = rf(ctx, party)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *Service) GetAll(ctx context.Context) ([]*proto.Party, error) {
	ret := _m.Called(ctx)

	var r0 []*proto.Party
	if rf, ok := ret.Get(0).(func(context.Context) []*proto.Party); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Party)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *Service) GetByName(ctx context.Context, name string) (*proto.Party, error) {
	ret := _m.Called(ctx, name)

	var r0 *proto.Party
	if rf, ok := ret.Get(0).(func(context.Context, string) *proto.Party); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Party)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
