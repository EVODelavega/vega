// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/internal/markets (interfaces: ServiceOrderStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServiceOrderStore is a mock of ServiceOrderStore interface
type MockServiceOrderStore struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOrderStoreMockRecorder
}

// MockServiceOrderStoreMockRecorder is the mock recorder for MockServiceOrderStore
type MockServiceOrderStoreMockRecorder struct {
	mock *MockServiceOrderStore
}

// NewMockServiceOrderStore creates a new mock instance
func NewMockServiceOrderStore(ctrl *gomock.Controller) *MockServiceOrderStore {
	mock := &MockServiceOrderStore{ctrl: ctrl}
	mock.recorder = &MockServiceOrderStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceOrderStore) EXPECT() *MockServiceOrderStoreMockRecorder {
	return m.recorder
}

// GetMarketDepth mocks base method
func (m *MockServiceOrderStore) GetMarketDepth(arg0 context.Context, arg1 string) (*proto.MarketDepth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketDepth", arg0, arg1)
	ret0, _ := ret[0].(*proto.MarketDepth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketDepth indicates an expected call of GetMarketDepth
func (mr *MockServiceOrderStoreMockRecorder) GetMarketDepth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketDepth", reflect.TypeOf((*MockServiceOrderStore)(nil).GetMarketDepth), arg0, arg1)
}

// Subscribe mocks base method
func (m *MockServiceOrderStore) Subscribe(arg0 chan<- []proto.Order) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockServiceOrderStoreMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockServiceOrderStore)(nil).Subscribe), arg0)
}

// Unsubscribe mocks base method
func (m *MockServiceOrderStore) Unsubscribe(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockServiceOrderStoreMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockServiceOrderStore)(nil).Unsubscribe), arg0)
}
