// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import filtering "vega/internal/filtering"
import mock "github.com/stretchr/testify/mock"
import msg "vega/msg"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetByMarket provides a mock function with given fields: market, filters
func (_m *Service) GetByMarket(market string, filters *filtering.TradeQueryFilters) ([]*msg.Trade, error) {
	ret := _m.Called(market, filters)

	var r0 []*msg.Trade
	if rf, ok := ret.Get(0).(func(string, *filtering.TradeQueryFilters) []*msg.Trade); ok {
		r0 = rf(market, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *filtering.TradeQueryFilters) error); ok {
		r1 = rf(market, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMarketAndId provides a mock function with given fields: market, id
func (_m *Service) GetByMarketAndId(market string, id string) (*msg.Trade, error) {
	ret := _m.Called(market, id)

	var r0 *msg.Trade
	if rf, ok := ret.Get(0).(func(string, string) *msg.Trade); ok {
		r0 = rf(market, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(market, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderId provides a mock function with given fields: orderId, filters
func (_m *Service) GetByOrderId(orderId string, filters *filtering.TradeQueryFilters) ([]*msg.Trade, error) {
	ret := _m.Called(orderId, filters)

	var r0 []*msg.Trade
	if rf, ok := ret.Get(0).(func(string, *filtering.TradeQueryFilters) []*msg.Trade); ok {
		r0 = rf(orderId, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *filtering.TradeQueryFilters) error); ok {
		r1 = rf(orderId, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByParty provides a mock function with given fields: party, filters
func (_m *Service) GetByParty(party string, filters *filtering.TradeQueryFilters) ([]*msg.Trade, error) {
	ret := _m.Called(party, filters)

	var r0 []*msg.Trade
	if rf, ok := ret.Get(0).(func(string, *filtering.TradeQueryFilters) []*msg.Trade); ok {
		r0 = rf(party, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *filtering.TradeQueryFilters) error); ok {
		r1 = rf(party, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPartyAndId provides a mock function with given fields: party, id
func (_m *Service) GetByPartyAndId(party string, id string) (*msg.Trade, error) {
	ret := _m.Called(party, id)

	var r0 *msg.Trade
	if rf, ok := ret.Get(0).(func(string, string) *msg.Trade); ok {
		r0 = rf(party, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(party, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPositionsByParty provides a mock function with given fields: ctx, party
func (_m *Service) GetPositionsByParty(ctx context.Context, party string) ([]*msg.MarketPosition, error) {
	ret := _m.Called(ctx, party)

	var r0 []*msg.MarketPosition
	if rf, ok := ret.Get(0).(func(context.Context, string) []*msg.MarketPosition); ok {
		r0 = rf(ctx, party)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*msg.MarketPosition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, party)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObservePositions provides a mock function with given fields: ctx, party
func (_m *Service) ObservePositions(ctx context.Context, party string) (<-chan msg.MarketPosition, uint64) {
	ret := _m.Called(ctx, party)

	var r0 <-chan msg.MarketPosition
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan msg.MarketPosition); ok {
		r0 = rf(ctx, party)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan msg.MarketPosition)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, string) uint64); ok {
		r1 = rf(ctx, party)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	return r0, r1
}

// ObserveTrades provides a mock function with given fields: ctx, market, party
func (_m *Service) ObserveTrades(ctx context.Context, market *string, party *string) (<-chan []msg.Trade, uint64) {
	ret := _m.Called(ctx, market, party)

	var r0 <-chan []msg.Trade
	if rf, ok := ret.Get(0).(func(context.Context, *string, *string) <-chan []msg.Trade); ok {
		r0 = rf(ctx, market, party)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []msg.Trade)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, *string, *string) uint64); ok {
		r1 = rf(ctx, market, party)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	return r0, r1
}
