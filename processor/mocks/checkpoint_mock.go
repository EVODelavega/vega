// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/processor (interfaces: Checkpoint)

// Package mocks is a generated GoMock package.
package mocks

import (
	types "code.vegaprotocol.io/vega/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCheckpoint is a mock of Checkpoint interface
type MockCheckpoint struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointMockRecorder
}

// MockCheckpointMockRecorder is the mock recorder for MockCheckpoint
type MockCheckpointMockRecorder struct {
	mock *MockCheckpoint
}

// NewMockCheckpoint creates a new mock instance
func NewMockCheckpoint(ctrl *gomock.Controller) *MockCheckpoint {
	mock := &MockCheckpoint{ctrl: ctrl}
	mock.recorder = &MockCheckpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCheckpoint) EXPECT() *MockCheckpointMockRecorder {
	return m.recorder
}

// Checkpoint mocks base method
func (m *MockCheckpoint) Checkpoint() (*types.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkpoint")
	ret0, _ := ret[0].(*types.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkpoint indicates an expected call of Checkpoint
func (mr *MockCheckpointMockRecorder) Checkpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkpoint", reflect.TypeOf((*MockCheckpoint)(nil).Checkpoint))
}

// Load mocks base method
func (m *MockCheckpoint) Load(arg0 *types.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load
func (mr *MockCheckpointMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCheckpoint)(nil).Load), arg0)
}
