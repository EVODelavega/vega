// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/processor (interfaces: StatS)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStatS is a mock of StatS interface
type MockStatS struct {
	ctrl     *gomock.Controller
	recorder *MockStatSMockRecorder
}

// MockStatSMockRecorder is the mock recorder for MockStatS
type MockStatSMockRecorder struct {
	mock *MockStatS
}

// NewMockStatS creates a new mock instance
func NewMockStatS(ctrl *gomock.Controller) *MockStatS {
	mock := &MockStatS{ctrl: ctrl}
	mock.recorder = &MockStatSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatS) EXPECT() *MockStatSMockRecorder {
	return m.recorder
}

// AddCurrentTradesInBatch mocks base method
func (m *MockStatS) AddCurrentTradesInBatch(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCurrentTradesInBatch", arg0)
}

// AddCurrentTradesInBatch indicates an expected call of AddCurrentTradesInBatch
func (mr *MockStatSMockRecorder) AddCurrentTradesInBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCurrentTradesInBatch", reflect.TypeOf((*MockStatS)(nil).AddCurrentTradesInBatch), arg0)
}

// AddTotalTrades mocks base method
func (m *MockStatS) AddTotalTrades(arg0 uint64) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTotalTrades", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// AddTotalTrades indicates an expected call of AddTotalTrades
func (mr *MockStatSMockRecorder) AddTotalTrades(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTotalTrades", reflect.TypeOf((*MockStatS)(nil).AddTotalTrades), arg0)
}

// CurrentOrdersInBatch mocks base method
func (m *MockStatS) CurrentOrdersInBatch() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentOrdersInBatch")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// CurrentOrdersInBatch indicates an expected call of CurrentOrdersInBatch
func (mr *MockStatSMockRecorder) CurrentOrdersInBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentOrdersInBatch", reflect.TypeOf((*MockStatS)(nil).CurrentOrdersInBatch))
}

// CurrentTradesInBatch mocks base method
func (m *MockStatS) CurrentTradesInBatch() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentTradesInBatch")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// CurrentTradesInBatch indicates an expected call of CurrentTradesInBatch
func (mr *MockStatSMockRecorder) CurrentTradesInBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTradesInBatch", reflect.TypeOf((*MockStatS)(nil).CurrentTradesInBatch))
}

// IncCurrentOrdersInBatch mocks base method
func (m *MockStatS) IncCurrentOrdersInBatch() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncCurrentOrdersInBatch")
}

// IncCurrentOrdersInBatch indicates an expected call of IncCurrentOrdersInBatch
func (mr *MockStatSMockRecorder) IncCurrentOrdersInBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCurrentOrdersInBatch", reflect.TypeOf((*MockStatS)(nil).IncCurrentOrdersInBatch))
}

// IncTotalAmendOrder mocks base method
func (m *MockStatS) IncTotalAmendOrder() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncTotalAmendOrder")
}

// IncTotalAmendOrder indicates an expected call of IncTotalAmendOrder
func (mr *MockStatSMockRecorder) IncTotalAmendOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncTotalAmendOrder", reflect.TypeOf((*MockStatS)(nil).IncTotalAmendOrder))
}

// IncTotalBatches mocks base method
func (m *MockStatS) IncTotalBatches() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncTotalBatches")
}

// IncTotalBatches indicates an expected call of IncTotalBatches
func (mr *MockStatSMockRecorder) IncTotalBatches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncTotalBatches", reflect.TypeOf((*MockStatS)(nil).IncTotalBatches))
}

// IncTotalCancelOrder mocks base method
func (m *MockStatS) IncTotalCancelOrder() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncTotalCancelOrder")
}

// IncTotalCancelOrder indicates an expected call of IncTotalCancelOrder
func (mr *MockStatSMockRecorder) IncTotalCancelOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncTotalCancelOrder", reflect.TypeOf((*MockStatS)(nil).IncTotalCancelOrder))
}

// IncTotalCreateOrder mocks base method
func (m *MockStatS) IncTotalCreateOrder() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncTotalCreateOrder")
}

// IncTotalCreateOrder indicates an expected call of IncTotalCreateOrder
func (mr *MockStatSMockRecorder) IncTotalCreateOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncTotalCreateOrder", reflect.TypeOf((*MockStatS)(nil).IncTotalCreateOrder))
}

// IncTotalOrders mocks base method
func (m *MockStatS) IncTotalOrders() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncTotalOrders")
}

// IncTotalOrders indicates an expected call of IncTotalOrders
func (mr *MockStatSMockRecorder) IncTotalOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncTotalOrders", reflect.TypeOf((*MockStatS)(nil).IncTotalOrders))
}

// NewBatch mocks base method
func (m *MockStatS) NewBatch() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewBatch")
}

// NewBatch indicates an expected call of NewBatch
func (mr *MockStatSMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockStatS)(nil).NewBatch))
}

// SetAverageOrdersPerBatch mocks base method
func (m *MockStatS) SetAverageOrdersPerBatch(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAverageOrdersPerBatch", arg0)
}

// SetAverageOrdersPerBatch indicates an expected call of SetAverageOrdersPerBatch
func (mr *MockStatSMockRecorder) SetAverageOrdersPerBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAverageOrdersPerBatch", reflect.TypeOf((*MockStatS)(nil).SetAverageOrdersPerBatch), arg0)
}

// SetBlockDuration mocks base method
func (m *MockStatS) SetBlockDuration(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBlockDuration", arg0)
}

// SetBlockDuration indicates an expected call of SetBlockDuration
func (mr *MockStatSMockRecorder) SetBlockDuration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockDuration", reflect.TypeOf((*MockStatS)(nil).SetBlockDuration), arg0)
}

// SetOrdersPerSecond mocks base method
func (m *MockStatS) SetOrdersPerSecond(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOrdersPerSecond", arg0)
}

// SetOrdersPerSecond indicates an expected call of SetOrdersPerSecond
func (mr *MockStatSMockRecorder) SetOrdersPerSecond(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrdersPerSecond", reflect.TypeOf((*MockStatS)(nil).SetOrdersPerSecond), arg0)
}

// SetTradesPerSecond mocks base method
func (m *MockStatS) SetTradesPerSecond(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTradesPerSecond", arg0)
}

// SetTradesPerSecond indicates an expected call of SetTradesPerSecond
func (mr *MockStatSMockRecorder) SetTradesPerSecond(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTradesPerSecond", reflect.TypeOf((*MockStatS)(nil).SetTradesPerSecond), arg0)
}

// TotalBatches mocks base method
func (m *MockStatS) TotalBatches() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalBatches")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// TotalBatches indicates an expected call of TotalBatches
func (mr *MockStatSMockRecorder) TotalBatches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalBatches", reflect.TypeOf((*MockStatS)(nil).TotalBatches))
}

// TotalOrders mocks base method
func (m *MockStatS) TotalOrders() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalOrders")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// TotalOrders indicates an expected call of TotalOrders
func (mr *MockStatSMockRecorder) TotalOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalOrders", reflect.TypeOf((*MockStatS)(nil).TotalOrders))
}
