// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/governance (interfaces: Plugin)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPlugin is a mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// GetAllGovernanceData mocks base method
func (m *MockPlugin) GetAllGovernanceData() []*proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGovernanceData")
	ret0, _ := ret[0].([]*proto.GovernanceData)
	return ret0
}

// GetAllGovernanceData indicates an expected call of GetAllGovernanceData
func (mr *MockPluginMockRecorder) GetAllGovernanceData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGovernanceData", reflect.TypeOf((*MockPlugin)(nil).GetAllGovernanceData))
}

// GetProposalByID mocks base method
func (m *MockPlugin) GetProposalByID(arg0 string) (*proto.GovernanceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalByID", arg0)
	ret0, _ := ret[0].(*proto.GovernanceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByID indicates an expected call of GetProposalByID
func (mr *MockPluginMockRecorder) GetProposalByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByID", reflect.TypeOf((*MockPlugin)(nil).GetProposalByID), arg0)
}

// GetProposalByReference mocks base method
func (m *MockPlugin) GetProposalByReference(arg0 string) (*proto.GovernanceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalByReference", arg0)
	ret0, _ := ret[0].(*proto.GovernanceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByReference indicates an expected call of GetProposalByReference
func (mr *MockPluginMockRecorder) GetProposalByReference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByReference", reflect.TypeOf((*MockPlugin)(nil).GetProposalByReference), arg0)
}

// GetProposalsByMarket mocks base method
func (m *MockPlugin) GetProposalsByMarket(arg0 string) []*proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalsByMarket", arg0)
	ret0, _ := ret[0].([]*proto.GovernanceData)
	return ret0
}

// GetProposalsByMarket indicates an expected call of GetProposalsByMarket
func (mr *MockPluginMockRecorder) GetProposalsByMarket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalsByMarket", reflect.TypeOf((*MockPlugin)(nil).GetProposalsByMarket), arg0)
}

// GetProposalsByParty mocks base method
func (m *MockPlugin) GetProposalsByParty(arg0 string) []*proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalsByParty", arg0)
	ret0, _ := ret[0].([]*proto.GovernanceData)
	return ret0
}

// GetProposalsByParty indicates an expected call of GetProposalsByParty
func (mr *MockPluginMockRecorder) GetProposalsByParty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalsByParty", reflect.TypeOf((*MockPlugin)(nil).GetProposalsByParty), arg0)
}

// GetProposalsInState mocks base method
func (m *MockPlugin) GetProposalsInState(arg0 proto.Proposal_State) []*proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalsInState", arg0)
	ret0, _ := ret[0].([]*proto.GovernanceData)
	return ret0
}

// GetProposalsInState indicates an expected call of GetProposalsInState
func (mr *MockPluginMockRecorder) GetProposalsInState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalsInState", reflect.TypeOf((*MockPlugin)(nil).GetProposalsInState), arg0)
}

// GetProposalsNotInState mocks base method
func (m *MockPlugin) GetProposalsNotInState(arg0 proto.Proposal_State) []*proto.GovernanceData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalsNotInState", arg0)
	ret0, _ := ret[0].([]*proto.GovernanceData)
	return ret0
}

// GetProposalsNotInState indicates an expected call of GetProposalsNotInState
func (mr *MockPluginMockRecorder) GetProposalsNotInState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalsNotInState", reflect.TypeOf((*MockPlugin)(nil).GetProposalsNotInState), arg0)
}

// Subscribe mocks base method
func (m *MockPlugin) Subscribe() (<-chan []proto.GovernanceData, int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(<-chan []proto.GovernanceData)
	ret1, _ := ret[1].(int64)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockPluginMockRecorder) Subscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPlugin)(nil).Subscribe))
}

// Unsubscribe mocks base method
func (m *MockPlugin) Unsubscribe(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockPluginMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockPlugin)(nil).Unsubscribe), arg0)
}
