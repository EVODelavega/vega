// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/governance (interfaces: Plugin)

// Package mocks is a generated GoMock package.
package mocks

import (
	plugins "code.vegaprotocol.io/vega/plugins"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPlugin is a mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// GetOpenProposals mocks base method
func (m *MockPlugin) GetOpenProposals() []plugins.PropVote {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenProposals")
	ret0, _ := ret[0].([]plugins.PropVote)
	return ret0
}

// GetOpenProposals indicates an expected call of GetOpenProposals
func (mr *MockPluginMockRecorder) GetOpenProposals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenProposals", reflect.TypeOf((*MockPlugin)(nil).GetOpenProposals))
}

// GetProposalByID mocks base method
func (m *MockPlugin) GetProposalByID(arg0 string) (*plugins.PropVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalByID", arg0)
	ret0, _ := ret[0].(*plugins.PropVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByID indicates an expected call of GetProposalByID
func (mr *MockPluginMockRecorder) GetProposalByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByID", reflect.TypeOf((*MockPlugin)(nil).GetProposalByID), arg0)
}

// GetProposalByReference mocks base method
func (m *MockPlugin) GetProposalByReference(arg0 string) (*plugins.PropVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalByReference", arg0)
	ret0, _ := ret[0].(*plugins.PropVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByReference indicates an expected call of GetProposalByReference
func (mr *MockPluginMockRecorder) GetProposalByReference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByReference", reflect.TypeOf((*MockPlugin)(nil).GetProposalByReference), arg0)
}
