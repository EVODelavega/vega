// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/governance (interfaces: Markets)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockMarkets is a mock of Markets interface.
type MockMarkets struct {
	ctrl     *gomock.Controller
	recorder *MockMarketsMockRecorder
}

// MockMarketsMockRecorder is the mock recorder for MockMarkets.
type MockMarketsMockRecorder struct {
	mock *MockMarkets
}

// NewMockMarkets creates a new mock instance.
func NewMockMarkets(ctrl *gomock.Controller) *MockMarkets {
	mock := &MockMarkets{ctrl: ctrl}
	mock.recorder = &MockMarketsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarkets) EXPECT() *MockMarketsMockRecorder {
	return m.recorder
}

// GetEquityLikeShareForMarketAndParty mocks base method.
func (m *MockMarkets) GetEquityLikeShareForMarketAndParty(arg0, arg1 string) (decimal.Decimal, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEquityLikeShareForMarketAndParty", arg0, arg1)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetEquityLikeShareForMarketAndParty indicates an expected call of GetEquityLikeShareForMarketAndParty.
func (mr *MockMarketsMockRecorder) GetEquityLikeShareForMarketAndParty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEquityLikeShareForMarketAndParty", reflect.TypeOf((*MockMarkets)(nil).GetEquityLikeShareForMarketAndParty), arg0, arg1)
}

// MarketExists mocks base method.
func (m *MockMarkets) MarketExists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MarketExists indicates an expected call of MarketExists.
func (mr *MockMarketsMockRecorder) MarketExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketExists", reflect.TypeOf((*MockMarkets)(nil).MarketExists), arg0)
}
