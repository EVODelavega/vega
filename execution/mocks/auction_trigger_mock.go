// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/execution (interfaces: AuctionTrigger)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockAuctionTrigger is a mock of AuctionTrigger interface
type MockAuctionTrigger struct {
	ctrl     *gomock.Controller
	recorder *MockAuctionTriggerMockRecorder
}

// MockAuctionTriggerMockRecorder is the mock recorder for MockAuctionTrigger
type MockAuctionTriggerMockRecorder struct {
	mock *MockAuctionTrigger
}

// NewMockAuctionTrigger creates a new mock instance
func NewMockAuctionTrigger(ctrl *gomock.Controller) *MockAuctionTrigger {
	mock := &MockAuctionTrigger{ctrl: ctrl}
	mock.recorder = &MockAuctionTriggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuctionTrigger) EXPECT() *MockAuctionTriggerMockRecorder {
	return m.recorder
}

// EnterPerPrice mocks base method
func (m *MockAuctionTrigger) EnterPerPrice(arg0 uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterPerPrice", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EnterPerPrice indicates an expected call of EnterPerPrice
func (mr *MockAuctionTriggerMockRecorder) EnterPerPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterPerPrice", reflect.TypeOf((*MockAuctionTrigger)(nil).EnterPerPrice), arg0)
}

// EnterPerTime mocks base method
func (m *MockAuctionTrigger) EnterPerTime(arg0 time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterPerTime", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EnterPerTime indicates an expected call of EnterPerTime
func (mr *MockAuctionTriggerMockRecorder) EnterPerTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterPerTime", reflect.TypeOf((*MockAuctionTrigger)(nil).EnterPerTime), arg0)
}

// LeavePerTime mocks base method
func (m *MockAuctionTrigger) LeavePerTime(arg0 time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeavePerTime", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// LeavePerTime indicates an expected call of LeavePerTime
func (mr *MockAuctionTriggerMockRecorder) LeavePerTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeavePerTime", reflect.TypeOf((*MockAuctionTrigger)(nil).LeavePerTime), arg0)
}
