// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import datastore "vega/datastore"
import mock "github.com/stretchr/testify/mock"

// TradeStore is an autogenerated mock type for the TradeStore type
type TradeStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, r
func (_m *TradeStore) Delete(ctx context.Context, r *datastore.Trade) error {
	ret := _m.Called(ctx, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datastore.Trade) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, market, id
func (_m *TradeStore) Get(ctx context.Context, market string, id string) (*datastore.Trade, error) {
	ret := _m.Called(ctx, market, id)

	var r0 *datastore.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *datastore.Trade); ok {
		r0 = rf(ctx, market, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, market, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, market, limit
func (_m *TradeStore) GetAll(ctx context.Context, market string, limit datastore.Limit) ([]*datastore.Trade, error) {
	ret := _m.Called(ctx, market, limit)

	var r0 []*datastore.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, datastore.Limit) []*datastore.Trade); ok {
		r0 = rf(ctx, market, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*datastore.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, datastore.Limit) error); ok {
		r1 = rf(ctx, market, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderId provides a mock function with given fields: ctx, market, orderId, limit
func (_m *TradeStore) GetByOrderId(ctx context.Context, market string, orderId string, limit datastore.Limit) ([]*datastore.Trade, error) {
	ret := _m.Called(ctx, market, orderId, limit)

	var r0 []*datastore.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, string, datastore.Limit) []*datastore.Trade); ok {
		r0 = rf(ctx, market, orderId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*datastore.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, datastore.Limit) error); ok {
		r1 = rf(ctx, market, orderId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: ctx, r
func (_m *TradeStore) Post(ctx context.Context, r *datastore.Trade) error {
	ret := _m.Called(ctx, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datastore.Trade) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: ctx, r
func (_m *TradeStore) Put(ctx context.Context, r *datastore.Trade) error {
	ret := _m.Called(ctx, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datastore.Trade) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
