// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import datastore "vega/datastore"
import mock "github.com/stretchr/testify/mock"

// TradeStore is an autogenerated mock type for the TradeStore type
type TradeStore struct {
	mock.Mock
}

// All provides a mock function with given fields: market
func (_m *TradeStore) All(market string) ([]*datastore.Trade, error) {
	ret := _m.Called(market)

	var r0 []*datastore.Trade
	if rf, ok := ret.Get(0).(func(string) []*datastore.Trade); ok {
		r0 = rf(market)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*datastore.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(market)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: r
func (_m *TradeStore) Delete(r *datastore.Trade) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.Trade) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByOrderID provides a mock function with given fields: market, orderID
func (_m *TradeStore) FindByOrderID(market string, orderID string) ([]*datastore.Trade, error) {
	ret := _m.Called(market, orderID)

	var r0 []*datastore.Trade
	if rf, ok := ret.Get(0).(func(string, string) []*datastore.Trade); ok {
		r0 = rf(market, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*datastore.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(market, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: market, id
func (_m *TradeStore) Get(market string, id string) (*datastore.Trade, error) {
	ret := _m.Called(market, id)

	var r0 *datastore.Trade
	if rf, ok := ret.Get(0).(func(string, string) *datastore.Trade); ok {
		r0 = rf(market, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(market, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: r
func (_m *TradeStore) Put(r *datastore.Trade) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*datastore.Trade) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
