// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import datastore "vega/datastore"
import mock "github.com/stretchr/testify/mock"

// OrderStore is an autogenerated mock type for the OrderStore type
type OrderStore struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx, market
func (_m *OrderStore) All(ctx context.Context, market string) ([]*datastore.Order, error) {
	ret := _m.Called(ctx, market)

	var r0 []*datastore.Order
	if rf, ok := ret.Get(0).(func(context.Context, string) []*datastore.Order); ok {
		r0 = rf(ctx, market)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*datastore.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, market)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, r
func (_m *OrderStore) Delete(ctx context.Context, r *datastore.Order) error {
	ret := _m.Called(ctx, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datastore.Order) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, market, id
func (_m *OrderStore) Get(ctx context.Context, market string, id string) (*datastore.Order, error) {
	ret := _m.Called(ctx, market, id)

	var r0 *datastore.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *datastore.Order); ok {
		r0 = rf(ctx, market, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, market, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, r
func (_m *OrderStore) Put(ctx context.Context, r *datastore.Order) error {
	ret := _m.Called(ctx, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datastore.Order) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
