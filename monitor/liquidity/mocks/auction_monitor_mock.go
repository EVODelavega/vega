// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/monitor/liquidity (interfaces: AuctionMonitor)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAuctionMonitor is a mock of AuctionMonitor interface
type MockAuctionMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockAuctionMonitorMockRecorder
}

// MockAuctionMonitorMockRecorder is the mock recorder for MockAuctionMonitor
type MockAuctionMonitorMockRecorder struct {
	mock *MockAuctionMonitor
}

// NewMockAuctionMonitor creates a new mock instance
func NewMockAuctionMonitor(ctrl *gomock.Controller) *MockAuctionMonitor {
	mock := &MockAuctionMonitor{ctrl: ctrl}
	mock.recorder = &MockAuctionMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuctionMonitor) EXPECT() *MockAuctionMonitorMockRecorder {
	return m.recorder
}

// BidAndAskOnBookAfterAuction mocks base method
func (m *MockAuctionMonitor) BidAndAskOnBookAfterAuction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BidAndAskOnBookAfterAuction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// BidAndAskOnBookAfterAuction indicates an expected call of BidAndAskOnBookAfterAuction
func (mr *MockAuctionMonitorMockRecorder) BidAndAskOnBookAfterAuction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BidAndAskOnBookAfterAuction", reflect.TypeOf((*MockAuctionMonitor)(nil).BidAndAskOnBookAfterAuction))
}
