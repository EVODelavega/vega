// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/wallet/api (interfaces: NodeSelector)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "code.vegaprotocol.io/vega/wallet/api"
	gomock "github.com/golang/mock/gomock"
)

// MockNodeSelector is a mock of NodeSelector interface.
type MockNodeSelector struct {
	ctrl     *gomock.Controller
	recorder *MockNodeSelectorMockRecorder
}

// MockNodeSelectorMockRecorder is the mock recorder for MockNodeSelector.
type MockNodeSelectorMockRecorder struct {
	mock *MockNodeSelector
}

// NewMockNodeSelector creates a new mock instance.
func NewMockNodeSelector(ctrl *gomock.Controller) *MockNodeSelector {
	mock := &MockNodeSelector{ctrl: ctrl}
	mock.recorder = &MockNodeSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeSelector) EXPECT() *MockNodeSelectorMockRecorder {
	return m.recorder
}

// Node mocks base method.
func (m *MockNodeSelector) Node(arg0 context.Context) (api.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node", arg0)
	ret0, _ := ret[0].(api.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Node indicates an expected call of Node.
func (mr *MockNodeSelectorMockRecorder) Node(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockNodeSelector)(nil).Node), arg0)
}

// Stop mocks base method.
func (m *MockNodeSelector) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockNodeSelectorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNodeSelector)(nil).Stop))
}
