// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/wallet/api (interfaces: Pipeline)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	api "code.vegaprotocol.io/vega/wallet/api"
	gomock "github.com/golang/mock/gomock"
)

// MockPipeline is a mock of Pipeline interface.
type MockPipeline struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineMockRecorder
}

// MockPipelineMockRecorder is the mock recorder for MockPipeline.
type MockPipelineMockRecorder struct {
	mock *MockPipeline
}

// NewMockPipeline creates a new mock instance.
func NewMockPipeline(ctrl *gomock.Controller) *MockPipeline {
	mock := &MockPipeline{ctrl: ctrl}
	mock.recorder = &MockPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipeline) EXPECT() *MockPipelineMockRecorder {
	return m.recorder
}

// NotifyError mocks base method.
func (m *MockPipeline) NotifyError(arg0 context.Context, arg1 string, arg2 api.ErrorType, arg3 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyError", arg0, arg1, arg2, arg3)
}

// NotifyError indicates an expected call of NotifyError.
func (mr *MockPipelineMockRecorder) NotifyError(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyError", reflect.TypeOf((*MockPipeline)(nil).NotifyError), arg0, arg1, arg2, arg3)
}

// NotifySuccessfulRequest mocks base method.
func (m *MockPipeline) NotifySuccessfulRequest(arg0 context.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifySuccessfulRequest", arg0, arg1)
}

// NotifySuccessfulRequest indicates an expected call of NotifySuccessfulRequest.
func (mr *MockPipelineMockRecorder) NotifySuccessfulRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifySuccessfulRequest", reflect.TypeOf((*MockPipeline)(nil).NotifySuccessfulRequest), arg0, arg1)
}

// NotifyTransactionStatus mocks base method.
func (m *MockPipeline) NotifyTransactionStatus(arg0 context.Context, arg1, arg2, arg3 string, arg4 error, arg5 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyTransactionStatus", arg0, arg1, arg2, arg3, arg4, arg5)
}

// NotifyTransactionStatus indicates an expected call of NotifyTransactionStatus.
func (mr *MockPipelineMockRecorder) NotifyTransactionStatus(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyTransactionStatus", reflect.TypeOf((*MockPipeline)(nil).NotifyTransactionStatus), arg0, arg1, arg2, arg3, arg4, arg5)
}

// RequestPassphrase mocks base method.
func (m *MockPipeline) RequestPassphrase(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPassphrase", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestPassphrase indicates an expected call of RequestPassphrase.
func (mr *MockPipelineMockRecorder) RequestPassphrase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPassphrase", reflect.TypeOf((*MockPipeline)(nil).RequestPassphrase), arg0, arg1, arg2)
}

// RequestPermissionsReview mocks base method.
func (m *MockPipeline) RequestPermissionsReview(arg0 context.Context, arg1, arg2, arg3 string, arg4 map[string]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPermissionsReview", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestPermissionsReview indicates an expected call of RequestPermissionsReview.
func (mr *MockPipelineMockRecorder) RequestPermissionsReview(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPermissionsReview", reflect.TypeOf((*MockPipeline)(nil).RequestPermissionsReview), arg0, arg1, arg2, arg3, arg4)
}

// RequestTransactionReview mocks base method.
func (m *MockPipeline) RequestTransactionReview(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestTransactionReview", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestTransactionReview indicates an expected call of RequestTransactionReview.
func (mr *MockPipelineMockRecorder) RequestTransactionReview(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestTransactionReview", reflect.TypeOf((*MockPipeline)(nil).RequestTransactionReview), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// RequestWalletConnectionReview mocks base method.
func (m *MockPipeline) RequestWalletConnectionReview(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWalletConnectionReview", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestWalletConnectionReview indicates an expected call of RequestWalletConnectionReview.
func (mr *MockPipelineMockRecorder) RequestWalletConnectionReview(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWalletConnectionReview", reflect.TypeOf((*MockPipeline)(nil).RequestWalletConnectionReview), arg0, arg1, arg2)
}

// RequestWalletSelection mocks base method.
func (m *MockPipeline) RequestWalletSelection(arg0 context.Context, arg1, arg2 string, arg3 []string) (api.SelectedWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWalletSelection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(api.SelectedWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestWalletSelection indicates an expected call of RequestWalletSelection.
func (mr *MockPipelineMockRecorder) RequestWalletSelection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWalletSelection", reflect.TypeOf((*MockPipeline)(nil).RequestWalletSelection), arg0, arg1, arg2, arg3)
}
