// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/rewards (interfaces: Teams)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTeams is a mock of Teams interface.
type MockTeams struct {
	ctrl     *gomock.Controller
	recorder *MockTeamsMockRecorder
}

// MockTeamsMockRecorder is the mock recorder for MockTeams.
type MockTeamsMockRecorder struct {
	mock *MockTeams
}

// NewMockTeams creates a new mock instance.
func NewMockTeams(ctrl *gomock.Controller) *MockTeams {
	mock := &MockTeams{ctrl: ctrl}
	mock.recorder = &MockTeamsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeams) EXPECT() *MockTeamsMockRecorder {
	return m.recorder
}

// GetAllPartiesInTeams mocks base method.
func (m *MockTeams) GetAllPartiesInTeams() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPartiesInTeams")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllPartiesInTeams indicates an expected call of GetAllPartiesInTeams.
func (mr *MockTeamsMockRecorder) GetAllPartiesInTeams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPartiesInTeams", reflect.TypeOf((*MockTeams)(nil).GetAllPartiesInTeams))
}

// GetTeamMembers mocks base method.
func (m *MockTeams) GetTeamMembers(arg0 []string) map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembers", arg0)
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// GetTeamMembers indicates an expected call of GetTeamMembers.
func (mr *MockTeamsMockRecorder) GetTeamMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembers", reflect.TypeOf((*MockTeams)(nil).GetTeamMembers), arg0)
}
