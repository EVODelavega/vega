// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/fee (interfaces: ReferralDiscountRewardService,VolumeDiscountService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "code.vegaprotocol.io/vega/core/types"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockReferralDiscountRewardService is a mock of ReferralDiscountRewardService interface.
type MockReferralDiscountRewardService struct {
	ctrl     *gomock.Controller
	recorder *MockReferralDiscountRewardServiceMockRecorder
}

// MockReferralDiscountRewardServiceMockRecorder is the mock recorder for MockReferralDiscountRewardService.
type MockReferralDiscountRewardServiceMockRecorder struct {
	mock *MockReferralDiscountRewardService
}

// NewMockReferralDiscountRewardService creates a new mock instance.
func NewMockReferralDiscountRewardService(ctrl *gomock.Controller) *MockReferralDiscountRewardService {
	mock := &MockReferralDiscountRewardService{ctrl: ctrl}
	mock.recorder = &MockReferralDiscountRewardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferralDiscountRewardService) EXPECT() *MockReferralDiscountRewardServiceMockRecorder {
	return m.recorder
}

// GetReferrer mocks base method.
func (m *MockReferralDiscountRewardService) GetReferrer(arg0 types.PartyID) (types.PartyID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferrer", arg0)
	ret0, _ := ret[0].(types.PartyID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferrer indicates an expected call of GetReferrer.
func (mr *MockReferralDiscountRewardServiceMockRecorder) GetReferrer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferrer", reflect.TypeOf((*MockReferralDiscountRewardService)(nil).GetReferrer), arg0)
}

// ReferralDiscountFactorForParty mocks base method.
func (m *MockReferralDiscountRewardService) ReferralDiscountFactorForParty(arg0 types.PartyID) decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReferralDiscountFactorForParty", arg0)
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// ReferralDiscountFactorForParty indicates an expected call of ReferralDiscountFactorForParty.
func (mr *MockReferralDiscountRewardServiceMockRecorder) ReferralDiscountFactorForParty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReferralDiscountFactorForParty", reflect.TypeOf((*MockReferralDiscountRewardService)(nil).ReferralDiscountFactorForParty), arg0)
}

// RewardsFactorMultiplierAppliedForParty mocks base method.
func (m *MockReferralDiscountRewardService) RewardsFactorMultiplierAppliedForParty(arg0 types.PartyID) decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RewardsFactorMultiplierAppliedForParty", arg0)
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// RewardsFactorMultiplierAppliedForParty indicates an expected call of RewardsFactorMultiplierAppliedForParty.
func (mr *MockReferralDiscountRewardServiceMockRecorder) RewardsFactorMultiplierAppliedForParty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewardsFactorMultiplierAppliedForParty", reflect.TypeOf((*MockReferralDiscountRewardService)(nil).RewardsFactorMultiplierAppliedForParty), arg0)
}

// MockVolumeDiscountService is a mock of VolumeDiscountService interface.
type MockVolumeDiscountService struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeDiscountServiceMockRecorder
}

// MockVolumeDiscountServiceMockRecorder is the mock recorder for MockVolumeDiscountService.
type MockVolumeDiscountServiceMockRecorder struct {
	mock *MockVolumeDiscountService
}

// NewMockVolumeDiscountService creates a new mock instance.
func NewMockVolumeDiscountService(ctrl *gomock.Controller) *MockVolumeDiscountService {
	mock := &MockVolumeDiscountService{ctrl: ctrl}
	mock.recorder = &MockVolumeDiscountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeDiscountService) EXPECT() *MockVolumeDiscountServiceMockRecorder {
	return m.recorder
}

// VolumeDiscountFactorForParty mocks base method.
func (m *MockVolumeDiscountService) VolumeDiscountFactorForParty(arg0 types.PartyID) decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeDiscountFactorForParty", arg0)
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// VolumeDiscountFactorForParty indicates an expected call of VolumeDiscountFactorForParty.
func (mr *MockVolumeDiscountServiceMockRecorder) VolumeDiscountFactorForParty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDiscountFactorForParty", reflect.TypeOf((*MockVolumeDiscountService)(nil).VolumeDiscountFactorForParty), arg0)
}
