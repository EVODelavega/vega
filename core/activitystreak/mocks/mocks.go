// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/activitystreak (interfaces: Broker,MarketsStatsAggregator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	events "code.vegaprotocol.io/vega/core/events"
	types "code.vegaprotocol.io/vega/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockBroker is a mock of Broker interface.
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMockRecorder
}

// MockBrokerMockRecorder is the mock recorder for MockBroker.
type MockBrokerMockRecorder struct {
	mock *MockBroker
}

// NewMockBroker creates a new mock instance.
func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &MockBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroker) EXPECT() *MockBrokerMockRecorder {
	return m.recorder
}

// SendBatch mocks base method.
func (m *MockBroker) SendBatch(arg0 []events.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendBatch", arg0)
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockBrokerMockRecorder) SendBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockBroker)(nil).SendBatch), arg0)
}

// MockMarketsStatsAggregator is a mock of MarketsStatsAggregator interface.
type MockMarketsStatsAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockMarketsStatsAggregatorMockRecorder
}

// MockMarketsStatsAggregatorMockRecorder is the mock recorder for MockMarketsStatsAggregator.
type MockMarketsStatsAggregatorMockRecorder struct {
	mock *MockMarketsStatsAggregator
}

// NewMockMarketsStatsAggregator creates a new mock instance.
func NewMockMarketsStatsAggregator(ctrl *gomock.Controller) *MockMarketsStatsAggregator {
	mock := &MockMarketsStatsAggregator{ctrl: ctrl}
	mock.recorder = &MockMarketsStatsAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketsStatsAggregator) EXPECT() *MockMarketsStatsAggregatorMockRecorder {
	return m.recorder
}

// GetMarketStats mocks base method.
func (m *MockMarketsStatsAggregator) GetMarketStats() map[string]types.MarketStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketStats")
	ret0, _ := ret[0].(map[string]types.MarketStats)
	return ret0
}

// GetMarketStats indicates an expected call of GetMarketStats.
func (mr *MockMarketsStatsAggregatorMockRecorder) GetMarketStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketStats", reflect.TypeOf((*MockMarketsStatsAggregator)(nil).GetMarketStats))
}
