// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/api (interfaces: MarketsService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "code.vegaprotocol.io/vega/datanode/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockMarketsService is a mock of MarketsService interface.
type MockMarketsService struct {
	ctrl     *gomock.Controller
	recorder *MockMarketsServiceMockRecorder
}

// MockMarketsServiceMockRecorder is the mock recorder for MockMarketsService.
type MockMarketsServiceMockRecorder struct {
	mock *MockMarketsService
}

// NewMockMarketsService creates a new mock instance.
func NewMockMarketsService(ctrl *gomock.Controller) *MockMarketsService {
	mock := &MockMarketsService{ctrl: ctrl}
	mock.recorder = &MockMarketsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketsService) EXPECT() *MockMarketsServiceMockRecorder {
	return m.recorder
}

// GetAllPaged mocks base method.
func (m *MockMarketsService) GetAllPaged(arg0 context.Context, arg1 string, arg2 entities.CursorPagination, arg3 bool) ([]entities.Market, entities.PageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaged", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]entities.Market)
	ret1, _ := ret[1].(entities.PageInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllPaged indicates an expected call of GetAllPaged.
func (mr *MockMarketsServiceMockRecorder) GetAllPaged(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaged", reflect.TypeOf((*MockMarketsService)(nil).GetAllPaged), arg0, arg1, arg2, arg3)
}

// GetByID mocks base method.
func (m *MockMarketsService) GetByID(arg0 context.Context, arg1 string) (entities.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(entities.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMarketsServiceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMarketsService)(nil).GetByID), arg0, arg1)
}

// GetByTxHash mocks base method.
func (m *MockMarketsService) GetByTxHash(arg0 context.Context, arg1 entities.TxHash) ([]entities.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTxHash", arg0, arg1)
	ret0, _ := ret[0].([]entities.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTxHash indicates an expected call of GetByTxHash.
func (mr *MockMarketsServiceMockRecorder) GetByTxHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTxHash", reflect.TypeOf((*MockMarketsService)(nil).GetByTxHash), arg0, arg1)
}

// ListSuccessorMarkets mocks base method.
func (m *MockMarketsService) ListSuccessorMarkets(arg0 context.Context, arg1 string, arg2 bool, arg3 entities.CursorPagination) ([]entities.SuccessorMarket, entities.PageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuccessorMarkets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]entities.SuccessorMarket)
	ret1, _ := ret[1].(entities.PageInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSuccessorMarkets indicates an expected call of ListSuccessorMarkets.
func (mr *MockMarketsServiceMockRecorder) ListSuccessorMarkets(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuccessorMarkets", reflect.TypeOf((*MockMarketsService)(nil).ListSuccessorMarkets), arg0, arg1, arg2, arg3)
}
