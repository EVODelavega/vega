// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/api (interfaces: MarketDataService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entities "code.vegaprotocol.io/vega/datanode/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockMarketDataService is a mock of MarketDataService interface.
type MockMarketDataService struct {
	ctrl     *gomock.Controller
	recorder *MockMarketDataServiceMockRecorder
}

// MockMarketDataServiceMockRecorder is the mock recorder for MockMarketDataService.
type MockMarketDataServiceMockRecorder struct {
	mock *MockMarketDataService
}

// NewMockMarketDataService creates a new mock instance.
func NewMockMarketDataService(ctrl *gomock.Controller) *MockMarketDataService {
	mock := &MockMarketDataService{ctrl: ctrl}
	mock.recorder = &MockMarketDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketDataService) EXPECT() *MockMarketDataServiceMockRecorder {
	return m.recorder
}

// GetHistoricMarketData mocks base method.
func (m *MockMarketDataService) GetHistoricMarketData(arg0 context.Context, arg1 string, arg2, arg3 *time.Time, arg4 entities.Pagination) ([]entities.MarketData, entities.PageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoricMarketData", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]entities.MarketData)
	ret1, _ := ret[1].(entities.PageInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHistoricMarketData indicates an expected call of GetHistoricMarketData.
func (mr *MockMarketDataServiceMockRecorder) GetHistoricMarketData(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricMarketData", reflect.TypeOf((*MockMarketDataService)(nil).GetHistoricMarketData), arg0, arg1, arg2, arg3, arg4)
}

// GetMarketDataByID mocks base method.
func (m *MockMarketDataService) GetMarketDataByID(arg0 context.Context, arg1 string) (entities.MarketData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketDataByID", arg0, arg1)
	ret0, _ := ret[0].(entities.MarketData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketDataByID indicates an expected call of GetMarketDataByID.
func (mr *MockMarketDataServiceMockRecorder) GetMarketDataByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketDataByID", reflect.TypeOf((*MockMarketDataService)(nil).GetMarketDataByID), arg0, arg1)
}

// GetMarketsData mocks base method.
func (m *MockMarketDataService) GetMarketsData(arg0 context.Context) ([]entities.MarketData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketsData", arg0)
	ret0, _ := ret[0].([]entities.MarketData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketsData indicates an expected call of GetMarketsData.
func (mr *MockMarketDataServiceMockRecorder) GetMarketsData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketsData", reflect.TypeOf((*MockMarketDataService)(nil).GetMarketsData), arg0)
}

// ObserveMarketData mocks base method.
func (m *MockMarketDataService) ObserveMarketData(arg0 context.Context, arg1 int, arg2 []string) (<-chan []*entities.MarketData, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObserveMarketData", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan []*entities.MarketData)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// ObserveMarketData indicates an expected call of ObserveMarketData.
func (mr *MockMarketDataServiceMockRecorder) ObserveMarketData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveMarketData", reflect.TypeOf((*MockMarketDataService)(nil).ObserveMarketData), arg0, arg1, arg2)
}
