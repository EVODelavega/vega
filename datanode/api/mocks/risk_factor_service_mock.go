// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/api (interfaces: RiskFactorService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "code.vegaprotocol.io/vega/datanode/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockRiskFactorService is a mock of RiskFactorService interface.
type MockRiskFactorService struct {
	ctrl     *gomock.Controller
	recorder *MockRiskFactorServiceMockRecorder
}

// MockRiskFactorServiceMockRecorder is the mock recorder for MockRiskFactorService.
type MockRiskFactorServiceMockRecorder struct {
	mock *MockRiskFactorService
}

// NewMockRiskFactorService creates a new mock instance.
func NewMockRiskFactorService(ctrl *gomock.Controller) *MockRiskFactorService {
	mock := &MockRiskFactorService{ctrl: ctrl}
	mock.recorder = &MockRiskFactorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRiskFactorService) EXPECT() *MockRiskFactorServiceMockRecorder {
	return m.recorder
}

// GetMarketRiskFactors mocks base method.
func (m *MockRiskFactorService) GetMarketRiskFactors(arg0 context.Context, arg1 string) (entities.RiskFactor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketRiskFactors", arg0, arg1)
	ret0, _ := ret[0].(entities.RiskFactor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketRiskFactors indicates an expected call of GetMarketRiskFactors.
func (mr *MockRiskFactorServiceMockRecorder) GetMarketRiskFactors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketRiskFactors", reflect.TypeOf((*MockRiskFactorService)(nil).GetMarketRiskFactors), arg0, arg1)
}
