// Copyright (c) 2022 Gobalsky Labs Limited
//
// Use of this software is governed by the Business Source License included
// in the LICENSE.DATANODE file and at https://www.mariadb.com/bsl11.
//
// Change Date: 18 months from the later of the date of the first publicly
// available Distribution of this version of the repository, and 25 June 2022.
//
// On the date above, in accordance with the Business Source License, use
// of this software will be governed by version 3 or later of the GNU General
// Public License.

package integration_test

import (
	"strings"
	"time"
)

// These types map to the results of GraphQL queries on the data node schema; it could probably be
// autogenerated from schema.graphql, but I haven't found a tool that does it nicely.

type Market struct {
	ID                            HexString
	Name                          string
	Fees                          Fees
	Trades                        []Trade
	TradableInstrument            TradableInstrument
	DecimalPlaces                 int
	OpeningAuction                AuctionDuration
	PriceMonitoringSettings       PriceMonitoringSettings
	LiquidityMonitoringParameters LiquidityMonitoringParameters
	TradingMode                   string
	State                         string
	Proposal                      Proposal
	Orders                        []Order
	Accounts                      []Account
}

type Fees struct {
	MakerFee          string
	InfrastructureFee string
	LiquidityFee      string
}

type TradableInstrument struct {
	Instrument Instrument
	// RiskModel        RiskModel
	MarginCalculator MarginCalculator
}

type Instrument struct {
	ID       string
	Code     string
	Name     string
	Metadata Metadata
}

type MarginCalculator struct {
	ScalingFactors ScalingFactors
}

type ScalingFactors struct {
	SearchLevel       float64
	InitialMargin     float64
	CollateralRelease float64
}

type Metadata struct {
	Tags []string
}

type AuctionDuration struct {
	DurationSecs int
	Volume       int
}

type Trade struct {
	ID                 HexString
	Price              string
	Size               string
	CreatedAt          TimeString
	Market             Market
	BuyOrder           HexString
	SellOrder          HexString
	Buyer              Party
	Seller             Party
	Aggressor          string
	Type               string
	BuyerFee           TradeFee
	SellerFee          TradeFee
	BuyerAuctionBatch  int
	SellerAuctionBatch int
}

type TradeFee struct {
	MakerFee          string
	InfrastructureFee string
	LiquidityFee      string
}

type PriceMonitoringSettings struct {
	Parameters          PriceMonitoringParameters
	UpdateFrequencySecs int
}

type PriceMonitoringParameters struct {
	Triggers []PriceMonitoringTrigger
}

type PriceMonitoringTrigger struct {
	HorizonSecs          int
	Probability          float64
	AuctionExtensionSecs float64
}

type LiquidityMonitoringParameters struct {
	TargetStakeParameters TargetStakeParameters
	TriggeringRatio       float64
}

type TargetStakeParameters struct {
	TimeWindow    int
	ScalingFactor float64
}

type Proposal struct {
	ID              HexString
	Reference       string
	Party           Party
	State           string
	Datetime        TimeString
	Terms           ProposalTerms
	Votes           ProposalVotes
	RejectionReason string
}

type Party struct {
	ID                 HexString
	Orders             []Order
	Trades             []Trade
	Accounts           []Account
	Proposals          []Proposal
	Votes              []Vote
	LiquidityProvision []LiquidityProvision
	Positions          []Position
	// TODO:
	// Margins []MarginLevels
	Withdrawals []Withdrawal
	Deposits    []Deposit
	// Delegations []Delegation
	// Stake PartyStake
	// Rewards []Reward
	// RewardSummaries []RewardSummary
}

type ProposalTerms struct {
	ClosingDateTime   TimeString
	EnactmentDatetime TimeString
	// TODO: Change (can't to ...on Foo yet)
}

type ProposalVotes struct {
	Yes ProposalVoteSide
	No  ProposalVoteSide
}

type ProposalVoteSide struct {
	Votes       []Vote
	TotalNumber string
	TotalWeight string
	TotalTokens string
}

type Vote struct {
	Value                  string
	Party                  Party
	Datetime               TimeString
	ProposalID             HexString
	GovernanceTokenBalance string
	GovernanceTokenWeight  string
}

type Order struct {
	ID                 HexString
	Price              string
	Side               string
	Timeinforce        string
	Market             Market
	Size               string
	Remaining          string
	Party              Party
	CreatedAt          TimeString
	ExpiresAt          TimeString
	Status             string
	Reference          string
	Trades             []Trade
	Type               string
	RejectionReason    string
	Version            string
	UpdatedAt          string
	PeggedOrder        PeggedOrder
	LiquidityProvision LiquidityProvision
}

type PeggedOrder struct {
	Reference string
	Offset    string
}

type LiquidityProvision struct {
	ID               HexString
	Party            Party
	CreatedAt        TimeString
	UpdatedAt        TimeString
	Market           Market
	CommitmentAmount string
	Fee              string
	Sells            []LiquidityOrderReference
	Buys             []LiquidityOrderReference
	Version          string
	Status           string
	Reference        string
}

type LiquidityOrderReference struct {
	Order          Order
	LiquidityOrder LiquidityOrder
}

type LiquidityOrder struct {
	Reference  PeggedReference
	Proportion int
	Offset     string
}

type PeggedReference = HexString

type Account struct {
	Balance string
	Asset   Asset
	Type    string
	Market  Market
}

type Asset struct {
	ID          HexString
	Name        string
	Symbol      string
	TotalSupply string
	Decimals    int
	Quantum     string
	// TODO: source
	InfrastructureFeeAccount *Account
	GlobalRewardPoolAccount  *Account
}

// ----------------------------------------------------------------------------
// Some wrappers around standard types to provide non-standard comparisons,
// where the output from the API might differ slightly but we don't care.

type HexString string

func (s HexString) Equal(other HexString) bool {
	return strings.EqualFold(string(s), string(other))
}

type TimeString string

func (s TimeString) Equal(other TimeString) bool {
	if s == "" && other == "" {
		return true
	}
	// Postgres doesn't store nanoseconds, so only compare the millisecond portion
	t1, err1 := time.Parse(time.RFC3339Nano, string(s))
	t2, err2 := time.Parse(time.RFC3339Nano, string(other))

	if err1 != nil || err2 != nil {
		return false
	}

	t1t := t1.Truncate(time.Microsecond)
	t2t := t2.Truncate(time.Microsecond)
	if t1t != t2t {
		_ = "foo"
	}
	return t1t == t2t
}

type Deposit struct {
	ID                HexString
	Party             Party
	Amount            string
	Asset             Asset
	Status            string
	CreatedTimestamp  TimeString
	CreditedTimestamp TimeString
	TxHash            string
}

type NetworkParameter struct {
	Key   string
	Value string
}

type Epoch struct {
	ID          HexString
	Timestamps  EpochTimestamps
	Delegations []Delegation
}

type EpochTimestamps struct {
	Start  string
	End    string
	Expiry string
}

type Delegation struct {
	Amount string
	Party  Party
	Node   Node
	Epoch  int
}

type NodeData struct {
	StakedTotal     string
	TotalNodes      uint32
	InactiveNodes   uint32
	ValidatingNodes uint32
	Uptime          float64
}

type Node struct {
	ID                HexString
	Pubkey            string
	TmPubkey          string
	EthereumAddress   string
	InfoURL           string
	Location          string
	StakedByOperator  string
	StakedByDelegates string
	StakedTotal       string
	PendingStake      string
	EpochData         EpochData
	Status            string
	Delegations       []Delegation
	Name              string
	AvatarURL         string
	RewardScore       RewardScore
	RankingScore      RankingScore
}

type EpochData struct {
	Total   int
	Offline int
	Online  int
}

type RewardScore struct {
	ValidatorNodeStatus string

	PerformanceScore  string
	MultisigScore     string
	RawValidatorScore string
	ValidatorScore    string
	NormalisedScore   string
}

type RankingScore struct {
	Status         string
	PreviousStatus string

	VotingPower      string
	StakeScore       string
	PerformanceScore string
	RankingScore     string
}

type Withdrawal struct {
	ID                 HexString
	Party              Party
	Amount             string
	Asset              Asset
	Status             string
	Ref                string
	Expiry             TimeString
	TxHash             string
	CreatedTimestamp   TimeString
	WithdrawnTimeStamp TimeString
}

type Transfer struct {
	ID              string
	From            string
	FromAccountType string
	To              string
	ToAccountType   string
	Amount          string
	Reference       string
	Status          string
	Timestamp       time.Time
	Asset           Asset
}

type PropertyKeyType = string

type PropertyKey struct {
	Name string
	Type PropertyKeyType
}

type ConditionOperator = string

type Condition struct {
	Operator ConditionOperator
	Value    string
}

type Filter struct {
	Key        PropertyKey
	Conditions []Condition
}

type OracleSpecStatus = string

type OracleSpec struct {
	OracleSpecsConnection OracleSpecsConnection `json:"oracleSpecsConnection"`
}

type OracleSpecsConnection struct {
	Edges []OracleSpecEdge `json:"edges"`
}

const sampleOracleSpec = `{"data":{"oracleSpecsConnection":{"edges":[{"node":{"dataSourceSpec":{"spec":{"id":"f81be2edd0db5185ca1aac004edb1f72f0c0823a805ca3d679db5f3e900fb8d1","createdAt":"1666863297248015000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"f5985313ee34c7e3cc15724503fbeece5b3b480785e8ee3433f2c8fb9d035b15","createdAt":"1666862111570831000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"f0ae796b6bd5b4e695716fd11c4ebc04bd11e9936f6d3149c333629e4132c3fe","createdAt":"1666862689628158000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"e51ba53db59967219146d007bb41f3fdf6450955056de2cc92d29906b65bf944","createdAt":"1666863364185067000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"e1c499dcef4f8eca25e89dcbff0042ddb8495e93e4ca73cc8fd17ecb0a737147","createdAt":"1666861989917052000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"def64bc03fdec683a001493af705c8a5427ee441bed301d847a1a3f6cbd0938c","createdAt":"1666863461384678000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"d6c46eed4a32b6cba57326dfbabf499424b1cafe100b93b46e62e96e7ffafa4e","createdAt":"1666862141054503000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"d20cfd3953f7427c388c7106f5d74bdddee67b2dd6d6655bb64d35a61163ca6c","createdAt":"1666863182529668000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"c930341bb44ab542abdace08c8e7484528aa052b0af4d940b3143df825ab6d7b","createdAt":"1666862141054503000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"c7275a71dbc204aa9230bc53a80714317bd73836092476418081297a065b3e54","createdAt":"1666862824045850000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"c2fcbef6587b3be239cf04b934ca80e351d3c1014c9ba115a8b7622174d84c0a","createdAt":"1666863461384678000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"c08e84ac7b629c5b2657fcd2ca923c2293cbf8928e5f304c29695d5641c55832","createdAt":"1666862824045850000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"be03e797caff8766d0cb0f20256695c415dc0c7e7fcf53c7f68836b2f494d67e","createdAt":"1666863147143085000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"b26f2954cda2d7bac344f3a81c173ba87b9b483b20810a06f68f72224d271c81","createdAt":"1666863412341218000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"988f8586f93873e4e7528da522bfe08e55efc1ae431258316bda28b7caf4a72f","createdAt":"1666862493462797000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"94ad11763feab08d0bc4e32f6fc3efb66915bb8977ae692271f45407f9a9c667","createdAt":"1666863182529668000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"8f326947835befec76e4c29cce0f577776c72867586d85ab2b1b1b732d493fe4","createdAt":"1666863244865859000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"8eb1f1a669f810348aa3fb7da2c8dcbb14b4af607bde11fc13fe0971303b08f9","createdAt":"1666862878891999000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"8afb12badeb98fa956e2c9b655ea62630c8d14303803c443662dc993d5cc6136","createdAt":"1666862424615310000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"828357f3991247438755d74cd26d95da51690e9b32a88cd4204a9621a9a90299","createdAt":"1666863244865859000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"7e480ee11ec1abe4e07f9810cab5c7139885b1b1e8c854eddb9be7c31212b3c0","createdAt":"1666862111570831000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"79808e52e5ed0d82d075a4d9d698c4f580884b00dba1f32604bff4221bf7274b","createdAt":"1666863154080543000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"797cfad24d737c5fedcb1a6dcdd37160fba3d3ad58fe5e5e71a91e7e6ef3199d","createdAt":"1666862060104438000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"6f74e13f3ee511b084fade9b6e216c35fd4e4ca89a638ef6cb12f627b1403d5a","createdAt":"1666861989917052000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"693bc046e5397d508022bdbfe6b06ca634d84cbe0360536e7fad43deadf3477f","createdAt":"1666862336493680000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"68c5190c0ca56669125141855df03db790ab99a0c10969371d8b5afe4ddd92d1","createdAt":"1666863364185067000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"63d59bc285d394eeb7647ebb0eb4a9affca60cedb34d01b43c337aefbb9c0e1a","createdAt":"1666862366434679000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"5f392010c14fd82c6671c8b0ce7712239f5add20969136064c5e3d8a511263dd","createdAt":"1666862878891999000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"5c9382ded2cd39b78d3992f55c380e6facf74a3edea987540f084dd3a376890b","createdAt":"1666863154080543000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"50fc85c5ec7a8a8c95510c6e02ecc55c9756199064909a1f7b1949e74b0593d8","createdAt":"1666862366434679000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"4bffd0bde1955400ee4b09ad675e13e3b45551d2dc541e39d768ab0fcd2fea5d","createdAt":"1666862493462797000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"483dd7e7060b9fee335ef1c89f294aaa22954b9e5a2ed73f4e48e4a76342da6c","createdAt":"1666862060104438000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"4701bba079f6ba1f1837b2fafb0f763fef4d8685ed69359f90cf45ca2b2c044c","createdAt":"1666862689628158000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"44027c6f3a68d6279aec2848919fe0ec529d011ee38605ad84423d2c78ba4da1","createdAt":"1666863297248015000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"3a9829b4364072148710c92b05ac26ef3e47594cf2a947ef7b480593a0584fa0","createdAt":"1666863278573417000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"3a15b5d8efa98db021ee3a06c579b58049a5a6e5cd5daf5a92e5f6a3749013e8","createdAt":"1666863215841654000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"399723460918d20f65a9ceefb5f0f4b50002779a8c671b78d52b77beaa78e0e6","createdAt":"1666863332017068000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"3647c4272294039760986da8cd8ce217a0d8cae48a7923b7ee7b5dc0fc89cd78","createdAt":"1666863147143085000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"361ab4420b350360f3aced3028e5f44ebbbe8ad90a2871af57c4b26d3c35fe3b","createdAt":"1666863215841654000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"34d5c0f28edd617ee90f59bfeb00e47a67928c2d56c99ee3b8bf9b7cdb598a0a","createdAt":"1666862336493680000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"2f7325ccd5f9ffd74b6f95bc4b28b539a3463f28508951fa4993fde4543c8243","createdAt":"1666863278573417000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"2462f445de240225ed13b4cea13b205017325f499e2f74794bc0c8103fdbe448","createdAt":"1666862803847103000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"1f7aaaf39da2c1d853586f8c9d129df7e33519fa5a08a34ca7b25340ae413518","createdAt":"1666862087669875000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"1a633c6120a060701805260d4c7f66325dfab9ba0f8432b770ce28f6cba03606","createdAt":"1666862803847103000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"184f2c6d71e7eb975ce0f0b3fa8e6d1d8995f72e98c8d02d9e3751fe99b6acf0","createdAt":"1666862424615310000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"16b5d61b2efa9a7e981a97aa01c98a9a825e00d2b185201b4d1fa8c0c2ad2c3f","createdAt":"1666863332017068000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"1454b4fff193c1a621a1ec63e96a2ff0302ec26f633894eb66fc3c4cc3b87e59","createdAt":"1666863412341218000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}},{"node":{"dataSourceSpec":{"spec":{"id":"1206437073bab000e0812fbb5800a096cd695b1eaff2396e274c20d4a720eff4","createdAt":"1666862087669875000","updatedAt":"0","config":{"signers":[{"signer":{"key":"63643132626536363837633736653336333065343763353037373665643365336166656464663536336263396433376137333931366266376138343833646133"}}]},"status":"STATUS_ACTIVE"}}}}]}}}`

type graphResponse struct {
	Data   *OracleSpec `json:"data"`
	Errors []graphErr
}

type graphErr struct {
	Message string
}

func (e graphErr) Error() string {
	return "graphql: " + e.Message
}

/*
	func TestSample(t *testing.T) {
		gr := &graphResponse{
			Data: &OracleSpec{},
		}

		buf := strings.NewReader(sampleOracleSpec)

		if err := json.NewDecoder(buf).Decode(&gr); err != nil {
			panic(err)
		}

		print(gr.Data)
	}
*/
type OracleSpecEdge struct {
	Node struct {
		DataSourceSpec DataSourceSpec `json:"dataSourceSpec"`
		DataConnection DataConnection `json:"dataConnection"`
	} `json:"node"`
}

type DataSourceSpec struct {
	Spec Spec `json:"spec"`
}

type Spec struct {
	Id        string           `json:"id"`
	CreatedAt string           `json:"createdAt"`
	UpdatedAt string           `json:"updatedAt"`
	Config    OracleConfig     `json:"config"`
	Status    OracleSpecStatus `json:"status"`
}

type OracleConfig struct {
	Signers []Signer `json:"signers"`
	Filters []Filter `json:"filters"`
}

type Signer struct {
	Signer SignerType `json:"signer"`
}

type SignerType struct {
	Key     string `json:"key"`
	Address string `json:"address"`
}

type DataConnection struct {
	Edges []OracleEdge `json:"edges"`
}

type OracleEdge struct {
	Node OracleNode `json:"node"`
}

type OracleNode struct {
	ExternalData OracleExternalData `json:"externalData"`
}

type OracleExternalData struct {
	Data OracleData `json:"data"`
}

type OracleData struct {
	MatchedSpecIds []string `json:"matchedSpecIds"`
	BroadcastAt    string   `json:"broadcastAt"`
}

type Position struct {
	Market            Market
	Party             Party
	OpenVolume        string
	RealisedPNL       string
	UnrealisedPNL     string
	AverageEntryPrice string
	UpdatedAt         TimeString
}

type NodeSignature struct {
	ID        HexString
	Signature HexString
	Kind      string
}

type ERC20WithdrawalApproval struct {
	AssetSource   string
	Amount        string
	Nonce         string
	Signatures    string
	TargetAddress string
}
